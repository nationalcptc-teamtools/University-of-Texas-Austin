- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>One or more system settings or configuration elements can be externally
      controlled by a user.</p><p>Allowing external control of system settings can
      disrupt service or cause an application to behave in unexpected, and potentially
      malicious ways.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Compartmentalize the system to have
      safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive
      data to go outside of the trust boundary and always be careful when interfacing
      with a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>

      <p>Implementation Architecture and Design: Because setting manipulation covers
      a diverse set of functions, any attempt at illustrating it will inevitably be
      incomplete. Rather than searching for a tight-knit relationship between the
      functions addressed in the setting manipulation category, take a step back and
      consider the sorts of system values that an attacker should not be allowed to
      control.</p>

      <p>Implementation Architecture and Design: In general, do not allow user-provided
      or otherwise untrusted data to control sensitive values. The leverage that an
      attacker gains by controlling these values is not always immediately obvious,
      but do not underestimate the creativity of the attacker.</p>'
    title: External Control of System or Configuration Setting
    vulnType: State Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/15.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses external input to construct a pathname that is
      intended to identify a file or directory that is located underneath a restricted
      parent directory, but the product does not properly neutralize special elements
      within the pathname that can cause the pathname to resolve to a location that
      is outside of the restricted directory.</p><p>Many file operations are intended
      to take place within a restricted directory. By using special elements such
      as .. and / separators, attackers can escape outside of the restricted location
      to access files or directories that are elsewhere on the system. One of the
      most common special elements is the ../ sequence, which in most modern operating
      systems is interpreted as the parent directory of the current location. This
      is referred to as relative path traversal. Path traversal also covers the use
      of absolute pathnames such as /usr/local/bin, which may also be useful in accessing
      unexpected files. This is referred to as absolute path traversal. In many programming
      languages, the injection of a null byte (the 0 or NUL) may allow an attacker
      to truncate a generated filename to widen the scope of attack. For example,
      the product may add .txt to any pathname, thus limiting the attacker to text
      files, but a null injection may effectively remove this restriction.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright. When validating filenames,
      use stringent allowlists that limit the character set to be used. If feasible,
      only allow a single . character in the filename to avoid weaknesses such as
      CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list
      of allowable file extensions, which will help to avoid CWE-434. Do not rely
      exclusively on a filtering mechanism that removes potentially dangerous characters.
      This is equivalent to a denylist, which may be incomplete (CWE-184). For example,
      filtering / is insufficient protection if the filesystem also supports the use
      of as a directory separator. Another possible error could occur when the filtering
      is applied in a way that still produces dangerous data (CWE-182). For example,
      if ../ sequences are removed from the .../...// string in a sequential fashion,
      two instances of ../ would be removed from the original string, but the remaining
      characters would still form the ../ string.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked. Use a built-in path canonicalization function
      (such as realpath() in C) that produces the canonical version of the pathname,
      which effectively removes .. sequences and symbolic links (CWE-23, CWE-59).
      This includes</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid.</p>

      <p>Operation: Use an application firewall that can detect attacks against this
      weakness. It can be beneficial in cases in which the code cannot be fixed (because
      it is controlled by a third party), as an emergency prevention measure while
      more comprehensive software assurance measures are applied, or to provide defense
      in depth.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt.
      Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>

      <p>Architecture and Design Operation: Store library, include, and utility files
      outside of the web document root, if possible. Otherwise, store them in a separate
      directory and use the web server''s access control capabilities to prevent attackers
      from directly requesting them. One common practice is to define a fixed constant
      in each calling program, then check for the existence of the constant in the
      library/include file; if the constant does not exist, then the file was directly
      requested, and it can exit immediately. This significantly reduces the chance
      of an attacker being able to bypass any protection mechanisms that are in the
      base program but not in the include files. It will also reduce the attack surface.</p>

      <p>Implementation: Ensure that error messages only contain minimal details that
      are useful to the intended audience and no one else. The messages need to strike
      the balance between being too cryptic (which can confuse users) or being too
      detailed (which may reveal more than intended). The messages should not reveal
      the methods that were used to determine the error. Attackers can use detailed
      information to refine or optimize their original attack, thereby increasing
      their chances of success. If errors must be captured in some detail, record
      them in log messages, but consider what could occur if the log messages can
      be viewed by attackers. Highly sensitive information such as passwords should
      never be saved to log files. Avoid inconsistent messaging that might accidentally
      tip off an attacker about internal state, such as whether a user account exists
      or not. In the context of path traversal, error messages which disclose path
      information can help attackers craft the appropriate attack strings to move
      through the file system hierarchy.</p>

      <p>Operation Implementation: When using PHP, configure the application so that
      it does not use register_globals. During implementation, develop the application
      so that it does not rely on this feature, but be wary of implementing a register_globals
      emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar
      issues.</p>'
    title: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/22.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product is vulnerable to file system contents disclosure through
      path equivalence. Path equivalence involves the use of special characters in
      file and directory names. The associated manipulations are intended to generate
      multiple names for the same object.</p><p>Path equivalence is usually employed
      in order to circumvent access controls expressed using an incomplete set of
      file name or file path representations. This is different from path traversal,
      wherein the manipulations are performed to generate a name for a different object.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>

      <p>Implementation: Use and specify an output encoding that can be handled by
      the downstream component that is reading the output. Common encodings include
      ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream
      component may choose a different encoding, either by assuming a default encoding
      or automatically inferring which encoding is being used, which can be erroneous.
      When the encodings are inconsistent, the downstream component might treat some
      character or byte sequences as special, even if they are not special in the
      original encoding. Attackers might then be able to exploit this discrepancy
      and conduct injection attacks; they even might be able to bypass protection
      mechanisms that assume the original encoding is also being used by the downstream
      component.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Resolution of Path Equivalence
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/41.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product attempts to access a file based on the filename, but
      it does not properly prevent that filename from identifying a link or shortcut
      that resolves to an unintended resource.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Follow the principle of least privilege
      when assigning access rights to entities in a software system. Denying access
      to a file can prevent an attacker from replacing that file with a link to a
      sensitive file. Ensure good compartmentalization in the system to provide protected
      areas that can be trusted.</p>'
    title: Improper Link Resolution Before File Access ('Link Following')
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/59.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not handle or incorrectly handles a file name
      that identifies a virtual resource that is not directly specified within the
      directory that is associated with the file name, causing the product to perform
      file-based operations on a resource that is not a file.</p><p>Virtual file names
      are represented like normal file names, but they are effectively aliases for
      other resources that do not behave like normal files. Depending on their functionality,
      they could be alternate entities. They are not necessarily listed in directories.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Handling of File Names that Identify Virtual Resources
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/66.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product allows user input to control or influence paths or
      file names that are used in filesystem operations.</p><p>This could allow an
      attacker to access or modify system files or other files that are critical to
      the application. Path manipulation errors occur when the following two conditions
      are met: 1. An attacker can specify a path used in an operation on the filesystem.
      2. By specifying the resource, the attacker gains a capability that would not
      otherwise be permitted. For example, the program may give the attacker the ability
      to overwrite the specified file or run with a configuration controlled by the
      attacker.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: When the set of filenames is limited
      or known, create a mapping from a set of fixed input values (such as numeric
      IDs) to the actual filenames, and reject all other inputs. For example, ID 1
      could map to inbox.txt and ID 2 could map to profile.txt. Features such as the
      ESAPI AccessReferenceMap provide this capability.</p>

      <p>Architecture and Design Operation: Run your code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict all access to files within a particular
      directory. Examples include the Unix chroot jail and AppArmor. In general, managed
      code may provide some protection. This may not be a feasible solution, and it
      only limits the impact to the operating system; the rest of your application
      may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses
      related to jails.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright. When validating filenames, use stringent allowlists that limit the
      character set to be used. If feasible, only allow a single . character in the
      filename to avoid weaknesses such as CWE-23, and exclude directory separators
      such as / to avoid CWE-36. Use a list of allowable file extensions, which will
      help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that
      removes potentially dangerous characters. This is equivalent to a denylist,
      which may be incomplete (CWE-184). For example, filtering / is insufficient
      protection if the filesystem also supports the use of as a directory separator.
      Another possible error could occur when the filtering is applied in a way that
      still produces dangerous data (CWE-182). For example, if ../ sequences are removed
      from the .../...// string in a sequential fashion, two instances of ../ would
      be removed from the original string, but the remaining characters would still
      form the ../ string.</p>

      <p>Implementation: Use a built-in path canonicalization function (such as realpath()
      in C) that produces the canonical version of the pathname, which effectively
      removes .. sequences and symbolic links (CWE-23, CWE-59).</p>

      <p>Installation Operation: Use OS-level permissions and run as a low-privileged
      user to limit the scope of any successful attack.</p>

      <p>Operation Implementation: If you are using PHP, configure your application
      so that it does not use register_globals. During implementation, develop your
      application so that it does not rely on this feature, but be wary of implementing
      a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621,
      and similar issues.</p>'
    title: External Control of File Name or Path
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/73.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product correctly neutralizes certain special elements, but
      it improperly neutralizes equivalent special elements.</p><p>The product may
      have a fixed list of special characters it believes is complete. However, there
      may be alternate encodings, or representations that also have the same meaning.
      For example, the product may filter out a leading slash (/) to prevent absolute
      path names, but does not account for a tilde (~) followed by a user name, which
      on some *nix systems could be expanded to an absolute pathname. Alternately,
      the product might filter a dangerous -e command-line switch when calling an
      external program, but it might not account for --exec or other switches that
      have the same semantics.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Utilize an appropriate mix of allowlist and denylist
      parsing to filter equivalent special element syntax from all input.</p>'
    title: Improper Neutralization of Equivalent Special Elements
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/76.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product constructs all or part of an OS command using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended OS command when
      it is sent to a downstream component.</p><p>This could allow attackers to execute
      unexpected, dangerous commands directly on the operating system. This weakness
      can lead to a vulnerability in environments in which the attacker does not have
      direct access to the operating system, such as in web applications. Alternately,
      if the weakness occurs in a privileged program, it could allow the attacker
      to specify commands that normally would not be accessible, or to call alternate
      commands with privileges that the attacker does not have. The problem is exacerbated
      if the compromised process does not follow the principle of least privilege,
      because the attacker-controlled commands may run with special system privileges
      that increases the amount of damage. There are at least two subtypes of OS command
      injection: The application intends to execute a single, fixed program that is
      under its own control. It intends to use externally-supplied inputs as arguments
      to that program. For example, the program might use system(nslookup [HOSTNAME])
      to run nslookup and allow the user to supply a HOSTNAME, which is used as an
      argument. Attackers cannot prevent nslookup from executing. However, if the
      program does not remove command separators from the HOSTNAME argument, attackers
      could place the separators into the arguments, which allows them to execute
      their own program after nslookup has finished executing. The application accepts
      an input that it uses to fully select which program to run, as well as which
      commands to use. The application simply redirects this entire command to the
      operating system. For example, the program might use exec([COMMAND]) to execute
      the [COMMAND] that was supplied by the user. If the COMMAND is under attacker
      control, then the attacker can execute arbitrary commands or programs. If the
      command is being executed using functions like exec() and CreateProcess(), the
      attacker might not be able to combine multiple commands together in the same
      line. From a weakness standpoint, these variants represent distinct programmer
      errors. In the first variant, the programmer clearly intends that input from
      untrusted parties will be part of the arguments in the command to be executed.
      In the second variant, the programmer does not intend for the command to be
      accessible to any untrusted party, but the programmer probably has not accounted
      for alternate ways in which malicious attackers can provide input.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: If at all possible, use library calls
      rather than external processes to recreate the desired functionality.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>

      <p>Architecture and Design: For any data that will be used to generate a command
      to be executed, keep as much of that data out of external control as possible.
      For example, in web applications, this may require storing the data locally
      in the session''s state instead of sending it out to the client in a hidden
      form field.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. For example, consider using the ESAPI Encoding control [REF-45]
      or a similar tool, library, or framework. These will help the programmer encode
      outputs in a manner less prone to error.</p>

      <p>Implementation: While it is risky to use dynamically-generated query strings,
      code, or commands that mix control and data together, sometimes it may be unavoidable.
      Properly quote arguments and escape any special characters within those arguments.
      The most conservative approach is to escape or filter all characters that do
      not pass an extremely strict allowlist (such as everything that is not alphanumeric
      or white space). If some special characters are still needed, such as white
      space, wrap each argument in quotes after the escaping/filtering step. Be careful
      of argument injection (CWE-88).</p>

      <p>Implementation: If the program to be executed allows arguments to be specified
      within an input file or from standard input, then consider using that mode to
      pass arguments instead of the command line.</p>

      <p>Architecture and Design: If available, use structured mechanisms that automatically
      enforce the separation between data and code. These mechanisms may be able to
      provide the relevant quoting, encoding, and validation automatically, instead
      of relying on the developer to provide this capability at every point where
      output is generated. Some languages offer multiple functions that can be used
      to invoke commands. Where possible, identify any function that invokes a command
      shell using a single string, and replace it with a function that requires individual
      arguments. These functions typically perform appropriate quoting and filtering
      of arguments. For example, in C, the system() function accepts a string that
      contains the entire command to be executed, whereas execl(), execve(), and others
      require an array of strings, one for each argument. In Windows, CreateProcess()
      only accepts one command at a time. In Perl, if system() is provided with an
      array of arguments, then it will quote each of the arguments.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright. When constructing OS command strings, use stringent allowlists that
      limit the character set based on the expected value of the parameter in the
      request. This will indirectly limit the scope of an attack, but this technique
      is less important than proper output encoding and escaping. Note that proper
      output encoding, escaping, and quoting is the most effective solution for preventing
      OS command injection, although input validation may provide some defense-in-depth.
      This is because it effectively limits what will appear in output. Input validation
      will not always prevent OS command injection, especially if you are required
      to support free-form text fields that could contain arbitrary characters. For
      example, when invoking a mail program, you might need to allow the subject field
      to contain otherwise-dangerous inputs like ; and > characters, which would need
      to be escaped or otherwise handled. In this case, stripping the character might
      reduce the risk of OS command injection, but it would produce incorrect behavior
      because the subject field would not be recorded as the user intended. This might
      seem to be a minor inconvenience, but it could be more important when the program
      relies on well-structured subject lines in order to pass messages to other components.
      Even if you make a mistake in your validation (such as forgetting one out of
      100 input fields), appropriate encoding is still likely to protect you from
      injection-based attacks. As long as it is not done in isolation, input validation
      is still a useful technique, since it may significantly reduce your attack surface,
      allow you to detect some attacks, and provide other security benefits that proper
      encoding does not address.</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs.</p>

      <p>Operation: Run the code in an environment that performs automatic taint propagation
      and prevents any command execution that uses tainted variables, such as Perl''s
      -T switch. This will force the program to perform validation steps that remove
      the taint, although you must be careful to correctly validate your inputs so
      that you do not accidentally mark dangerous inputs as untainted (see CWE-183
      and CWE-184).</p>

      <p>Operation: Run the code in an environment that performs automatic taint propagation
      and prevents any command execution that uses tainted variables, such as Perl''s
      -T switch. This will force the program to perform validation steps that remove
      the taint, although you must be careful to correctly validate your inputs so
      that you do not accidentally mark dangerous inputs as untainted (see CWE-183
      and CWE-184).</p>

      <p>Implementation: Ensure that error messages only contain minimal details that
      are useful to the intended audience and no one else. The messages need to strike
      the balance between being too cryptic (which can confuse users) or being too
      detailed (which may reveal more than intended). The messages should not reveal
      the methods that were used to determine the error. Attackers can use detailed
      information to refine or optimize their original attack, thereby increasing
      their chances of success. If errors must be captured in some detail, record
      them in log messages, but consider what could occur if the log messages can
      be viewed by attackers. Highly sensitive information such as passwords should
      never be saved to log files. Avoid inconsistent messaging that might accidentally
      tip off an attacker about internal state, such as whether a user account exists
      or not. In the context of OS Command Injection, error information passed back
      to the user might reveal whether an OS command is being executed and possibly
      which command is being used.</p>

      <p>Operation: Use runtime policy enforcement to create an allowlist of allowable
      commands, then prevent use of any command that does not appear in the allowlist.
      Technologies such as AppArmor are available to do this.</p>

      <p>Operation: Use an application firewall that can detect attacks against this
      weakness. It can be beneficial in cases in which the code cannot be fixed (because
      it is controlled by a third party), as an emergency prevention measure while
      more comprehensive software assurance measures are applied, or to provide defense
      in depth.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Operation Implementation: When using PHP, configure the application so that
      it does not use register_globals. During implementation, develop the application
      so that it does not rely on this feature, but be wary of implementing a register_globals
      emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar
      issues.</p>'
    title: Improper Neutralization of Special Elements used in an OS Command ('OS
      Command Injection')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/78.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product does not neutralize or incorrectly neutralizes user-controllable
      input before it is placed in output that is used as a web page that is served
      to other users.</p><p>Cross-site scripting (XSS) vulnerabilities occur when:
      Untrusted data enters a web application, typically from a web request. The web
      application dynamically generates a web page that contains this untrusted data.
      During page generation, the application does not prevent the data from containing
      content that is executable by a web browser, such as JavaScript, HTML tags,
      HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated
      web page through a web browser, which contains malicious script that was injected
      using the untrusted data. Since the script comes from a web page that was sent
      by the web server, the victim''s web browser executes the malicious script in
      the context of the web server''s domain. This effectively violates the intention
      of the web browser''s same-origin policy, which states that scripts in one domain
      should not be able to access resources or run code in a different domain. There
      are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The
      server reads data directly from the HTTP request and reflects it back in the
      HTTP response. Reflected XSS exploits occur when an attacker causes a victim
      to supply dangerous content to a vulnerable web application, which is then reflected
      back to the victim and executed by the web browser. The most common mechanism
      for delivering malicious content is to include it as a parameter in a URL that
      is posted publicly or e-mailed directly to the victim. URLs constructed in this
      manner constitute the core of many phishing schemes, whereby an attacker convinces
      a victim to visit a URL that refers to a vulnerable site. After the site reflects
      the attacker''s content back to the victim, the content is executed by the victim''s
      browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous
      data in a database, message forum, visitor log, or other trusted data store.
      At a later time, the dangerous data is subsequently read back into the application
      and included in dynamic content. From an attacker''s perspective, the optimal
      place to inject malicious content is in an area that is displayed to either
      many users or particularly interesting users. Interesting users typically have
      elevated privileges in the application or interact with sensitive data that
      is valuable to the attacker. If one of these users executes malicious content,
      the attacker may be able to perform privileged operations on behalf of the user
      or gain access to sensitive data belonging to the user. For example, the attacker
      might inject XSS into a log message, which might not be handled properly when
      an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the
      client performs the injection of XSS into the page; in the other types, the
      server performs the injection. DOM-based XSS generally involves server-controlled,
      trusted script that is sent to the client, such as Javascript that performs
      sanity checks on a form before the user submits it. If the server-supplied script
      processes user-supplied data and then injects it back into the web page (such
      as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script
      is injected, the attacker can perform a variety of malicious activities. The
      attacker could transfer private information, such as cookies that may include
      session information, from the victim''s machine to the attacker. The attacker
      could send malicious requests to a web site on behalf of the victim, which could
      be especially dangerous to the site if the victim has administrator privileges
      to manage that site. Phishing attacks could be used to emulate trusted web sites
      and trick the victim into entering a password, allowing the attacker to compromise
      the victim''s account on that web site. Finally, the script could exploit a
      vulnerability in the web browser itself possibly taking over the victim''s machine,
      sometimes referred to as drive-by hacking. In many cases, the attack can be
      launched without the victim even being aware of it. Even with careful users,
      attackers frequently use a variety of methods to encode the malicious portion
      of the attack, such as URL encoding or Unicode, so the request looks less suspicious.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a vetted library or framework that
      does not allow this weakness to occur or provides constructs that make this
      weakness easier to avoid. Examples of libraries and frameworks that make it
      easier to generate properly encoded output include Microsoft''s Anti-XSS library,
      the OWASP ESAPI Encoding module, and Apache Wicket.</p>

      <p>Implementation Architecture and Design: Understand the context in which your
      data will be used and the encoding that will be expected. This is especially
      important when transmitting data between different components, or when generating
      outputs that can contain multiple encodings at the same time, such as web pages
      or multi-part mail messages. Study all expected communication protocols and
      data representations to determine the required encoding strategies. For any
      data that will be output to another web page, especially any data that was received
      from external inputs, use the appropriate encoding on all non-alphanumeric characters.
      Parts of the same output document may require different encodings, which will
      vary depending on whether the output is in the</p>

      <p>Architecture and Design Implementation: Understand all the potential areas
      where untrusted inputs can enter your software</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Architecture and Design: If available, use structured mechanisms that automatically
      enforce the separation between data and code. These mechanisms may be able to
      provide the relevant quoting, encoding, and validation automatically, instead
      of relying on the developer to provide this capability at every point where
      output is generated.</p>

      <p>Implementation: Use and specify an output encoding that can be handled by
      the downstream component that is reading the output. Common encodings include
      ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream
      component may choose a different encoding, either by assuming a default encoding
      or automatically inferring which encoding is being used, which can be erroneous.
      When the encodings are inconsistent, the downstream component might treat some
      character or byte sequences as special, even if they are not special in the
      original encoding. Attackers might then be able to exploit this discrepancy
      and conduct injection attacks; they even might be able to bypass protection
      mechanisms that assume the original encoding is also being used by the downstream
      component. The problem of inconsistent output encodings often arises in web
      pages. If an encoding is not specified in an HTTP header, web browsers often
      guess about which encoding is being used. This can open up the browser to subtle
      XSS attacks.</p>

      <p>Implementation: With Struts, write all data from form beans with the bean''s
      filter attribute set to true.</p>

      <p>Implementation: To help mitigate XSS attacks against the user''s session
      cookie, set the session cookie to be HttpOnly. In browsers that support the
      HttpOnly feature (such as more recent versions of Internet Explorer and Firefox),
      this attribute can prevent the user''s session cookie from being accessible
      to malicious client-side scripts that use document.cookie. This is not a complete
      solution, since HttpOnly is not supported by all browsers. More importantly,
      XMLHTTPRequest and other powerful browser technologies provide read access to
      HTTP headers, including the Set-Cookie header in which the HttpOnly flag is
      set.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright. When dynamically constructing web pages, use stringent allowlists
      that limit the character set based on the expected value of the parameter in
      the request. All input should be validated and cleansed, not just parameters
      that the user is supposed to specify, but all data in the request, including
      hidden fields, cookies, headers, the URL itself, and so forth. A common mistake
      that leads to continuing XSS vulnerabilities is to validate only fields that
      are expected to be redisplayed by the site. It is common to see data from the
      request that is reflected by the application server or the application that
      the development team did not anticipate. Also, a field that is not currently
      reflected may be used by a future developer. Therefore, validating ALL parts
      of the HTTP request is recommended. Note that proper output encoding, escaping,
      and quoting is the most effective solution for preventing XSS, although input
      validation may provide some defense-in-depth. This is because it effectively
      limits what will appear in output. Input validation will not always prevent
      XSS, especially if you are required to support free-form text fields that could
      contain arbitrary characters. For example, in a chat application, the heart
      emoticon (<3) would likely pass the validation step, since it is commonly used.
      However, it cannot be directly inserted into the web page because it contains
      the < character, which would need to be escaped or otherwise handled. In this
      case, stripping the < might reduce the risk of XSS, but it would produce incorrect
      behavior because the emoticon would not be recorded. This might seem to be a
      minor inconvenience, but it would be more important in a mathematical forum
      that wants to represent inequalities. Even if you make a mistake in your validation
      (such as forgetting one out of 100 input fields), appropriate encoding is still
      likely to protect you from injection-based attacks. As long as it is not done
      in isolation, input validation is still a useful technique, since it may significantly
      reduce your attack surface, allow you to detect some attacks, and provide other
      security benefits that proper encoding does not address. Ensure that you perform
      input validation at well-defined interfaces within the application. This will
      help protect the application even if a component is reused or moved elsewhere.</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs.</p>

      <p>Operation: Use an application firewall that can detect attacks against this
      weakness. It can be beneficial in cases in which the code cannot be fixed (because
      it is controlled by a third party), as an emergency prevention measure while
      more comprehensive software assurance measures are applied, or to provide defense
      in depth.</p>

      <p>Operation Implementation: When using PHP, configure the application so that
      it does not use register_globals. During implementation, develop the application
      so that it does not rely on this feature, but be wary of implementing a register_globals
      emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar
      issues.</p>'
    title: Improper Neutralization of Input During Web Page Generation ('Cross-site
      Scripting')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product constructs a string for a command to be executed by
      a separate component in another control sphere, but it does not properly delimit
      the intended arguments, options, or switches within that command string.</p><p>When
      creating commands using interpolation into a string, developers may assume that
      only the arguments/options that they specify will be processed. This assumption
      may be even stronger when the programmer has encoded the command in a way that
      prevents separate commands from being provided maliciously, e.g. in the case
      of shell metacharacters. When constructing the command, the developer may use
      whitespace or other delimiters that are required to separate arguments when
      the command. However, if an attacker can provide an untrusted input that contains
      argument-separating delimiters, then the resulting command will have more arguments
      than intended by the developer. The attacker may then be able to change the
      behavior of the command. Depending on the functionality supported by the extraneous
      arguments, this may have security-relevant consequences.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Where possible, avoid building a single string
      that contains the command and its arguments. Some languages or frameworks have
      functions that support specifying independent arguments, e.g. as an array, which
      is used to automatically perform the appropriate quoting or escaping while building
      the command. For example, in PHP, escapeshellarg() can be used to escape a single
      argument to system(), or exec() can be called with an array of arguments. In
      C, code can often be refactored from using system() - which accepts a single
      string - to using exec(), which requires separate function arguments for each
      parameter.</p>

      <p>Architecture and Design: Understand all the potential areas where untrusted
      inputs can enter your product</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Implementation: Directly convert your input type into the expected data type,
      such as using a conversion function that translates a string into a number.
      After converting to the expected data type, ensure that the input''s values
      fall within the expected range of allowable values and that multi-field consistencies
      are maintained.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180, CWE-181). Make
      sure that your application does not inadvertently decode the same input twice
      (CWE-174). Such errors could be used to bypass allowlist schemes by introducing
      dangerous inputs after they have been checked. Use libraries such as the OWASP
      ESAPI Canonicalization control. Consider performing repeated canonicalization
      until your input does not change any more. This will avoid double-decoding and
      similar scenarios, but it might inadvertently modify inputs that are allowed
      to contain properly-encoded dangerous content.</p>

      <p>Implementation: When exchanging data between components, ensure that both
      components are using the same character encoding. Ensure that the proper encoding
      is applied at each interface. Explicitly set the encoding you are using whenever
      the protocol allows you to do so.</p>

      <p>Implementation: When your application combines data from multiple sources,
      perform the validation after the sources have been combined. The individual
      data elements may pass the validation step but violate the intended restrictions
      after they have been combined.</p>'
    title: Improper Neutralization of Argument Delimiters in a Command ('Argument
      Injection')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/88.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product constructs all or part of an SQL command using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended SQL command when
      it is sent to a downstream component.</p><p>Without sufficient removal or quoting
      of SQL syntax in user-controllable inputs, the generated SQL query can cause
      those inputs to be interpreted as SQL instead of ordinary user data. This can
      be used to alter query logic to bypass security checks, or to insert additional
      statements that modify the back-end database, possibly including execution of
      system commands. SQL injection has become a common issue with database-driven
      web sites. The flaw is easily detected, and easily exploited, and as such, any
      site or product package with even a minimal user base is likely to be subject
      to an attempted attack of this kind. This flaw depends on the fact that SQL
      makes no real distinction between the control and data planes.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a vetted library or framework that
      does not allow this weakness to occur or provides constructs that make this
      weakness easier to avoid. For example, consider using persistence layers such
      as Hibernate or Enterprise Java Beans, which can provide significant protection
      against SQL injection if used properly.</p>

      <p>Architecture and Design: If available, use structured mechanisms that automatically
      enforce the separation between data and code. These mechanisms may be able to
      provide the relevant quoting, encoding, and validation automatically, instead
      of relying on the developer to provide this capability at every point where
      output is generated. Process SQL queries using prepared statements, parameterized
      queries, or stored procedures. These features should accept parameters or variables
      and support strong typing. Do not dynamically construct and execute query strings
      within these features using exec or similar functionality, since this may re-introduce
      the possibility of SQL injection. [REF-867]</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.
      Specifically, follow the principle of least privilege when creating user accounts
      to a SQL database. The database users should only have the minimum privileges
      necessary to use their account. If the requirements of the system indicate that
      a user can read and modify their own data, then limit their privileges so they
      cannot read/write others'' data. Use the strictest permissions possible on all
      database objects, such as execute-only for stored procedures.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Implementation: While it is risky to use dynamically-generated query strings,
      code, or commands that mix control and data together, sometimes it may be unavoidable.
      Properly quote arguments and escape any special characters within those arguments.
      The most conservative approach is to escape or filter all characters that do
      not pass an extremely strict allowlist (such as everything that is not alphanumeric
      or white space). If some special characters are still needed, such as white
      space, wrap each argument in quotes after the escaping/filtering step. Be careful
      of argument injection (CWE-88). Instead of building a new implementation, such
      features may be available in the database or programming language. For example,
      the Oracle DBMS_ASSERT package can check or enforce that parameters have certain
      properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string()
      API function is available in both C and PHP.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright. When constructing SQL query strings, use stringent allowlists that
      limit the character set based on the expected value of the parameter in the
      request. This will indirectly limit the scope of an attack, but this technique
      is less important than proper output encoding and escaping. Note that proper
      output encoding, escaping, and quoting is the most effective solution for preventing
      SQL injection, although input validation may provide some defense-in-depth.
      This is because it effectively limits what will appear in output. Input validation
      will not always prevent SQL injection, especially if you are required to support
      free-form text fields that could contain arbitrary characters. For example,
      the name O''Reilly would likely pass the validation step, since it is a common
      last name in the English language. However, it cannot be directly inserted into
      the database because it contains the '' apostrophe character, which would need
      to be escaped or otherwise handled. In this case, stripping the apostrophe might
      reduce the risk of SQL injection, but it would produce incorrect behavior because
      the wrong name would be recorded. When feasible, it may be safest to disallow
      meta-characters entirely, instead of escaping them. This will provide some defense
      in depth. After the data is entered into the database, later processes may neglect
      to escape meta-characters before use, and you may not have control over those
      processes.</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs.</p>

      <p>Implementation: Ensure that error messages only contain minimal details that
      are useful to the intended audience and no one else. The messages need to strike
      the balance between being too cryptic (which can confuse users) or being too
      detailed (which may reveal more than intended). The messages should not reveal
      the methods that were used to determine the error. Attackers can use detailed
      information to refine or optimize their original attack, thereby increasing
      their chances of success. If errors must be captured in some detail, record
      them in log messages, but consider what could occur if the log messages can
      be viewed by attackers. Highly sensitive information such as passwords should
      never be saved to log files. Avoid inconsistent messaging that might accidentally
      tip off an attacker about internal state, such as whether a user account exists
      or not. In the context of SQL Injection, error messages revealing the structure
      of a SQL query can help attackers tailor successful attack strings.</p>

      <p>Operation: Use an application firewall that can detect attacks against this
      weakness. It can be beneficial in cases in which the code cannot be fixed (because
      it is controlled by a third party), as an emergency prevention measure while
      more comprehensive software assurance measures are applied, or to provide defense
      in depth.</p>

      <p>Operation Implementation: When using PHP, configure the application so that
      it does not use register_globals. During implementation, develop the application
      so that it does not rely on this feature, but be wary of implementing a register_globals
      emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar
      issues.</p>'
    title: Improper Neutralization of Special Elements used in an SQL Command ('SQL
      Injection')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/89.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product constructs all or part of an LDAP query using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended LDAP query when
      it is sent to a downstream component.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
      Injection')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/90.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly neutralize special elements that
      are used in XML, allowing attackers to modify the syntax, content, or commands
      of the XML before it is processed by an end system.</p><p>Within XML, special
      elements could include reserved words or characters such as <, >, , and &, which
      could then be used to add new data or modify XML syntax.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: XML Injection (aka Blind XPath Injection)
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/91.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses CRLF (carriage return line feeds) as a special
      element, e.g. to separate lines or records, but it does not neutralize or incorrectly
      neutralizes CRLF sequences from inputs.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Avoid using CRLF as a special sequence.</p>

      <p>Implementation: Appropriately filter or quote CRLF sequences in user-controlled
      input.</p>'
    title: Improper Neutralization of CRLF Sequences ('CRLF Injection')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/93.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product constructs all or part of a code segment using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the syntax or behavior of the
      intended code segment.</p><p>When a product allows a user's input to contain
      code syntax, it might be possible for an attacker to craft the code in such
      a way that it will alter the intended control flow of the product. Such an alteration
      could lead to arbitrary code execution. Injection problems encompass a wide
      variety of issues -- all mitigated in very different ways. For this reason,
      the most effective way to discuss these weaknesses is to note the distinct features
      which classify them as injection weaknesses. The most important issue to note
      is that all injection problems share one thing in common -- i.e., they allow
      for the injection of control plane data into the user-controlled data plane.
      This means that the execution of the process may be altered by sending code
      in through legitimate data channels, using no other mechanism. While buffer
      overflows, and many other flaws, involve the use of some further issue to gain
      execution, injection problems need only for the data to be parsed. The most
      classic instantiations of this category of weakness are SQL injection and format
      string vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Refactor your program so that you do
      not have to dynamically generate code.</p>

      <p>Architecture and Design: Run your code in a jail or similar sandbox environment
      that enforces strict boundaries between the process and the operating system.
      This may effectively restrict which code can be executed by your product. Examples
      include the Unix chroot jail and AppArmor. In general, managed code may provide
      some protection. This may not be a feasible solution, and it only limits the
      impact to the operating system; the rest of your application may still be subject
      to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright. To reduce the likelihood of code injection, use stringent allowlists
      that limit which constructs are allowed. If you are dynamically constructing
      code that invokes a function, then verifying that the input is alphanumeric
      might be insufficient. An attacker might still be able to reference a dangerous
      function that you did not intend to allow, such as system(), exec(), or exit().</p>

      <p>Operation: Run the code in an environment that performs automatic taint propagation
      and prevents any command execution that uses tainted variables, such as Perl''s
      -T switch. This will force the program to perform validation steps that remove
      the taint, although you must be careful to correctly validate your inputs so
      that you do not accidentally mark dangerous inputs as untainted (see CWE-183
      and CWE-184).</p>

      <p>Operation: Run the code in an environment that performs automatic taint propagation
      and prevents any command execution that uses tainted variables, such as Perl''s
      -T switch. This will force the program to perform validation steps that remove
      the taint, although you must be careful to correctly validate your inputs so
      that you do not accidentally mark dangerous inputs as untainted (see CWE-183
      and CWE-184).</p>'
    title: Improper Control of Generation of Code ('Code Injection')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/94.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product accepts XML from an untrusted source but does not
      validate the XML against the proper schema.</p><p>Most successful attacks begin
      with a violation of the programmer's assumptions. By accepting an XML document
      without validating it against a DTD or XML schema, the programmer leaves a door
      open for attackers to provide unexpected, unreasonable, or malicious input.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Always validate XML input against a
      known XML Schema or DTD. It is not possible for an XML parser to validate all
      aspects of a document''s content because a parser cannot understand the complete
      semantics of the data. However, a parser can do a complete and thorough job
      of checking the document''s structure and therefore guarantee to the code that
      processes the document that the content is well-formed.</p>'
    title: Missing XML Validation
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/112.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product misinterprets an input, whether from an attacker or
      another product, in a security-relevant fashion.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Misinterpretation of Input
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/115.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product does not neutralize or incorrectly neutralizes output
      that is written to logs.</p><p>This can allow an attacker to forge log entries
      or inject malicious content into logs. Log forging vulnerabilities occur when:
      Data enters an application from an untrusted source. The data is written to
      an application or system log file.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>

      <p>Implementation: Use and specify an output encoding that can be handled by
      the downstream component that is reading the output. Common encodings include
      ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream
      component may choose a different encoding, either by assuming a default encoding
      or automatically inferring which encoding is being used, which can be erroneous.
      When the encodings are inconsistent, the downstream component might treat some
      character or byte sequences as special, even if they are not special in the
      original encoding. Attackers might then be able to exploit this discrepancy
      and conduct injection attacks; they even might be able to bypass protection
      mechanisms that assume the original encoding is also being used by the downstream
      component.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Output Neutralization for Logs
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/117.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product copies an input buffer to an output buffer without
      verifying that the size of the input buffer is less than the size of the output
      buffer, leading to a buffer overflow.</p><p>A buffer overflow condition exists
      when a product attempts to put more data in a buffer than it can hold, or when
      it attempts to put data in a memory area outside of the boundaries of a buffer.
      The simplest type of error, and the most common cause of buffer overflows, is
      the classic case in which the product copies the buffer without restricting
      how much is copied. Other variants exist, but the existence of a classic overflow
      strongly suggests that the programmer is not considering even the most basic
      of security protections.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a vetted library or framework that
      does not allow this weakness to occur or provides constructs that make this
      weakness easier to avoid. Examples include the Safe C String Library (SafeStr)
      by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56].
      These libraries provide safer versions of overflow-prone string-handling functions.</p>

      <p>Operation Build and Compilation: Use automatic buffer overflow detection
      mechanisms that are offered by certain compilers or compiler extensions. Examples
      include</p>

      <p>Implementation: Consider adhering to the following rules when allocating
      and managing an application''s memory</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Operation Build and Compilation: Run or compile the software using features
      or extensions that randomly arrange the positions of a program''s executable
      and libraries in memory. Because this makes the addresses unpredictable, it
      can prevent an attacker from reliably jumping to exploitable code. Examples
      include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent
      Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their
      default memory addresses conflict with other modules, in a process known as
      rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly
      generated addresses. ASLR for libraries cannot be used in conjunction with prelink
      since it would require relocating the libraries at run-time, defeating the whole
      purpose of prelinking. For more information on these techniques see D3-SAOR
      (Segment Address Offset Randomization) from D3FEND [REF-1335].</p>

      <p>Operation: Use a CPU and operating system that offers Data Execution Protection
      (using hardware NX or XD bits) or the equivalent techniques that simulate this
      feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure
      that any instruction executed is exclusively at a memory address that is part
      of the code segment. For more information on these techniques see D3-PSEP (Process
      Segment Execution Prevention) from D3FEND [REF-1336].</p>

      <p>Build and Compilation Operation: Most mitigating technologies at the compiler
      or OS level to date address only a subset of buffer overflow problems and rarely
      provide complete protection against even that subset. It is good practice to
      implement strategies to increase the workload of an attacker, such as leaving
      the attacker to guess an unknown value that changes every program execution.</p>

      <p>Implementation: Replace unbounded copy functions with analogous functions
      that support length arguments, such as strcpy with strncpy. Create these if
      they are not available.</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>'
    title: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/120.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product writes to a buffer using an index or pointer that
      references a memory location prior to the beginning of the buffer.</p><p>This
      typically occurs when a pointer or its index is decremented to a position before
      the buffer, when pointer arithmetic results in a position before the beginning
      of the valid memory location, or when a negative index is used.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: All calculated values that are used as index
      or for pointer arithmetic should be validated to ensure that they are within
      an expected range.</p>'
    title: Buffer Underwrite ('Buffer Underflow')
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/124.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product reads data past the end, or before the beginning,
      of the intended buffer.</p><p>Typically, this can allow attackers to read sensitive
      information from other memory locations or cause a crash. A crash can occur
      when the code reads a variable amount of data and assumes that a sentinel exists
      to stop the read operation, such as a NUL in a string. The expected sentinel
      might not be located in the out-of-bounds memory, causing excessive data to
      be read, leading to a segmentation fault or a buffer overflow. The product may
      modify an index or perform pointer arithmetic that references a memory location
      that is outside of the boundaries of the buffer. A subsequent read operation
      then produces undefined or unexpected results.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright. To reduce the likelihood
      of introducing an out-of-bounds read, ensure that you validate and ensure correct
      calculations for any length argument, buffer size calculation, or offset. Be
      especially careful of relying on a sentinel (i.e. special character such as
      NUL) in untrusted inputs.</p>

      <p>Architecture and Design: Use a language that provides appropriate memory
      abstractions.</p>'
    title: Out-of-bounds Read
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/125.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Wrap around errors occur whenever a value is incremented past
      the maximum value for its type and therefore wraps around to a very small, negative,
      or undefined value.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Provide clear upper and lower bounds
      on the scale of any protocols designed.</p>

      <p>Implementation: Perform validation on all incremented variables to ensure
      that they remain within reasonable bounds.</p>'
    title: Wrap-around Error
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/128.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product parses a formatted message or structure, but it does
      not handle or incorrectly handles a length field that is inconsistent with the
      actual length of the associated data.</p><p>If an attacker can manipulate the
      length parameter associated with an input such that it is inconsistent with
      the actual length of the input, this can be leveraged to cause the target application
      to behave in unexpected, and possibly, malicious ways. One of the possible motives
      for doing so is to pass in arbitrarily large input to the application. Another
      possible motivation is the modification of application state by including invalid
      data for subsequent properties of the application. Such weaknesses commonly
      lead to attacks such as buffer overflows and execution of arbitrary code.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: When processing structured incoming data containing
      a size field followed by raw data, ensure that you identify and resolve any
      inconsistencies between the size field and the actual size of the data.</p>

      <p>Implementation: Do not let the user control the size of the buffer.</p>

      <p>Implementation: Validate that the length of the user-supplied data is consistent
      with the buffer size.</p>'
    title: Improper Handling of Length Parameter Inconsistency
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/130.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not correctly calculate the size to be used when
      allocating a buffer, which could lead to a buffer overflow.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: When allocating a buffer for the purpose of transforming,
      converting, or encoding an input, allocate enough memory to handle the largest
      possible encoding. For example, in a routine that converts & characters to &amp;
      for HTML entity encoding, the output buffer needs to be at least 5 times as
      large as the input buffer.</p>

      <p>Implementation: Understand the programming language''s underlying representation
      and how it interacts with numeric calculation (CWE-681). Pay close attention
      to byte size discrepancies, precision, signed/unsigned distinctions, truncation,
      conversion and casting between types, not-a-number calculations, and how the
      language handles numbers that are too large or too small for its underlying
      representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other
      potential differences that may affect the numeric representation.</p>

      <p>Implementation: Perform input validation on any numeric input by ensuring
      that it is within the expected range. Enforce that the input meets both the
      minimum and maximum requirements for the expected range.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Implementation: When processing structured incoming data containing a size
      field followed by raw data, identify and resolve any inconsistencies between
      the size field and the actual size of the data (CWE-130).</p>

      <p>Implementation: When allocating memory that uses sentinels to mark the end
      of a data structure - such as NUL bytes in strings - make sure you also include
      the sentinel in your calculation of the total amount of memory that must be
      allocated.</p>

      <p>Implementation: Replace unbounded copy functions with analogous functions
      that support length arguments, such as strcpy with strncpy. Create these if
      they are not available.</p>

      <p>Implementation: Use sizeof() on the appropriate data type to avoid CWE-467.</p>

      <p>Implementation: Use the appropriate type for the desired action. For example,
      in C/C++, only use unsigned types for values that could never be negative, such
      as height, width, or other numbers related to quantity. This will simplify validation
      and will reduce surprises related to unexpected casting.</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. Use libraries or frameworks that make it easier to handle numbers
      without unexpected consequences, or buffer allocation routines that automatically
      track buffer size. Examples include safe integer handling packages such as SafeInt
      (C++) or IntegerLib (C or C++). [REF-106]</p>

      <p>Operation Build and Compilation: Use automatic buffer overflow detection
      mechanisms that are offered by certain compilers or compiler extensions. Examples
      include</p>

      <p>Operation Build and Compilation: Run or compile the software using features
      or extensions that randomly arrange the positions of a program''s executable
      and libraries in memory. Because this makes the addresses unpredictable, it
      can prevent an attacker from reliably jumping to exploitable code. Examples
      include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent
      Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their
      default memory addresses conflict with other modules, in a process known as
      rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly
      generated addresses. ASLR for libraries cannot be used in conjunction with prelink
      since it would require relocating the libraries at run-time, defeating the whole
      purpose of prelinking. For more information on these techniques see D3-SAOR
      (Segment Address Offset Randomization) from D3FEND [REF-1335].</p>

      <p>Operation: Use a CPU and operating system that offers Data Execution Protection
      (using hardware NX or XD bits) or the equivalent techniques that simulate this
      feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure
      that any instruction executed is exclusively at a memory address that is part
      of the code segment. For more information on these techniques see D3-PSEP (Process
      Segment Execution Prevention) from D3FEND [REF-1336].</p>

      <p>Implementation: Examine compiler warnings closely and eliminate problems
      with potential security implications, such as signed / unsigned mismatch in
      memory operations, or use of uninitialized variables. Even if the weakness is
      rarely exploitable, a single failure may lead to the compromise of the entire
      system.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>'
    title: Incorrect Calculation of Buffer Size
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/131.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a function that accepts a format string as an
      argument, but the format string originates from an external source.</p><p>When
      an attacker can modify an externally-controlled format string, this can lead
      to buffer overflows, denial of service, or data representation problems. It
      should be noted that in some circumstances, such as internationalization, the
      set of format strings is externally controlled by design. If the source of these
      format strings is trusted (e.g. only contained in library files that are only
      modifiable by the system administrator), then the external control might not
      itself pose a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that all format string functions are passed
      a static string which cannot be controlled by the user, and that the proper
      number of arguments are always sent to that function as well. If at all possible,
      use functions that do not support the %n operator in format strings. [REF-116]
      [REF-117]</p>

      <p>Build and Compilation: Run compilers and linkers with high warning levels,
      since they may detect incorrect usage.</p>'
    title: Use of Externally-Controlled Format String
    vulnType: String Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/134.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not correctly calculate the length of strings
      that can contain wide or multi-byte characters.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Always verify the length of the string unit character.</p>

      <p>Implementation: Use length computing functions (e.g. strlen, wcslen, etc.)
      appropriately with their equivalent type (e.g.</p>'
    title: Incorrect Calculation of Multi-Byte String Length
    vulnType: String Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/135.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not neutralize or incorrectly neutralizes delimiters.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Developers should anticipate that delimiters
      will be injected/removed/manipulated in the input vectors of their product.
      Use an appropriate combination of denylists and allowlists to ensure only valid,
      expected and appropriate input is processed by the system.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Implementation: While it is risky to use dynamically-generated query strings,
      code, or commands that mix control and data together, sometimes it may be unavoidable.
      Properly quote arguments and escape any special characters within those arguments.
      The most conservative approach is to escape or filter all characters that do
      not pass an extremely strict allowlist (such as everything that is not alphanumeric
      or white space). If some special characters are still needed, such as white
      space, wrap each argument in quotes after the escaping/filtering step. Be careful
      of argument injection (CWE-88).</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Neutralization of Delimiters
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/140.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives input from an upstream component, but it
      does not handle or incorrectly handles when an expected special element is missing.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Handling of Missing Special Element
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/166.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives input from an upstream component, but it
      does not handle or incorrectly handles when an additional unexpected special
      element is provided.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>

      <p>Implementation: While it is risky to use dynamically-generated query strings,
      code, or commands that mix control and data together, sometimes it may be unavoidable.
      Properly quote arguments and escape any special characters within those arguments.
      The most conservative approach is to escape or filter all characters that do
      not pass an extremely strict allowlist (such as everything that is not alphanumeric
      or white space). If some special characters are still needed, such as white
      space, wrap each argument in quotes after the escaping/filtering step. Be careful
      of argument injection (CWE-88).</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Handling of Additional Special Element
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/167.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly handle input in which an inconsistency
      exists between two or more special characters or reserved words.</p><p>An example
      of this problem would be if paired characters appear in the wrong order, or
      if the special characters are not properly nested.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Handling of Inconsistent Special Elements
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/168.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not terminate or incorrectly terminates a string
      or array with a null character or equivalent terminator.</p><p>Null termination
      errors frequently occur in two different ways. An off-by-one error could cause
      a null to be written out of bounds, leading to an overflow. Or, a program could
      use a strncpy() function call incorrectly, which prevents a null terminator
      from being added at all. Other scenarios are possible.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that all string functions used are understood
      fully as to how they append null characters. Also, be wary of off-by-one errors
      when appending nulls to the end of strings.</p>

      <p>Implementation: If performance constraints permit, special code can be added
      that validates null-termination of string buffers, this is a rather naive and
      error-prone solution.</p>

      <p>Implementation: Switch to bounded string manipulation functions. Inspect
      buffer lengths involved in the buffer overrun trace reported with the defect.</p>

      <p>Implementation: Add code that fills buffers with nulls (however, the length
      of buffers still needs to be inspected, to ensure that the non null-terminated
      string is not written at the physical end of the buffer).</p>'
    title: Improper Null Termination
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/170.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product does not properly account for differences in case
      sensitivity when accessing or determining the properties of a resource, leading
      to inconsistent results.</p><p>Improperly handled case sensitive data can lead
      to several possible consequences, including: case-insensitive passwords reducing
      the size of the key space, making brute force attacks easier bypassing filters
      or access controls using alternate names multiple interpretation errors using
      alternate names.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Avoid making decisions based on names
      of resources (e.g. files) if those resources can have alternate names.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Handling of Case Sensitivity
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/178.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product validates input before applying protection mechanisms
      that modify the input, which could allow an attacker to bypass the validation
      via dangerous inputs that only arise after the modification.</p><p>Product needs
      to validate data at the proper time, after data has been canonicalized and cleansed.
      Early validation is susceptible to various manipulations that result in dangerous
      inputs that are produced by canonicalization and cleansing.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Inputs should be decoded and canonicalized to
      the application''s current internal representation before being validated (CWE-180).
      Make sure that the application does not decode the same input twice (CWE-174).
      Such errors could be used to bypass allowlist validation schemes by introducing
      dangerous inputs after they have been checked.</p>'
    title: 'Incorrect Behavior Order: Early Validation'
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/179.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product filters data in a way that causes it to be reduced
      or collapsed into an unsafe value that violates an expected security property.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Avoid making decisions based on names
      of resources (e.g. files) if those resources can have alternate names.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Collapse of Data into Unsafe Value
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/182.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product implements a protection mechanism that relies on a
      list of inputs (or properties of inputs) that are explicitly allowed by policy
      because the inputs are assumed to be safe, but the list is too permissive -
      that is, it allows an input that is unsafe, leading to resultant weaknesses.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Permissive List of Allowed Inputs
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/183.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product implements a protection mechanism that relies on a
      list of inputs (or properties of inputs) that are not allowed by policy or otherwise
      require other action to neutralize before additional processing takes place,
      but the list is incomplete, leading to resultant weaknesses.</p><p>Developers
      often try to protect their products against malicious input by performing tests
      against inputs that are known to be bad, such as special characters that can
      invoke new commands. However, such lists often only account for the most well-known
      bad inputs. Attackers may be able to find other malicious inputs that were not
      expected by the developer, allowing them to bypass the intended protection mechanism.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Do not rely exclusively on detecting disallowed
      inputs. There are too many variants to encode a character, especially when different
      environments are used, so there is a high likelihood of missing some variants.
      Only use detection of disallowed inputs as a mechanism for detecting suspicious
      activity. Ensure that you are using other protection mechanisms that only identify
      good input - such as lists of allowed inputs - and ensure that you are properly
      encoding your outputs.</p>'
    title: Incomplete List of Disallowed Inputs
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/184.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A regular expression is overly restrictive, which prevents dangerous
      values from being detected.</p><p>This weakness is not about regular expression
      complexity. Rather, it is about a regular expression that does not match all
      values that are intended. Consider the use of a regexp to identify acceptable
      values or to spot unwanted terms. An overly restrictive regexp misses some potentially
      security-relevant values leading to either false positives *or* false negatives,
      depending on how the regexp is being used within the code. Consider the expression
      /[0-8]/ where the intention was /[0-9]/. This expression is not complex but
      the value 9 is not matched when maybe the programmer planned to check for it.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Regular expressions can become error prone when
      defining a complex language even for those experienced in writing grammars.
      Determine if several smaller regular expressions simplify one large regular
      expression. Also, subject your regular expression to thorough testing techniques
      such as equivalence partitioning, boundary value analysis, and robustness. After
      testing and a reasonable confidence level is achieved, a regular expression
      may not be foolproof. If an exploit is allowed to slip through, then record
      the exploit and refactor your regular expression.</p>'
    title: Overly Restrictive Regular Expression
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/186.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs a calculation that can produce an integer
      overflow or wraparound, when the logic assumes that the resulting value will
      always be larger than the original value. This can introduce other weaknesses
      when the calculation is used for resource management or execution control.</p><p>An
      integer overflow or wraparound occurs when an integer value is incremented to
      a value that is too large to store in the associated representation. When this
      occurs, the value may wrap to become a very small or negative number. While
      this may be intended behavior in circumstances that rely on wrapping, it can
      have security consequences if the wrap is unexpected. This is especially the
      case if the integer overflow can be triggered using user-supplied inputs. This
      becomes security-critical when the result is used to control looping, make a
      security decision, or determine the offset or size in behaviors such as memory
      allocation, copying, concatenation, etc.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a vetted library or framework that
      does not allow this weakness to occur or provides constructs that make this
      weakness easier to avoid. Use libraries or frameworks that make it easier to
      handle numbers without unexpected consequences. Examples include safe integer
      handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]</p>

      <p>Implementation: Perform input validation on any numeric input by ensuring
      that it is within the expected range. Enforce that the input meets both the
      minimum and maximum requirements for the expected range. Use unsigned integers
      where possible. This makes it easier to perform validation for integer overflows.
      When signed integers are required, ensure that the range check includes minimum
      values as well as maximum values.</p>

      <p>Implementation: Understand the programming language''s underlying representation
      and how it interacts with numeric calculation (CWE-681). Pay close attention
      to byte size discrepancies, precision, signed/unsigned distinctions, truncation,
      conversion and casting between types, not-a-number calculations, and how the
      language handles numbers that are too large or too small for its underlying
      representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other
      potential differences that may affect the numeric representation.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Implementation: Examine compiler warnings closely and eliminate problems
      with potential security implications, such as signed / unsigned mismatch in
      memory operations, or use of uninitialized variables. Even if the weakness is
      rarely exploitable, a single failure may lead to the compromise of the entire
      system.</p>'
    title: Integer Overflow or Wraparound
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/190.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product subtracts one value from another, such that the result
      is less than the minimum allowable integer value, which produces a value that
      is not equal to the correct result.</p><p>This can happen in signed and unsigned
      cases.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Integer Underflow (Wrap or Wraparound)
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/191.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A product calculates or uses an incorrect maximum or minimum value
      that is 1 more, or 1 less, than the correct value.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: When copying character arrays or using character
      manipulation methods, the correct size parameter must be used to account for
      the null terminator that needs to be added at the end of the array. Some examples
      of functions susceptible to this weakness in C include strcpy(), strncpy(),
      strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().</p>'
    title: Off-by-one Error
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/193.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code transmits data to another actor, but a portion of the
      data includes sensitive information that should not be accessible to that actor.</p><p>Sensitive
      information could include data that is sensitive in and of itself (such as credentials
      or private messages), or otherwise useful in the further exploitation of the
      system (such as internal file system structure).</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that any possibly sensitive data specified
      in the requirements is verified with designers to ensure that it is either a
      calculated risk or mitigated elsewhere. Any information that is not necessary
      to the functionality should be removed in order to lower both the overhead and
      the possibility of security sensitive data being sent.</p>

      <p>System Configuration: Setup default error messages so that unexpected errors
      do not disclose sensitive information.</p>

      <p>Architecture and Design: Compartmentalize the system to have safe areas where
      trust boundaries can be unambiguously drawn. Do not allow sensitive data to
      go outside of the trust boundary and always be careful when interfacing with
      a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>'
    title: Insertion of Sensitive Information Into Sent Data
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/201.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product provides different responses to incoming requests
      in a way that reveals internal state information to an unauthorized actor outside
      of the intended control sphere.</p><p>This issue frequently occurs during authentication,
      where a difference in failed-login messages could allow an attacker to determine
      if the username is valid or not. These exposures can be inadvertent (bug) or
      intentional (design).</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Compartmentalize the system to have
      safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive
      data to go outside of the trust boundary and always be careful when interfacing
      with a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>

      <p>Implementation: Ensure that error messages only contain minimal details that
      are useful to the intended audience and no one else. The messages need to strike
      the balance between being too cryptic (which can confuse users) or being too
      detailed (which may reveal more than intended). The messages should not reveal
      the methods that were used to determine the error. Attackers can use detailed
      information to refine or optimize their original attack, thereby increasing
      their chances of success. If errors must be captured in some detail, record
      them in log messages, but consider what could occur if the log messages can
      be viewed by attackers. Highly sensitive information such as passwords should
      never be saved to log files. Avoid inconsistent messaging that might accidentally
      tip off an attacker about internal state, such as whether a user account exists
      or not.</p>'
    title: Observable Response Discrepancy
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/204.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's behaviors indicate important differences that may
      be observed by unauthorized actors in a way that reveals (1) its internal state
      or decision process, or (2) differences from other products with equivalent
      functionality.</p><p>Ideally, a product should provide as little information
      about its internal operations as possible. Otherwise, attackers could use knowledge
      of these internal operations to simplify or optimize their attack. In some cases,
      behavioral discrepancies can be used by attackers to form a side channel.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Observable Behavioral Discrepancy
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/205.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Two separate operations in a product require different amounts
      of time to complete, in a way that is observable to an actor and reveals security-relevant
      information about the state of the product, such as whether a particular operation
      was successful or not.</p><p>In security-relevant contexts, even small variations
      in timing can be exploited by attackers to indirectly infer certain details
      about the product's internal operations. For example, in some cryptographic
      algorithms, attackers can use timing differences to infer certain properties
      about a private key, making the key easier to guess. Timing discrepancies effectively
      form a timing side channel.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Observable Timing Discrepancy
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/208.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product generates an error message that includes sensitive
      information about its environment, users, or associated data.</p><p>The sensitive
      information may be valuable information on its own (such as a password), or
      it may be useful for launching other, more serious attacks. The error message
      may be created in different ways: self-generated: the source code explicitly
      constructs the error message and delivers it externally-generated: the external
      environment, such as a language interpreter, handles the error and constructs
      its own message, whose contents are not under direct control by the programmer
      An attacker may use the contents of error messages to help launch another, more
      focused attack. For example, an attempt to exploit a path traversal weakness
      (CWE-22) might yield the full pathname of the installed application. In turn,
      this could be used to select the proper number of .. sequences to navigate to
      the targeted file. An attack using SQL injection (CWE-89) might not initially
      succeed, but an error message could reveal the malformed query, which would
      expose query logic and possibly even passwords or other sensitive information
      used within the query.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that error messages only contain minimal
      details that are useful to the intended audience and no one else. The messages
      need to strike the balance between being too cryptic (which can confuse users)
      or being too detailed (which may reveal more than intended). The messages should
      not reveal the methods that were used to determine the error. Attackers can
      use detailed information to refine or optimize their original attack, thereby
      increasing their chances of success. If errors must be captured in some detail,
      record them in log messages, but consider what could occur if the log messages
      can be viewed by attackers. Highly sensitive information such as passwords should
      never be saved to log files. Avoid inconsistent messaging that might accidentally
      tip off an attacker about internal state, such as whether a user account exists
      or not.</p>

      <p>Implementation: Handle exceptions internally and do not display errors containing
      potentially sensitive information to a user.</p>

      <p>Implementation: Use naming conventions and strong types to make it easier
      to spot when sensitive data is being used. When creating structures, objects,
      or other complex entities, separate the sensitive and non-sensitive data as
      much as possible.</p>

      <p>Implementation Build and Compilation: Debugging information should not make
      its way into a production release.</p>

      <p>Implementation Build and Compilation: Debugging information should not make
      its way into a production release.</p>

      <p>System Configuration: Where available, configure the environment to use less
      verbose error messages. For example, in PHP, disable the display_errors setting
      during configuration, or at runtime using the error_reporting() function.</p>

      <p>System Configuration: Create default error pages or messages that do not
      leak any information.</p>'
    title: Generation of Error Message Containing Sensitive Information
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/209.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product stores, transfers, or shares a resource that contains
      sensitive information, but it does not properly remove that information before
      the product makes the resource available to unauthorized actors.</p><p>Resources
      that may contain sensitive data include documents, packets, messages, databases,
      etc. While this data may be useful to an individual user or small set of users
      who share the resource, it may need to be removed before the resource can be
      shared outside of the trusted group. The process of removal is sometimes called
      cleansing or scrubbing. For example, a product for editing documents might not
      remove sensitive data such as reviewer comments or the local pathname where
      the document is stored. Or, a proxy might not remove an internal IP address
      from headers before making an outgoing request to an Internet site.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Compartmentalize the system to have
      safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive
      data to go outside of the trust boundary and always be careful when interfacing
      with a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>

      <p>Implementation: Use naming conventions and strong types to make it easier
      to spot when sensitive data is being used. When creating structures, objects,
      or other complex entities, separate the sensitive and non-sensitive data as
      much as possible.</p>

      <p>Implementation: Avoid errors related to improper resource shutdown or release
      (CWE-404), which may leave the sensitive data within the resource if it is in
      an incomplete state.</p>'
    title: Improper Removal of Sensitive Information Before Storage or Transfer
    vulnType: Initialization and Cleanup Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/212.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's intended functionality exposes information to certain
      actors in accordance with the developer's security policy, but this information
      is regarded as sensitive according to the intended security policies of other
      stakeholders such as the product's administrator, users, or others whose information
      is being processed.</p><p>When handling information, the developer must consider
      whether the information is regarded as sensitive by different stakeholders,
      such as users or administrators. Each stakeholder effectively has its own intended
      security policy that the product is expected to uphold. When a developer does
      not treat that information as sensitive, this can introduce a vulnerability
      that violates the expectations of the product's users.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Exposure of Sensitive Information Due to Incompatible Policies
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/213.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A process is invoked with sensitive command-line arguments, environment
      variables, or other elements that can be seen by other processes on the operating
      system.</p><p>Many operating systems allow a user to list information about
      processes that are owned by other users. Other users could see information such
      as command line arguments or environment variable settings. When this data contains
      sensitive information such as credentials, it might allow other users to launch
      an attack against the product or related resources.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invocation of Process Using Visible Sensitive Information
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/214.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product inserts sensitive information into debugging code,
      which could expose this information if the debugging code is not disabled in
      production.</p><p>When debugging, it may be necessary to report detailed information
      to the programmer. However, if the debugging code is not disabled when the product
      is operating in a production environment, then this sensitive information may
      be exposed to attackers.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Do not leave debug statements that could be executed
      in the source code. Ensure that all debug information is eradicated before releasing
      the software.</p>

      <p>Architecture and Design: Compartmentalize the system to have safe areas where
      trust boundaries can be unambiguously drawn. Do not allow sensitive data to
      go outside of the trust boundary and always be careful when interfacing with
      a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>'
    title: Insertion of Sensitive Information Into Debugging Code
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/215.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product truncates the display, recording, or processing of
      security-relevant information in a way that can obscure the source or nature
      of an attack.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Truncation of Security-relevant Information
    vulnType: Audit / Logging Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/222.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not record or display information that would
      be important for identifying the source or nature of an attack, or determining
      if an action is safe.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Omission of Security-relevant Information
    vulnType: Audit / Logging Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/223.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product records security-relevant information according to
      an alternate name of the affected entity, instead of the canonical name.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Obscured Security-relevant Information by Alternate Name
    vulnType: Audit / Logging Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/224.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly handle when the expected number
      of values for parameters, fields, or arguments is not provided in input, or
      if those values are undefined.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Handling of Values
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/229.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly handle when the expected number
      of parameters, fields, or arguments is not provided in input, or if those parameters
      are undefined.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Handling of Parameters
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/233.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not handle or incorrectly handles inputs that
      are related to complex structures.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Handling of Structural Elements
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/237.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not handle or incorrectly handles when a particular
      element is not the expected type, e.g. it expects a digit (0-9) but is provided
      with a letter (A-Z).</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Improper Handling of Unexpected Data Type
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/241.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product calls a function that can never be guaranteed to work
      safely.</p><p>Certain functions behave in dangerous ways regardless of how they
      are used. Functions in this category were often implemented without taking security
      concerns into account. The gets() function is unsafe because it does not perform
      bounds checking on the size of its input. An attacker can easily send arbitrarily-sized
      input to gets() and overflow the destination buffer. Similarly, the >> operator
      is unsafe to use when reading into a statically-allocated character array because
      it does not perform bounds checking on the size of its input. An attacker can
      easily send arbitrarily-sized input to the >> operator and overflow the destination
      buffer.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation Requirements: Ban the use of dangerous functions.
      Use their safe equivalent.</p>'
    title: Use of Inherently Dangerous Function
    vulnType: API / Function Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/242.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses the chroot() system call to create a jail, but
      does not change the working directory afterward. This does not prevent access
      to files outside of the jail.</p><p>Improper use of chroot() may allow attackers
      to escape from the chroot jail. The chroot() function call does not change the
      process's current working directory, so relative paths may still refer to file
      system resources outside of the chroot jail after chroot() has been called.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Creation of chroot Jail Without Changing Working Directory
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/243.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>An exception is thrown from a function, but it is not caught.</p><p>When
      an exception is not caught, it may cause the program to crash or expose sensitive
      information.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Uncaught Exception
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/248.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs an operation at a privilege level that is
      higher than the minimum level required, which creates new weaknesses or amplifies
      the consequences of other weaknesses.</p><p>New weaknesses can be exposed because
      running with extra privileges, such as root or Administrator, can disable the
      normal security checks being performed by the operating system or surrounding
      environment. Other pre-existing weaknesses can turn into security vulnerabilities
      if they occur while operating at raised privileges. Privilege management functions
      can behave in some less-than-obvious ways, and they have different quirks on
      different platforms. These inconsistencies are particularly pronounced if you
      are transitioning from one non-root user to another. Signal handlers and spawned
      processes run at the privilege of the owning process, so if a process is running
      as root when a signal fires or a sub-process is executed, the signal handler
      or sub-process will operate with root privileges.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Run your code using the lowest
      privileges that are required to accomplish the necessary tasks [REF-76]. If
      possible, create isolated accounts with limited privileges that are only used
      for a single task. That way, a successful attack will not immediately give the
      attacker access to the rest of the software or its environment. For example,
      database applications rarely need to run as the database administrator, especially
      in day-to-day operations.</p>

      <p>Architecture and Design: Identify the functionality that requires additional
      privileges, such as access to privileged operating system resources. Wrap and
      centralize this functionality if possible, and isolate the privileged code as
      much as possible from other code [REF-76]. Raise privileges as late as possible,
      and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as
      CWE-288 and CWE-420 by protecting all possible communication channels that could
      interact with the privileged code, such as a secondary socket that is only intended
      to be accessed by administrators.</p>

      <p>Architecture and Design: Identify the functionality that requires additional
      privileges, such as access to privileged operating system resources. Wrap and
      centralize this functionality if possible, and isolate the privileged code as
      much as possible from other code [REF-76]. Raise privileges as late as possible,
      and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as
      CWE-288 and CWE-420 by protecting all possible communication channels that could
      interact with the privileged code, such as a secondary socket that is only intended
      to be accessed by administrators.</p>

      <p>Implementation: Perform extensive input validation for any privileged code
      that must be exposed to the user and reject anything that does not fit your
      strict requirements.</p>

      <p>Implementation: When dropping privileges, ensure that they have been dropped
      successfully to avoid CWE-273. As protection mechanisms in the environment get
      stronger, privilege-dropping calls may fail even if it seems like they would
      always succeed.</p>

      <p>Implementation: If circumstances force you to run with extra privileges,
      then determine the minimum access level necessary. First identify the different
      permissions that the software and its users will need to perform their actions,
      such as file read and write permissions, network socket permissions, and so
      forth. Then explicitly allow those actions while denying all else [REF-76].
      Perform extensive input validation and canonicalization to minimize the chances
      of introducing a separate vulnerability. This mitigation is much more prone
      to error than dropping the privileges in the first place.</p>

      <p>Operation System Configuration: Ensure that the software runs properly under
      the United States Government Configuration Baseline (USGCB) [REF-199] or an
      equivalent hardening configuration guide, which many organizations use to limit
      the attack surface and potential risk of deployed software.</p>'
    title: Execution with Unnecessary Privileges
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/250.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not check the return value from a method or function,
      which can prevent it from detecting unexpected states and conditions.</p><p>Two
      common programmer assumptions are this function call can never fail and it doesn't
      matter if this function call fails. If an attacker can force the function to
      fail or otherwise return a value that is not expected, then the subsequent program
      logic could lead to a vulnerability, because the product is not in a state that
      the programmer assumes. For example, if the program calls a function to drop
      privileges but does not check the return code to ensure that privileges were
      successfully dropped, then the program will continue to operate with the higher
      privileges.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Check the results of all functions that return
      a value and verify that the value is expected.</p>

      <p>Implementation: Ensure that you account for all possible return values from
      the function.</p>

      <p>Implementation: When designing a function, make sure you return a value or
      throw an exception in case of an error.</p>'
    title: Unchecked Return Value
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/252.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product incorrectly checks a return value from a function,
      which prevents it from detecting errors or exceptional conditions.</p><p>Important
      and common functions will return some value about the success of its actions.
      This will alert the program whether or not to handle any errors caused by that
      function.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a language or compiler that uses
      exceptions and requires the catching of those exceptions.</p>

      <p>Implementation: Properly check all functions which return a value.</p>

      <p>Implementation: When designing any function make sure you return a value
      or throw an exception in case of an error.</p>'
    title: Incorrect Check of Function Return Value
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/253.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Storing a password in plaintext may result in a system compromise.</p><p>Password
      management issues occur when a password is stored in plaintext in an application's
      properties, configuration file, or memory. Storing a plaintext password in a
      configuration file allows anyone who can read the file access to the password-protected
      resource. In some contexts, even storage of a plaintext password in memory is
      considered a security risk if the password is not cleared immediately after
      it is used.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Avoid storing passwords in easily accessible
      locations.</p>

      <p>Architecture and Design: Consider storing cryptographic hashes of passwords
      as an alternative to storing in plaintext.</p>'
    title: Plaintext Storage of a Password
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/256.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The storage of passwords in a recoverable format makes them subject
      to password reuse attacks by malicious users. In fact, it should be noted that
      recoverable encrypted passwords provide no significant benefit over plaintext
      passwords since they are subject not only to reuse by malicious attackers but
      also by malicious insiders. If a system administrator can recover a password
      directly, or use a brute force search on the available information, the administrator
      can use the password on other accounts.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use strong, non-reversible encryption
      to protect stored passwords.</p>'
    title: Storing Passwords in a Recoverable Format
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/257.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product stores a password in a configuration file that might
      be accessible to actors who do not know the password.</p><p>This can result
      in compromise of the system for which the password is used. An attacker could
      gain access to this file and learn the stored password or worse yet, change
      the password to one of their choosing.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Avoid storing passwords in easily accessible
      locations.</p>

      <p>Architecture and Design: Consider storing cryptographic hashes of passwords
      as an alternative to storing in plaintext.</p>'
    title: Password in Configuration File
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/260.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Obscuring a password with a trivial encoding does not protect
      the password.</p><p>Password management issues occur when a password is stored
      in plaintext in an application's properties or configuration file. A programmer
      can attempt to remedy the password management problem by obscuring the password
      with an encoding function, such as base 64 encoding, but this effort does not
      adequately protect the password.</p>
    locale: en-US
    observation: null
    remediation: ''
    title: Weak Encoding for Password
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/261.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not have a mechanism in place for managing password
      aging.</p><p>Password aging (or password rotation) is a policy that forces users
      to change their passwords after a defined time period passes, such as every
      30 or 90 days. Without mechanisms such as aging, users might not change their
      passwords in a timely manner. Note that while password aging was once considered
      an important security feature, it has since fallen out of favor by many, because
      it is not as effective against modern threats compared to other mechanisms such
      as slow hashes. In addition, forcing frequent changes can unintentionally encourage
      users to select less-secure passwords. However, password aging is still in use
      due to factors such as compliance requirements, e.g., Payment Card Industry
      Data Security Standard (PCI DSS).</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: As part of a product''s design, require
      users to change their passwords regularly and avoid reusing previous passwords.</p>

      <p>Implementation: Developers might disable clipboard paste operations into
      password fields as a way to discourage users from pasting a password into a
      clipboard. However, this might encourage users to choose less-secure passwords
      that are easier to type, and it can reduce the usability of password managers
      [REF-1294].</p>'
    title: Not Using Password Aging
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/262.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product supports password aging, but the expiration period
      is too long.</p><p>Password aging (or password rotation) is a policy that forces
      users to change their passwords after a defined time period passes, such as
      every 30 or 90 days. A long expiration provides more time for attackers to conduct
      password cracking before users are forced to change to a new password. Note
      that while password aging was once considered an important security feature,
      it has since fallen out of favor by many, because it is not as effective against
      modern threats compared to other mechanisms such as slow hashes. In addition,
      forcing frequent changes can unintentionally encourage users to select less-secure
      passwords. However, password aging is still in use due to factors such as compliance
      requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Ensure that password aging is limited
      so that there is a defined maximum age for passwords. Note that if the expiration
      window is too short, it can cause users to generate poor or predictable passwords.</p>

      <p>Architecture and Design: Ensure that the user is notified several times leading
      up to the password expiration.</p>

      <p>Architecture and Design: Create mechanisms to prevent users from reusing
      passwords or creating similar passwords.</p>

      <p>Implementation: Developers might disable clipboard paste operations into
      password fields as a way to discourage users from pasting a password into a
      clipboard. However, this might encourage users to choose less-secure passwords
      that are easier to type, and it can reduce the usability of password managers
      [REF-1294].</p>'
    title: Password Aging with Long Expiration
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/263.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A product incorrectly assigns a privilege to a particular actor,
      creating an unintended sphere of control for that actor.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>'
    title: Incorrect Privilege Assignment
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/266.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A particular privilege, role, capability, or right can be used
      to perform unsafe actions that were not intended, even when it is assigned to
      the correct entity.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>'
    title: Privilege Defined With Unsafe Actions
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/267.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Two distinct privileges, roles, capabilities, or rights can be
      combined in a way that allows an entity to perform unsafe actions that would
      not be allowed without that combination.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Consider following the principle of
      separation of privilege. Require multiple conditions to be met before permitting
      access to a system resource.</p>

      <p>Architecture and Design Operation: Very carefully manage the setting, management,
      and handling of privileges. Explicitly manage trust zones in the software.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>'
    title: Privilege Chaining
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/268.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly manage privileges while it is switching
      between different contexts that have different privileges or spheres of control.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Architecture and Design: Consider following the principle of separation of
      privilege. Require multiple conditions to be met before permitting access to
      a system resource.</p>'
    title: Privilege Context Switching Error
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/270.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The elevated privilege level required to perform operations such
      as chroot() should be dropped immediately after the operation is performed.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design: Follow the principle of least privilege when assigning
      access rights to entities in a software system.</p>

      <p>Architecture and Design: Compartmentalize the system to have safe areas where
      trust boundaries can be unambiguously drawn. Do not allow sensitive data to
      go outside of the trust boundary and always be careful when interfacing with
      a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>'
    title: Least Privilege Violation
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/272.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product attempts to drop privileges but does not check or
      incorrectly checks to see if the drop succeeded.</p><p>If the drop fails, the
      product will continue to run with the raised privileges, which might provide
      additional access to unprivileged users.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Compartmentalize the system to have
      safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive
      data to go outside of the trust boundary and always be careful when interfacing
      with a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>

      <p>Implementation: Check the results of all functions that return a value and
      verify that the value is expected.</p>

      <p>Implementation: In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft
      Server 2003). Code that relies on impersonation for security must ensure that
      the impersonation succeeded, i.e., that a proper privilege demotion happened.</p>'
    title: Improper Check for Dropped Privileges
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/273.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not handle or incorrectly handles when it has
      insufficient privileges to perform an operation, leading to resultant weaknesses.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Handling of Insufficient Privileges
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/274.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>During installation, installed file permissions are set to allow
      anyone to modify those files.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: The architecture needs to
      access and modification attributes for files to only those users who actually
      require those actions.</p>

      <p>Architecture and Design: Compartmentalize the system to have safe areas where
      trust boundaries can be unambiguously drawn. Do not allow sensitive data to
      go outside of the trust boundary and always be careful when interfacing with
      a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>'
    title: Incorrect Default Permissions
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/276.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A product defines a set of insecure permissions that are inherited
      by objects that are created by the program.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design: Compartmentalize the system to have safe areas where
      trust boundaries can be unambiguously drawn. Do not allow sensitive data to
      go outside of the trust boundary and always be careful when interfacing with
      a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>'
    title: Insecure Inherited Permissions
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/277.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A product inherits a set of insecure permissions for an object,
      e.g. when copying from an archive file, without user awareness or involvement.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design: Compartmentalize the system to have safe areas where
      trust boundaries can be unambiguously drawn. Do not allow sensitive data to
      go outside of the trust boundary and always be careful when interfacing with
      a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>'
    title: Insecure Preserved Inherited Permissions
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/278.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>While it is executing, the product sets the permissions of an
      object in a way that violates the intended permissions that have been specified
      by the user.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design: Compartmentalize the system to have safe areas where
      trust boundaries can be unambiguously drawn. Do not allow sensitive data to
      go outside of the trust boundary and always be careful when interfacing with
      a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>'
    title: Incorrect Execution-Assigned Permissions
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/279.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not handle or incorrectly handles when it has
      insufficient privileges to access resources or functionality as specified by
      their permissions. This may cause it to follow unexpected code paths that may
      leave the product in an invalid state.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Compartmentalize the system to have
      safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive
      data to go outside of the trust boundary and always be careful when interfacing
      with a compartment outside of the safe area. Ensure that appropriate compartmentalization
      is built into the system design, and the compartmentalization allows for and
      reinforces privilege separation functionality. Architects and designers should
      rely on the principle of least privilege to decide the appropriate time to use
      privileges and the time to drop privileges.</p>

      <p>Implementation: Always check to see if you have successfully accessed a resource
      or system functionality, and use proper error handling if it is unsuccessful.
      Do this even when you are operating in a highly privileged mode, because errors
      or environmental conditions might still cause a failure. For example, environments
      with highly granular permissions/privilege models, such as Windows or Linux
      capabilities, can cause unexpected failures.</p>'
    title: 'Improper Handling of Insufficient Permissions or Privileges '
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/280.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not preserve permissions or incorrectly preserves
      permissions when copying, restoring, or sharing objects, which can cause them
      to have less restrictive permissions than intended.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Preservation of Permissions
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/281.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly verify that a critical resource
      is owned by the proper entity.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Very carefully manage the
      setting, management, and handling of privileges. Explicitly manage trust zones
      in the software.</p>

      <p>Architecture and Design: Consider following the principle of separation of
      privilege. Require multiple conditions to be met before permitting access to
      a system resource.</p>'
    title: Unverified Ownership
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/283.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs authentication based on the name of a resource
      being accessed, or the name of the actor performing the access, but it does
      not properly check all possible names for that resource or actor.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Avoid making decisions based on names
      of resources (e.g. files) if those resources can have alternate names.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Authentication Bypass by Alternate Name
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/289.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>This attack-focused weakness is caused by incorrectly implemented
      authentication schemes that are subject to spoofing attacks.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Authentication Bypass by Spoofing
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/290.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A capture-replay flaw exists when the design of the product makes
      it possible for a malicious user to sniff network traffic and bypass authentication
      by replaying it to the server in question to the same effect as the original
      message (or with minor changes).</p><p>Capture-replay attacks are common and
      can be difficult to defeat without cryptography. They are a subset of network
      injection attacks that rely on observing previously-sent valid commands, then
      changing them slightly if necessary and resending the same commands to the server.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Utilize some sequence or time stamping
      functionality along with a checksum which takes this into account in order to
      ensure that messages can be parsed only once.</p>

      <p>Architecture and Design: Since any attacker who can listen to traffic can
      see sequence numbers, it is necessary to sign messages with some kind of cryptography
      to ensure that sequence numbers are not simply doctored along with content.</p>'
    title: Authentication Bypass by Capture-replay
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/294.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not validate, or incorrectly validates, a certificate.</p><p>When
      a certificate is invalid or malicious, it might allow an attacker to spoof a
      trusted entity by interfering in the communication path between the host and
      client. The product might connect to a malicious host while believing it is
      a trusted host, or the product might be deceived into accepting spoofed data
      that appears to originate from a trusted host.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Certificates should be
      carefully managed and checked to assure that data are encrypted with the intended
      owner''s public key.</p>

      <p>Implementation: If certificate pinning is being used, ensure that all relevant
      properties of the certificate are fully validated before the certificate is
      pinned, including the hostname.</p>'
    title: Improper Certificate Validation
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/295.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Simple authentication protocols are subject to reflection attacks
      if a malicious user can use the target machine to impersonate a trusted user.</p><p>A
      mutual authentication protocol requires each party to respond to a random challenge
      by the other party by encrypting it with a pre-shared key. Often, however, such
      protocols employ the same pre-shared key for communication with a number of
      different entities. A malicious user or an attacker can easily compromise this
      protocol without possessing the correct key by employing a reflection attack
      on the protocol. Reflection attacks capitalize on mutual authentication schemes
      in order to trick the target into revealing the secret shared between it and
      another valid user. In a basic mutual-authentication scheme, a secret is known
      to both the valid user and the server; this allows them to authenticate. In
      order that they may verify this shared secret without sending it plainly over
      the wire, they utilize a Diffie-Hellman-style scheme in which they each pick
      a value, then request the hash of that value as keyed by the shared secret.
      In a reflection attack, the attacker claims to be a valid user and requests
      the hash of a random value from the server. When the server returns this value
      and requests its own value to be hashed, the attacker opens another connection
      to the server. This time, the hash requested by the attacker is the value which
      the server requested in the first connection. When the server returns this hashed
      value, it is used in the first connection, authenticating the attacker successfully
      as the impersonated valid user.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use different keys for the initiator
      and responder or of a different type of challenge for the initiator and responder.</p>

      <p>Architecture and Design: Let the initiator prove its identity before proceeding.</p>'
    title: Reflection Attack in an Authentication Protocol
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/301.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The requirements for the product dictate the use of an established
      authentication algorithm, but the implementation of the algorithm is incorrect.</p><p>This
      incorrect implementation may allow authentication to be bypassed.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Incorrect Implementation of Authentication Algorithm
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/303.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The authentication algorithm is sound, but the implemented mechanism
      can be bypassed as the result of a separate weakness that is primary to the
      authentication error.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Authentication Bypass by Primary Weakness
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/305.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not perform any authentication for functionality
      that requires a provable user identity or consumes a significant amount of resources.</p><p>As
      data is migrated to the cloud, if access does not require authentication, it
      can be easier for attackers to access the data from anywhere on the Internet.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Divide the software into anonymous,
      normal, privileged, and administrative areas. Identify which of these areas
      require a proven user identity, and use a centralized authentication capability.
      Identify all potential communication channels, or other means of interaction
      with the software, to ensure that all channels are appropriately protected.
      Developers sometimes perform authentication at the primary channel, but open
      up a secondary channel that is assumed to be private. For example, a login mechanism
      may be listening on one network port, but after successful authentication, it
      may open up a second port where it waits for the connection, but avoids authentication
      because it assumes that only the authenticated party will connect to the port.
      In general, if the software or protocol allows a single session or user state
      to persist across multiple connections or channels, authentication and appropriate
      credential management need to be used throughout.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Architecture and Design: Where possible, avoid implementing custom authentication
      routines and consider using authentication capabilities as provided by the surrounding
      framework, operating system, or environment. These may make it easier to provide
      a clear separation between authentication tasks and authorization tasks. In
      environments such as the World Wide Web, the line between authentication and
      authorization is sometimes blurred. If custom authentication routines are required
      instead of those provided by the server, then these routines must be applied
      to every single page, since these pages could be requested directly.</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. For example, consider using libraries with authentication capabilities
      such as OpenSSL or the ESAPI Authenticator [REF-45].</p>

      <p>Implementation System Configuration Operation: When storing data in the cloud
      (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider''s
      controls to require strong authentication for users who should be allowed to
      access the data [REF-1297] [REF-1298] [REF-1302].</p>'
    title: Missing Authentication for Critical Function
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/306.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not implement sufficient measures to prevent
      multiple failed authentication attempts within a short time frame, making it
      more susceptible to brute force attacks.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Common protection mechanisms include</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. Consider using libraries with authentication capabilities such
      as OpenSSL or the ESAPI Authenticator. [REF-45]</p>'
    title: Improper Restriction of Excessive Authentication Attempts
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/307.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The use of single-factor authentication can lead to unnecessary
      risk of compromise when compared with the benefits of a dual-factor authentication
      scheme.</p><p>While the use of multiple authentication schemes is simply piling
      on more complexity on top of authentication, it is inestimably valuable to have
      such measures of redundancy. The use of weak, reused, and common passwords is
      rampant on the internet. Without the added protection of multiple authentication
      schemes, a single mistake can result in the compromise of an account. For this
      reason, if multiple schemes are possible and also easy to use, they should be
      implemented and required.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use multiple independent authentication
      schemes, which ensures that -- if one of the methods is compromised -- the system
      itself is still likely safe from compromise.</p>'
    title: Use of Single-factor Authentication
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/308.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The use of password systems as the primary means of authentication
      may be subject to several flaws or shortcomings, each reducing the effectiveness
      of the mechanism.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: In order to protect password systems
      from compromise, the following should be noted</p>

      <p>Architecture and Design: Use a zero-knowledge password protocol, such as
      SRP.</p>

      <p>Architecture and Design: Ensure that passwords are stored safely and are
      not reversible.</p>

      <p>Architecture and Design: Implement password aging functionality that requires
      passwords be changed after a certain point.</p>

      <p>Architecture and Design: Use a mechanism for determining the strength of
      a password and notify the user of weak password use.</p>

      <p>Architecture and Design: Inform the user of why password protections are
      in place, how they work to protect data integrity, and why it is important to
      heed their warnings.</p>'
    title: Use of Password System for Primary Authentication
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/309.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product stores sensitive information in cleartext within a
      resource that might be accessible to another control sphere.</p><p>Because the
      information is stored in cleartext (i.e., unencrypted), attackers could potentially
      read it. Even if the information is encoded in a way that is not human-readable,
      certain techniques could determine which encoding is being used, then decode
      the information. When organizations adopt cloud services, it can be easier for
      attackers to access the data from anywhere on the Internet. In some systems/environments
      such as cloud, the use of double encryption (at both the software and hardware
      layer) might be required, and the developer might be solely responsible for
      both layers, instead of shared responsibility with the administrator of the
      broader system/environment.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation System Configuration Operation: When storing data
      in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use
      the provider''s controls to encrypt the data at rest. [REF-1297] [REF-1299]
      [REF-1301]</p>'
    title: Cleartext Storage of Sensitive Information
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/312.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product transmits sensitive or security-critical data in cleartext
      in a communication channel that can be sniffed by unauthorized actors.</p><p>Many
      communication channels can be sniffed (monitored) by adversaries during data
      transmission. For example, in networking, packets can traverse many intermediary
      nodes from the source to the destination, whether across the internet, an internal
      network, the cloud, etc. Some actors might have privileged access to a network
      interface or any link along the channel, such as a router, but they might not
      be authorized to collect the underlying data. As a result, network traffic could
      be sniffed by adversaries, spilling security-critical data. Applicable communication
      channels are not limited to software products. Applicable channels include hardware-specific
      technologies such as internal hardware networks and external debug channels,
      supporting remote JTAG debugging. When mitigations are not applied to combat
      adversaries within the product's threat model, this weakness significantly lowers
      the difficulty of exploitation by such adversaries. When full communications
      are recorded or logged, such as with a packet dump, an adversary could attempt
      to obtain the dump long after the transmission has occurred and try to sniff
      the cleartext from the recorded communications in the dump itself. Even if the
      information is encoded in a way that is not human-readable, certain techniques
      could determine which encoding is being used, then decode the information.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Before transmitting, encrypt the data
      using reliable, confidentiality-protecting cryptographic protocols.</p>

      <p>Implementation: When using web applications with SSL, use SSL for the entire
      session from login to logout, not just for the initial login page.</p>

      <p>Implementation: When designing hardware platforms, ensure that approved encryption
      algorithms (such as those recommended by NIST) protect paths from security critical
      data to trusted user applications.</p>

      <p>Operation: Configure servers to use encrypted channels for communication,
      which may include SSL or other secure protocols.</p>'
    title: Cleartext Transmission of Sensitive Information
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/319.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs a key exchange with an actor without verifying
      the identity of that actor.</p><p>Performing a key exchange will preserve the
      integrity of the information sent between two entities, but this will not guarantee
      that the entities are who they claim they are. This may enable an attacker to
      impersonate an actor by modifying traffic between the two entities. Typically,
      this involves a victim client that contacts a malicious server that is impersonating
      a trusted server. If the client skips authentication or ignores an authentication
      failure, the malicious server may request authentication information from the
      user. The malicious server can then use this authentication information to log
      in to the trusted server using the victim's credentials, sniff traffic between
      the victim and trusted server, etc.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Ensure that proper authentication is
      included in the system design.</p>

      <p>Implementation: Understand and properly implement all checks necessary to
      ensure the identity of entities involved in encrypted communications.</p>'
    title: Key Exchange without Entity Authentication
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/322.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Nonces should be used for the present occasion and only once.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Refuse to reuse nonce values.</p>

      <p>Implementation: Use techniques such as requiring incrementing, time based
      and/or challenge response to assure uniqueness of nonces.</p>'
    title: Reusing a Nonce, Key Pair in Encryption
    vulnType: Key Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/323.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a cryptographic key or password past its expiration
      date, which diminishes its safety significantly by increasing the timing window
      for cracking attacks against that key.</p><p>While the expiration of keys does
      not necessarily ensure that they are compromised, it is a significant concern
      that keys which remain in use for prolonged periods of time have a decreasing
      probability of integrity. For this reason, it is important to replace keys within
      a period of time proportional to their strength.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Adequate consideration should be put
      in to the user interface in order to notify users previous to the key''s expiration,
      to explain the importance of new key generation and to walk users through the
      process as painlessly as possible.</p>'
    title: Use of a Key Past its Expiration Date
    vulnType: Key Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/324.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not implement a required step in a cryptographic
      algorithm, resulting in weaker encryption than advertised by the algorithm.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Missing Cryptographic Step
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/325.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product uses an algorithm that produces a digest (output
      value) that does not meet security expectations for a hash function that allows
      an adversary to reasonably determine the original input (preimage attack), find
      another input that can produce the same hash (2nd preimage attack), or find
      multiple inputs that evaluate to the same hash (birthday attack).</p><p>A hash
      function is defined as an algorithm that maps arbitrarily sized data into a
      fixed-sized digest (output) such that the following properties hold: 1. The
      algorithm is not invertible (also called one-way or not reversible) 2. The algorithm
      is deterministic; the same input produces the same digest every time Building
      on this definition, a cryptographic hash function must also ensure that a malicious
      actor cannot leverage the hash function to have a reasonable chance of success
      at determining any of the following: 1. the original input (preimage attack),
      given only the digest 2. another input that can produce the same digest (2nd
      preimage attack), given the original input 3. a set of two or more inputs that
      evaluate to the same digest (birthday attack), given the actor can arbitrarily
      choose the inputs to be hashed and can do so a reasonable amount of times What
      is regarded as reasonable varies by context and threat model, but in general,
      reasonable could cover any attack that is more efficient than brute force (i.e.,
      on average, attempting half of all possible combinations). Note that some attacks
      might be more efficient than brute force but are still not regarded as achievable
      in the real world. Any algorithm does not meet the above conditions will generally
      be considered weak for general use in hashing. In addition to algorithmic weaknesses,
      a hash function can be made weak by using the hash in a security context that
      breaks its security guarantees. For example, using a hash function without a
      salt for storing passwords (that are sufficiently short) could enable an adversary
      to create a rainbow table [REF-637] to recover the password under certain conditions;
      this attack works against such hash functions as MD5, SHA-1, and SHA-2.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use an adaptive hash function that can
      be configured to change the amount of computational effort needed to compute
      the hash, such as the number of iterations (stretching) or the amount of memory
      required. Some hash functions perform salting automatically. These functions
      can significantly increase the overhead for a brute force attack compared to
      intentionally-fast functions such as MD5. For example, rainbow table attacks
      can become infeasible due to the high computing overhead. Finally, since computing
      power gets faster and cheaper over time, the technique can be reconfigured to
      increase the workload without forcing an entire replacement of the algorithm
      in use. Some hash functions that have one or more of these desired properties
      include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there
      is active debate about which of these is the most effective, they are all stronger
      than using salts with hash functions with very little computing overhead. Note
      that using these functions can have an impact on performance, so they require
      special consideration to avoid denial-of-service attacks. However, their configurability
      provides finer control over how much CPU and memory is used, so it could be
      adjusted to suit the environment''s needs.</p>'
    title: Use of Weak Hash
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/328.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses an algorithm or scheme that produces insufficient
      entropy, leaving patterns or clusters of values that are more likely to occur
      than others.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Determine the necessary entropy to adequately
      provide for randomness and predictability. This can be achieved by increasing
      the number of bits of objects such as keys and seeds.</p>'
    title: Insufficient Entropy
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/331.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The number of possible random values is smaller than needed by
      the product, making it more susceptible to brute force attacks.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Requirements: Use products or modules
      that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult
      FIPS 140-2 Annex C (Approved Random Number Generators).</p>'
    title: Small Space of Random Values
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/334.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product uses a Pseudo-Random Number Generator (PRNG) but
      does not correctly manage seeds.</p><p>PRNGs are deterministic and, while their
      output appears random, they cannot actually create entropy. They rely on cryptographically
      secure and unique seeds for entropy so proper seeding is critical to the secure
      operation of the PRNG. Management of seeds could be broken down into two main
      areas: (1) protecting seeds as cryptographic material (such as a cryptographic
      key); (2) whenever possible, using a uniquely generated seed from a cryptographically
      secure source PRNGs require a seed as input to generate a stream of numbers
      that are functionally indistinguishable from random numbers. While the output
      is, in many cases, sufficient for cryptographic uses, the output of any PRNG
      is directly determined by the seed provided as input. If the seed can be ascertained
      by a third party, the entire output of the PRNG can be made known to them. As
      such, the seed should be kept secret and should ideally not be able to be guessed.
      For example, the current time may be a poor seed. Knowing the approximate time
      the PRNG was seeded greatly reduces the possible key space. Seeds do not necessarily
      need to be unique, but reusing seeds may open up attacks if the seed is discovered.</p>'
    locale: en-US
    observation: null
    remediation: null
    title: Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/335.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a Pseudo-Random Number Generator (PRNG) in a
      security context, but the PRNG's algorithm is not cryptographically strong.</p><p>When
      a non-cryptographic PRNG is used in a cryptographic context, it can expose the
      cryptography to certain types of attacks. Often a pseudo-random number generator
      (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness
      is sufficient or preferable for algorithms that use random numbers. Weak generators
      generally take less processing power and/or do not use the precious, finite,
      entropy sources on a system. While such PRNGs might have very useful features,
      these same features could be used to break the cryptography.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Use functions or hardware which use a hardware-based
      random number generation for all crypto. This is the recommended solution. Use
      CyptGenRandom on Windows, or hw_rand() on Linux.</p>'
    title: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/338.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A number or object is predictable based on observations that the
      attacker can make about the state of the system or network, such as time, process
      ID, etc.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Increase the entropy used to seed a PRNG.</p>

      <p>Architecture and Design Requirements: Use products or modules that conform
      to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2
      Annex C (Approved Random Number Generators).</p>

      <p>Implementation: Use a PRNG that periodically re-seeds itself using input
      from high-quality sources, such as hardware devices with high entropy. However,
      do not re-seed too frequently, or else the entropy source might block.</p>'
    title: Predictable from Observable State
    vulnType: Random Number Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/341.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>An exact value or random number can be precisely predicted by
      observing previous values.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Requirements: Use products or modules
      that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult
      FIPS 140-2 Annex C (Approved Random Number Generators).</p>

      <p>Implementation: Use a PRNG that periodically re-seeds itself using input
      from high-quality sources, such as hardware devices with high entropy. However,
      do not re-seed too frequently, or else the entropy source might block.</p>'
    title: Predictable Exact Value from Previous Values
    vulnType: Random Number Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/342.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's random number generator produces a series of values
      which, when observed, can be used to infer a relatively small range of possibilities
      for the next value that could be generated.</p><p>The output of a random number
      generator should not be predictable based on observations of previous values.
      In some cases, an attacker cannot predict the exact value that will be produced
      next, but can narrow down the possibilities significantly. This reduces the
      amount of effort to perform a brute force attack. For example, suppose the product
      generates random numbers between 1 and 100, but it always produces a larger
      value until it reaches 100. If the generator produces an 80, then the attacker
      knows that the next value will be somewhere between 81 and 100. Instead of 100
      possibilities, the attacker only needs to consider 20.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Requirements: Use products or modules
      that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult
      FIPS 140-2 Annex C (Approved Random Number Generators).</p>

      <p>Implementation: Use a PRNG that periodically re-seeds itself using input
      from high-quality sources, such as hardware devices with high entropy. However,
      do not re-seed too frequently, or else the entropy source might block.</p>'
    title: Predictable Value Range from Previous Values
    vulnType: Random Number Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/343.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a constant value, name, or reference, but this
      value can (or should) vary across different environments.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Invariant Value in Dynamically Changing Context
    vulnType: Random Number Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/344.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly verify that the source of data or
      communication is valid.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Origin Validation Error
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/346.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not verify, or incorrectly verifies, the cryptographic
      signature for data.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Verification of Cryptographic Signature
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/347.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product has two different sources of the same data or information,
      but it uses the source that has less support for verification, is less trusted,
      or is less resistant to attack.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Less Trusted Source
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/348.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product, when processing trusted data, accepts any untrusted
      data that is also included with the trusted data, treating the untrusted data
      as if it were trusted.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Acceptance of Extraneous Untrusted Data With Trusted Data
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/349.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly distinguish between different types
      of elements in a way that leads to insecure behavior.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Insufficient Type Distinction
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/351.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a transmission protocol that does not include
      a mechanism for verifying the integrity of the data during transmission, such
      as a checksum.</p><p>If integrity check values or checksums are omitted from
      a protocol, there is no way of determining if data has been corrupted in transmission.
      The lack of checksum functionality in a protocol removes the first application-level
      check of data that can be used. The end-to-end philosophy of checks states that
      integrity checks should be performed at the lowest level that they can be completely
      implemented. Excluding further sanity checks and input validation performed
      by applications, the protocol's checksum is the most important level of checksum,
      since it can be performed more completely than at any previous level and takes
      into account entire messages, as opposed to single packets.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Add an appropriately sized checksum
      to the protocol, ensuring that data received may be simply validated before
      it is parsed and used.</p>

      <p>Implementation: Ensure that the checksums present in the protocol design
      are properly implemented and added to each message before it is sent.</p>'
    title: Missing Support for Integrity Check
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/353.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not validate or incorrectly validates the integrity
      check values or checksums of a message. This may prevent it from detecting if
      the data has been modified or corrupted in transmission.</p><p>Improper validation
      of checksums before use results in an unnecessary risk that can easily be mitigated.
      The protocol specification describes the algorithm used for calculating the
      checksum. It is then a simple matter of implementing the calculation and verifying
      that the calculated checksum and the received checksum match. Improper verification
      of the calculated checksum and the received checksum can lead to far greater
      consequences.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that the checksums present in messages
      are properly checked in accordance with the protocol specification before they
      are parsed and used.</p>'
    title: Improper Validation of Integrity Check Value
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/354.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's user interface does not warn the user before undertaking
      an unsafe action on behalf of that user. This makes it easier for attackers
      to trick users into inflicting damage to their system.</p><p>Product systems
      should warn users that a potentially dangerous action may occur if the user
      proceeds. For example, if the user downloads a file from an unknown source and
      attempts to execute the file on their machine, then the application's GUI can
      indicate that the file is unsafe.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Product UI does not Warn User of Unsafe Actions
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/356.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The user interface provides a warning to a user regarding dangerous
      or sensitive operations, but the warning is not noticeable enough to warrant
      attention.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Insufficient UI Warning of Dangerous Operations
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/357.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not implement or incorrectly implements one or
      more security-relevant checks as specified by the design of a standardized algorithm,
      protocol, or technique.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Improperly Implemented Security Check for Standard
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/358.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product does not properly prevent a person''s private, personal
      information from being accessed by actors who either (1) are not explicitly
      authorized to access the information or (2) do not have the implicit consent
      of the person about whom the information is collected.</p><p>There are many
      types of sensitive information that products must protect from attackers, including
      system data, communications, configuration, business secrets, intellectual property,
      and an individual''s personal (private) information. Private personal information
      may include a password, phone number, geographic location, personal messages,
      credit card number, etc. Private information is important to consider whether
      the person is a user of the product, or part of a data set that is processed
      by the product. An exposure of private information does not necessarily prevent
      the product from working properly, and in fact the exposure might be intended
      by the developer, e.g. as part of data sharing with other organizations. However,
      the exposure of personal private information can still be undesirable or explicitly
      prohibited by law or regulation. Some types of private information include:
      Government identifiers, such as Social Security Numbers Contact information,
      such as home addresses and telephone numbers Geographic location - where the
      user is (or was) Employment history Financial data - such as credit card numbers,
      salary, bank accounts, and debts Pictures, video, or audio Behavioral patterns
      - such as web surfing history, when certain activities are performed, etc. Relationships
      (and types of relationships) with others - family, friends, contacts, etc. Communications
      - e-mail addresses, private messages, text messages, chat logs, etc. Health
      - medical conditions, insurance status, prescription records Account passwords
      and other credentials Some of this information may be characterized as PII (Personally
      Identifiable Information), Protected Health Information (PHI), etc. Categories
      of private information may overlap or vary based on the intended usage or the
      policies and practices of a particular industry. Sometimes data that is not
      labeled as private can have a privacy implication in a different context. For
      example, student identification numbers are usually not considered private because
      there is no explicit and publicly-available mapping to an individual student''s
      personal information. However, if a school generates identification numbers
      based on student social security numbers, then the identification numbers should
      be considered private.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Carefully evaluate how secure design
      may interfere with privacy, and vice versa. Security and privacy concerns often
      seem to compete with each other. From a security perspective, all important
      operations should be recorded so that any anomalous activity can later be identified.
      However, when private data is involved, this practice can in fact create risk.
      Although there are many ways in which private data can be handled unsafely,
      a common risk stems from misplaced trust. Programmers often trust the operating
      environment in which a program runs, and therefore believe that it is acceptable
      store private information on the file system, in the registry, or in other locally-controlled
      resources. However, even if access to certain resources is restricted, this
      does not guarantee that the individuals who do have access can be trusted.</p>'
    title: Exposure of Private Personal Information to an Unauthorized Actor
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/359.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Security based on event locations are insecure and can be spoofed.</p><p>Events
      are a messaging system which may provide control data to programs listening
      for events. Events often do not have any type of authentication framework to
      allow them to be verified from a trusted source. Any application, in Windows,
      on a given desktop can send a message to any window on the same desktop. There
      is no authentication framework for these messages. Therefore, any message can
      be used to manipulate any process on the desktop if the process does not check
      the validity and safeness of those messages.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Never trust or rely any of the information
      in an Event for security.</p>'
    title: Trust of System Event Data
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/360.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product uses a signal handler that introduces a race condition.</p><p>Race
      conditions frequently occur in signal handlers, since signal handlers support
      asynchronous actions. These race conditions have a variety of root causes and
      symptoms. Attackers may be able to exploit a signal handler race condition to
      cause the product state to be corrupted, possibly leading to a denial of service
      or even code execution. These issues occur when non-reentrant functions, or
      state-sensitive actions occur in the signal handler, where they may be called
      at any time. These behaviors can violate assumptions being made by the regular
      code that is interrupted, or by other signal handlers that may also be invoked.
      If these functions are called at an inopportune moment - such as while a non-reentrant
      function is already running - memory corruption could occur that may be exploitable
      for code execution. Another signal race condition commonly found occurs when
      free is called within a signal handler, resulting in a double free and therefore
      a write-what-where condition. Even if a given pointer is set to NULL after it
      has been freed, a race condition still exists between the time the memory was
      freed and the pointer was set to NULL. This is especially problematic if the
      same signal handler has been set for more than one signal -- since it means
      that the signal handler itself may be reentered. There are several known behaviors
      related to signal handlers that have received the label of signal handler race
      condition: Shared state (e.g. global data or static variables) that are accessible
      to both a signal handler and regular code Shared state between a signal handler
      and other signal handlers Use of non-reentrant functionality within a signal
      handler - which generally implies that shared state is being used. For example,
      malloc() and free() are non-reentrant because they may use global or static
      data structures for managing memory, and they are indirectly used by innocent-seeming
      functions such as syslog(); these functions could be exploited for memory corruption
      and, possibly, code execution. Association of the same signal handler function
      with multiple signals - which might imply shared state, since the same code
      and resources are accessed. For example, this can be a source of double-free
      and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms
      that prevent a signal handler from returning control back to the original functionality
      While not technically a race condition, some signal handlers are designed to
      be called at most once, and being called more than once can introduce security
      problems, even when there are not any concurrent calls to the signal handler.
      This can be a source of double-free and use-after-free weaknesses. Signal handler
      vulnerabilities are often classified based on the absence of a specific protection
      mechanism, although this style of classification is discouraged in CWE because
      programmers often have a choice of several different mechanisms for addressing
      the weakness. Such protection mechanisms may preserve exclusivity of access
      to the shared resource, and behavioral atomicity for the relevant code: Avoiding
      shared state Using synchronization in the signal handler Using synchronization
      in the regular code Disabling or masking other signals, which provides atomicity
      (which effectively ensures exclusivity)</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Design signal handlers to only set flags,
      rather than perform complex functionality. These flags can then be checked and
      acted upon within the main program loop.</p>

      <p>Implementation: Only use reentrant functions within signal handlers. Also,
      use validation to ensure that state is consistent while performing asynchronous
      actions that affect the state of execution.</p>'
    title: Signal Handler Race Condition
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/364.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>If two threads of execution use a resource simultaneously, there
      exists the possibility that resources may be used while invalid, in turn making
      the state of execution undefined.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use locking functionality. This is the
      recommended solution. Implement some form of locking mechanism around code which
      alters or reads persistent data in a multithreaded environment.</p>

      <p>Architecture and Design: Create resource-locking validation checks. If no
      inherent locking mechanisms exist, use flags and signals to enforce your own
      blocking scheme when resources are being used by other threads of execution.</p>'
    title: Race Condition within a Thread
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/366.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product checks the state of a resource before using that resource,
      but the resource's state can change between the check and the use in a way that
      invalidates the results of the check. This can cause the product to perform
      invalid actions when the resource is in an unexpected state.</p><p>This weakness
      can be security-relevant when an attacker can influence the state of the resource
      between check and use. This can happen with shared resources such as files,
      memory, or even variables in multithreaded programs.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: The most basic advice for TOCTOU vulnerabilities
      is to not perform a check before the use. This does not resolve the underlying
      issue of the execution of a function on a resource whose state and identity
      cannot be assured, but it does help to limit the false sense of security given
      by the check.</p>

      <p>Implementation: When the file being altered is owned by the current user
      and group, set the effective gid and uid to that of the current user and group
      when executing this statement.</p>

      <p>Architecture and Design: Limit the interleaving of operations on files from
      multiple processes.</p>

      <p>Implementation Architecture and Design: If you cannot perform operations
      atomically and you must share access to the resource between multiple processes
      or threads, then try to limit the amount of time (CPU cycles) between the check
      and use of the resource. This will not fix the problem, but it could make it
      more difficult for an attack to succeed.</p>

      <p>Implementation: Recheck the resource after the use call to verify that the
      action was taken appropriately.</p>

      <p>Architecture and Design: Ensure that some environmental locking mechanism
      can be used to protect resources effectively.</p>

      <p>Implementation: Ensure that locking occurs before the check, as opposed to
      afterwards, such that the resource, as checked, is the same as it is when in
      use.</p>'
    title: Time-of-check Time-of-use (TOCTOU) Race Condition
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/367.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A product performs a series of non-atomic actions to switch between
      contexts that cross privilege or other security boundaries, but a race condition
      allows an attacker to modify or misrepresent the product's behavior during the
      switch.</p><p>This is commonly seen in web browser vulnerabilities in which
      the attacker can perform certain actions while the browser is transitioning
      from a trusted to an untrusted domain, or vice versa, and the browser performs
      the actions on one domain using the trust level and resources of the other domain.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Context Switching Race Condition
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/368.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product divides a value by zero.</p><p>This weakness typically
      occurs when an unexpected value is provided to the product, or if an error occurs
      that is not properly detected. It frequently occurs in calculations involving
      physical dimensions such as size, length, width, and height.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Divide By Zero
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/369.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly determine which state it is in,
      causing it to assume it is in state X when in fact it is in state Y, causing
      it to perform incorrect operations in a security-relevant manner.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Incomplete Internal State Distinction
    vulnType: State Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/372.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product sends non-cloned mutable data as an argument to a
      method or function.</p><p>The function or method that has been called can alter
      or delete the mutable data. This could violate assumptions that the calling
      function has made about its state. In situations where unknown code is called
      with references to mutable data, this external code could make changes to the
      data sent. If this data was not previously cloned, the modified data might not
      be valid in the context of execution.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Pass in data which should not be altered as constant
      or immutable.</p>

      <p>Implementation: Clone all mutable data before passing it into an external
      function . This is the preferred mitigation. This way, regardless of what changes
      are made to the data, a valid copy is retained for use by the class.</p>'
    title: Passing Mutable Objects to an Untrusted Method
    vulnType: State Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/374.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Sending non-cloned mutable data as a return value may result in
      that data being altered or deleted by the calling function.</p><p>In situations
      where functions return references to mutable data, it is possible that the external
      code which called the function may make changes to the data sent. If this data
      was not previously cloned, the class will then be using modified data which
      may violate assumptions about its internal state.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Declare returned data which should not be altered
      as constant or immutable.</p>

      <p>Implementation: Clone all mutable data before returning references to it.
      This is the preferred mitigation. This way, regardless of what changes are made
      to the data, a valid copy is retained for use by the class.</p>'
    title: Returning a Mutable Object to an Untrusted Caller
    vulnType: State Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/375.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Opening temporary files without appropriate measures or controls
      can leave the file, its contents and any function that it impacts vulnerable
      to attack.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that you use proper file permissions.
      This can be achieved by using a safe temp file function. Temporary files should
      be writable and readable only by the process that owns the file.</p>

      <p>Implementation: Randomize temporary file names. This can also be achieved
      by using a safe temp-file function. This will ensure that temporary files will
      not be created in predictable places.</p>'
    title: Creation of Temporary File With Insecure Permissions
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/378.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product creates a temporary file in a directory whose permissions
      allow unintended actors to determine the file's existence or otherwise access
      that file.</p><p>On some operating systems, the fact that the temporary file
      exists may be apparent to any user with sufficient privileges to access that
      directory. Since the file is visible, the application that is using the temporary
      file could be known. If one has access to list the processes on the system,
      the attacker has gained information about what the user is doing at that time.
      By correlating this with the applications the user is running, an attacker could
      potentially discover what a user's actions are. From this, higher levels of
      security could be breached.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Try to store sensitive tempfiles in a directory
      which is not world readable -- i.e., per-user directories.</p>

      <p>Implementation: Avoid using vulnerable temp file functions.</p>'
    title: Creation of Temporary File in Directory with Insecure Permissions
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/379.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Covert timing channels convey information by modulating some aspect
      of system behavior over time, so that the program receiving the information
      can observe system behavior and infer protected information.</p><p>In some instances,
      knowing when data is transmitted between parties can provide a malicious user
      with privileged information. Also, externally monitoring the timing of operations
      can potentially reveal sensitive data. For example, a cryptographic operation
      can expose its internal state if the time it takes to perform the operation
      varies, based on the state. Covert channels are frequently classified as either
      storage or timing channels. Some examples of covert timing channels are the
      system's paging rate, the time a certain transaction requires to execute, and
      the time it takes to gain access to a shared bus.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Whenever possible, specify implementation
      strategies that do not introduce time variances in operations.</p>

      <p>Implementation: Often one can artificially manipulate the time which operations
      take or -- when operations occur -- can remove information from the attacker.</p>

      <p>Implementation: It is reasonable to add artificial or random delays so that
      the amount of CPU time consumed is independent of the action being taken by
      the application.</p>'
    title: Covert Timing Channel
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/385.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A constant symbolic reference to an object is used, even though
      the reference can resolve to a different object over time.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Symbolic Name not Mapping to Correct Object
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/386.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product detects a specific error, but takes no actions to
      handle the error.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Properly handle each exception. This is the recommended
      solution. Ensure that all exceptions are handled in such a way that you can
      be sure of the state of your system at any given moment.</p>

      <p>Implementation: If a function returns an error, it is important to either
      fix the problem and try again, alert the user that an error has happened and
      let the program continue, or alert the user and close and cleanup the program.</p>'
    title: Detection of Error Condition Without Action
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/390.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252,
      CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow
      an attacker to induce unexpected behavior unnoticed.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Catch all relevant exceptions. This is the recommended
      solution. Ensure that all exceptions are handled in such a way that you can
      be sure of the state of your system at any given moment.</p>'
    title: Unchecked Error Condition
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/391.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product encounters an error but does not provide a status
      code or return value to indicate that an error has occurred.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Missing Report of Error Condition
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/392.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A function or operation returns an incorrect return value or status
      code that does not indicate an error, but causes the product to modify its behavior
      based on the incorrect result.</p><p>This can lead to unpredictable behavior.
      If the function is used to make security-critical decisions or provide security-critical
      information, then the wrong status code can cause the product to assume that
      an action is safe, even when it is not.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Return of Wrong Status Code
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/393.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly check when a function or operation
      returns a value that is legitimate for the function, but is not expected by
      the product.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Unexpected Status Code or Return Value
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/394.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>Catching NullPointerException should not be used as an alternative
      to programmatic checks to prevent dereferencing a null pointer.</p><p>Programmers
      typically catch NullPointerException under three circumstances: The program
      contains a null pointer dereference. Catching the resulting exception was easier
      than fixing the underlying problem. The program explicitly throws a NullPointerException
      to signal an error condition. The code is part of a test harness that supplies
      unexpected input to the classes under test. Of these three circumstances, only
      the last is acceptable.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Do not extensively rely
      on catching exceptions (especially for validating user input) to handle errors.
      Handling exceptions can decrease the performance of an application.</p>'
    title: Use of NullPointerException Catch to Detect NULL Pointer Dereference
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/395.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Catching overly broad exceptions promotes complex error handling
      code that is more likely to contain security vulnerabilities.</p><p>Multiple
      catch blocks can get ugly and repetitive, but condensing catch blocks by catching
      a high-level class like Exception can obscure exceptions that deserve special
      treatment or that should not be caught at this point in the program. Catching
      an overly broad exception essentially defeats the purpose of a language's typed
      exceptions, and can become particularly dangerous if the program grows and begins
      to throw new types of exceptions. The new exception types will not receive any
      attention.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Declaration of Catch for Generic Exception
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/396.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Throwing overly broad exceptions promotes complex error handling
      code that is more likely to contain security vulnerabilities.</p><p>Declaring
      a method to throw Exception or Throwable makes it difficult for callers to perform
      proper error handling and error recovery. Java's exception mechanism, for example,
      is set up to make it easy for callers to anticipate what can go wrong and write
      code to handle each specific exceptional circumstance. Declaring that a method
      throws a generic form of exception defeats this system.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Declaration of Throws for Generic Exception
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/397.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A process does not close sensitive file descriptors before invoking
      a child process, which allows the child to perform unauthorized I/O operations
      using those descriptors.</p><p>When a new process is forked or executed, the
      child process inherits any open file descriptors. When the child process has
      fewer privileges than the parent process, this might introduce a vulnerability
      if the child process can access the file descriptor but does not have the privileges
      to access the associated file.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor
      Leak')
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/403.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product allows an entity to perform a legitimate but expensive
      operation before authentication or authorization has taken place.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: 'Incorrect Behavior Order: Early Amplification'
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/408.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not handle or incorrectly handles a compressed
      input with a very high compression ratio that produces a large output.</p><p>An
      example of data amplification is a decompression bomb, a small ZIP file that
      can produce a large amount of data when it is decompressed.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Handling of Highly Compressed Data (Data Amplification)
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/409.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's resource pool is not large enough to handle peak
      demand, which allows an attacker to prevent others from accessing the resource
      by using a (relatively) large number of requests for resources.</p><p>Frequently
      the consequence is a flood of connection or sessions.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Do not perform resource-intensive transactions
      for unauthenticated users and/or invalid requests.</p>

      <p>Architecture and Design: Consider implementing a velocity check mechanism
      which would detect abusive behavior.</p>

      <p>Operation: Consider load balancing as an option to handle heavy loads.</p>

      <p>Implementation: Make sure that resource handles are properly closed when
      no longer needed.</p>

      <p>Architecture and Design: Identify the system''s resource intensive operations
      and consider protecting them from abuse (e.g. malicious automated script which
      runs the resources out).</p>'
    title: Insufficient Resource Pool
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/410.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product properly checks for the existence of a lock, but the
      lock can be externally controlled or influenced by an actor that is outside
      of the intended sphere of control.</p><p>This prevents the product from acting
      on associated resources or performing other behaviors that are controlled by
      the presence of the lock. Relevant locks might include an exclusive lock or
      mutex, or modifying a shared resource that is treated as a lock. If the lock
      can be held for an indefinite period of time, then the denial of service could
      be permanent.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Use any access control
      that is offered by the functionality that is offering the lock.</p>

      <p>Architecture and Design Implementation: Use unpredictable names or identifiers
      for the locks. This might not always be possible or feasible.</p>

      <p>Architecture and Design: Consider modifying your code to use non-blocking
      synchronization methods.</p>'
    title: Unrestricted Externally Accessible Lock
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/412.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not lock or does not correctly lock a resource
      when the product must have exclusive access to the resource.</p><p>When a resource
      is not properly locked, an attacker could modify the resource while it is being
      operated on by the product. This might violate the product's assumption that
      the resource will not change, potentially leading to unexpected behaviors.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a non-conflicting privilege scheme.</p>

      <p>Architecture and Design Implementation: Use synchronization when locking
      a resource.</p>'
    title: Improper Resource Locking
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/413.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A product does not check to see if a lock is present before performing
      sensitive operations on a resource.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Implement a reliable
      lock mechanism.</p>'
    title: Missing Lock Check
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/414.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a primary channel for administration or restricted
      functionality, but it does not properly protect the channel.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Do not expose administrative functionnality
      on the user UI.</p>

      <p>Architecture and Design: Protect the administrative/restricted functionality
      with a strong authentication mechanism.</p>'
    title: Unprotected Primary Channel
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/419.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product protects a primary channel, but it does not use the
      same level of protection for an alternate channel.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Identify all alternate channels and
      use the same protection mechanisms that are used for the primary channels.</p>'
    title: Unprotected Alternate Channel
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/420.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product opens an alternate channel to communicate with an
      authorized user, but the channel is accessible to other actors.</p><p>This creates
      a race condition that allows an attacker to access the channel before the authorized
      user does.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Race Condition During Access to Alternate Channel
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/421.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The web application does not adequately enforce appropriate authorization
      on all restricted URLs, scripts, or files.</p><p>Web applications susceptible
      to direct request attacks often make the false assumption that such resources
      can only be reached through a given navigation path and so only apply authorization
      at certain points in the path.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation: Apply appropriate access control
      authorizations for each access to all restricted URLs, scripts or files.</p>

      <p>Architecture and Design: Consider using MVC based frameworks such as Struts.</p>'
    title: Direct Request ('Forced Browsing')
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/425.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product searches for critical resources using an externally-supplied
      search path that can point to resources that are not under the product''s direct
      control.</p><p>This might allow attackers to execute their own programs, access
      unauthorized data files, or modify configuration in unexpected ways. If the
      product uses a search path to locate critical resources such as programs, then
      an attacker could modify that search path to point to a malicious program, which
      the targeted product would then execute. The problem extends to any type of
      critical resource that the product trusts. Some of the most common variants
      of untrusted search path are: In various UNIX and Linux-based systems, the PATH
      environment variable may be consulted to locate executable programs, and LD_PRELOAD
      may be used to locate a separate library. In various Microsoft-based systems,
      the PATH environment variable is consulted to locate a DLL, if the DLL is not
      found in other paths that appear earlier in the search order.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Hard-code the search
      path to a set of known-safe values (such as system directories), or only allow
      them to be specified by the administrator in a configuration file. Do not allow
      these settings to be modified by an external party. Be careful to avoid related
      weaknesses such as CWE-426 and CWE-428.</p>

      <p>Implementation: When invoking other programs, specify those programs using
      fully-qualified pathnames. While this is an effective approach, code that uses
      fully-qualified pathnames might not be portable to other systems that do not
      use the same pathnames. The portability can be improved by locating the full-qualified
      paths in a centralized, easily-modifiable location within the source code, and
      having the code refer to these paths.</p>

      <p>Implementation: Remove or restrict all environment settings before invoking
      other programs. This includes the PATH environment variable, LD_LIBRARY_PATH,
      and other settings that identify the location of code libraries, and any application-specific
      search paths.</p>

      <p>Implementation: Check your search path before use and remove any elements
      that are likely to be unsafe, such as the current working directory or a temporary
      files directory.</p>

      <p>Implementation: Use other functions that require explicit paths. Making use
      of any of the other readily available functions that require explicit paths
      is a safe way to avoid this problem. For example, system() in C does not require
      a full path since the shell can take care of it, while execl() and execv() require
      a full path.</p>'
    title: Untrusted Search Path
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/426.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product uses a fixed or controlled search path to find resources,
      but one or more locations in that path can be under the control of unintended
      actors.</p><p>Although this weakness can occur with any type of resource, it
      is frequently introduced when a product uses a directory search path to find
      executables or code libraries, but the path contains a directory that can be
      modified by an attacker, such as /tmp or the current working directory. In Windows-based
      systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL
      name that does not contain a fully qualified path, the function follows a search
      order that includes two path elements that might be uncontrolled: the directory
      from which the program has been loaded the current working directory In some
      cases, the attack can be conducted remotely, such as when SMB or WebDAV network
      shares are used. One or more locations in that path could include the Windows
      drive root or its subdirectories. This often exists in Linux-based code assuming
      the controlled nature of the root directory (/) or its subdirectories (/etc,
      etc), or a code that recursively accesses the parent directory. In Windows,
      the drive root and some of its subdirectories have weak permissions by default,
      which makes them uncontrolled. In some Unix-based systems, a PATH might be created
      that contains an empty element, e.g. by splicing an empty variable into the
      PATH. This empty element can be interpreted as equivalent to the current working
      directory, which might be an untrusted search element. In software package management
      frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies
      on third-party libraries or other packages, then consult a repository that contains
      the desired package. The framework may search a public repository before a private
      repository. This could be exploited by attackers by placing a malicious package
      in the public repository that has the same name as a package from the private
      repository. The search path might not be directly under control of the developer
      relying on the framework, but this search order effectively contains an untrusted
      element.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Hard-code the search
      path to a set of known-safe values (such as system directories), or only allow
      them to be specified by the administrator in a configuration file. Do not allow
      these settings to be modified by an external party. Be careful to avoid related
      weaknesses such as CWE-426 and CWE-428.</p>

      <p>Implementation: When invoking other programs, specify those programs using
      fully-qualified pathnames. While this is an effective approach, code that uses
      fully-qualified pathnames might not be portable to other systems that do not
      use the same pathnames. The portability can be improved by locating the full-qualified
      paths in a centralized, easily-modifiable location within the source code, and
      having the code refer to these paths.</p>

      <p>Implementation: Remove or restrict all environment settings before invoking
      other programs. This includes the PATH environment variable, LD_LIBRARY_PATH,
      and other settings that identify the location of code libraries, and any application-specific
      search paths.</p>

      <p>Implementation: Check your search path before use and remove any elements
      that are likely to be unsafe, such as the current working directory or a temporary
      files directory. Since this is a denylist approach, it might not be a complete
      solution.</p>

      <p>Implementation: Use other functions that require explicit paths. Making use
      of any of the other readily available functions that require explicit paths
      is a safe way to avoid this problem. For example, system() in C does not require
      a full path since the shell can take care of finding the program using the PATH
      environment variable, while execl() and execv() require a full path.</p>'
    title: Uncontrolled Search Path Element
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/427.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a search path that contains an unquoted element,
      in which the element contains whitespace or other separators. This can cause
      the product to access resources in a parent path.</p><p>If a malicious individual
      has access to the file system, it is possible to elevate privileges by inserting
      such a file as C:Program.exe to be run by a privileged program making use of
      WinExec.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Properly quote the full search path before executing
      a program on the system.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: Unquoted Search Path or Element
    vulnType: File Handling Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/428.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The wrong handler is assigned to process an object.</p><p>An example
      of deploying the wrong handler would be calling a servlet to reveal source code
      of a .JSP file, or automatically determining type of the object even if it is
      contradictory to an explicitly specified type.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Perform a type check before interpreting
      an object.</p>

      <p>Architecture and Design: Reject any inconsistent types, such as a file with
      a .GIF extension that appears to consist of PHP code.</p>'
    title: Deployment of Wrong Handler
    vulnType: Handler Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/430.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A handler is not available or implemented.</p><p>When an exception
      is thrown and not caught, the process has given up an opportunity to decide
      if a given failure or event is worth a change in execution.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Handle all possible situations (e.g. error condition).</p>

      <p>Implementation: If an operation can throw an Exception, implement a handler
      for that specific exception.</p>'
    title: Missing Handler
    vulnType: Handler Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/431.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product allows the attacker to upload or transfer files of
      dangerous types that can be automatically processed within the product's environment.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Generate a new, unique filename for
      an uploaded file instead of using the user-supplied filename, so that no external
      input is used at all.[REF-422] [REF-423]</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs.</p>

      <p>Architecture and Design: Consider storing the uploaded files outside of the
      web document root entirely. Then, use other mechanisms to deliver the files
      dynamically. [REF-423]</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright. For example, limiting filenames to alphanumeric characters can help
      to restrict the introduction of unintended file extensions.</p>

      <p>Architecture and Design: Define a very limited set of allowable extensions
      and only generate filenames that end in these extensions. Consider the possibility
      of XSS (CWE-79) before allowing .html or .htm file types.</p>

      <p>Implementation: Ensure that only one extension is used in the filename. Some
      web servers, including some versions of Apache, may process files based on inner
      extensions so that filename.php.gif is fed to the PHP interpreter.[REF-422]
      [REF-423]</p>

      <p>Implementation: When running on a web server that supports case-insensitive
      filenames, perform case-insensitive evaluations of the extensions that are provided.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Implementation: Do not rely exclusively on sanity checks of file contents
      to ensure that the file is of the expected type and size. It may be possible
      for an attacker to hide code in some file segments that will still be executed
      by the server. For example, GIF images may contain a free-form comments field.</p>

      <p>Implementation: Do not rely exclusively on the MIME content type or filename
      attribute when determining how to render a file. Validating the MIME content
      type and ensuring that it matches the extension is only a partial solution.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>'
    title: Unrestricted Upload of File with Dangerous Type
    vulnType: Handler Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/434.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A product acts as an intermediary or monitor between two or more
      endpoints, but it does not have a complete model of an endpoint's features,
      behaviors, or state, potentially causing the product to perform incorrect actions
      based on this incomplete model.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Incomplete Model of Endpoint Features
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/437.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A's behavior or functionality changes with a new version of A,
      or a new environment, which is not known (or manageable) by B.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Behavioral Change in New Version or Environment
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/439.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A feature, API, or function does not perform according to its
      specification.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Expected Behavior Violation
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/440.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product acts as an intermediary HTTP agent (such as a proxy
      or firewall) in the data flow between two entities such as a client and server,
      but it does not interpret malformed HTTP requests or responses in ways that
      are consistent with how the messages will be processed by those entities that
      are at the ultimate destination.</p><p>HTTP requests or responses (messages)
      can be malformed or unexpected in ways that cause web servers or clients to
      interpret the messages in different ways than intermediary HTTP agents such
      as load balancers, reverse proxies, web caching proxies, application firewalls,
      etc. For example, an adversary may be able to add duplicate or different header
      fields that a client or server might interpret as one set of messages, whereas
      the intermediary might interpret the same sequence of bytes as a different set
      of messages. For example, discrepancies can arise in how to handle duplicate
      headers like two Transfer-encoding (TE) or two Content-length (CL), or the malicious
      HTTP message will have different headers for TE and CL. The inconsistent parsing
      and interpretation of messages can allow the adversary to smuggle a message
      to the client/server without the intermediary being aware of it. This weakness
      is usually the result of the usage of outdated or incompatible HTTP protocol
      versions in the HTTP agents.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Use a web server that employs a strict HTTP parsing
      procedure, such as Apache [REF-433].</p>

      <p>Implementation: Use only SSL communication.</p>

      <p>Implementation: Terminate the client session after each request.</p>

      <p>System Configuration: Turn all pages to non-cacheable.</p>'
    title: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/444.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A UI function for a security feature appears to be supported and
      gives feedback to the user that suggests that it is supported, but the underlying
      functionality is not implemented.</p><p></p>
    locale: en-US
    observation: null
    remediation: ''
    title: Unimplemented or Unsupported Feature in UI
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/447.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A UI function is obsolete and the product does not warn the user.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Remove the obsolete feature from the
      UI. Warn the user that the feature is no longer supported.</p>'
    title: Obsolete Feature in UI
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/448.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The UI performs the wrong action with respect to the user's request.</p><p></p>
    locale: en-US
    observation: null
    remediation: ''
    title: The UI Performs the Wrong Action
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/449.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product initializes critical internal variables or data stores
      using inputs that can be modified by untrusted actors.</p><p>A product system
      should be reluctant to trust variables that have been initialized outside of
      its trust boundary, especially if they are initialized by users. The variables
      may have been initialized incorrectly. If an attacker can initialize the variable,
      then they can influence what the vulnerable system will do.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: A product system should be reluctant to trust
      variables that have been initialized outside of its trust boundary. Ensure adequate
      checking (e.g. input validation) is performed when relying on input from outside
      a trust boundary.</p>

      <p>Architecture and Design: Avoid any external control of variables. If necessary,
      restrict the variables that can be modified using an allowlist, and use a different
      namespace or naming convention if possible.</p>'
    title: External Initialization of Trusted Variables or Data Stores
    vulnType: Initialization and Cleanup Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/454.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not exit or otherwise modify its operation when
      security-relevant errors occur during initialization, such as when a configuration
      file has a format error or a hardware security module (HSM) cannot be activated,
      which can cause the product to execute in a less secure fashion than intended
      by the administrator.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Follow the principle of failing securely when
      an error occurs. The system should enter a state where it is not vulnerable
      and will not display sensitive error messages to a potential attacker.</p>'
    title: Non-exit on Failed Initialization
    vulnType: Initialization and Cleanup Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/455.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly clean up and remove temporary or
      supporting resources after they have been used.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Temporary files and other
      supporting resources should be deleted/released immediately after they are no
      longer needed.</p>'
    title: Incomplete Cleanup
    vulnType: Initialization and Cleanup Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/459.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The accidental deletion of a data-structure sentinel can cause
      serious programming logic problems.</p><p>Often times data-structure sentinels
      are used to mark structure of the data structure. A common example of this is
      the null character at the end of strings. Another common example is linked lists
      which may contain a sentinel to mark the end of the list. It is dangerous to
      allow this type of control data to be easily accessible. Therefore, it is important
      to protect from the deletion or modification outside of some wrapper interface
      which provides safety.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use an abstraction library to abstract
      away risky APIs. Not a complete solution.</p>

      <p>Build and Compilation: Run or compile the software using features or extensions
      that automatically provide a protection mechanism that mitigates or eliminates
      buffer overflows. For example, certain compilers and extensions provide automatic
      buffer overflow detection mechanisms that are built into the compiled code.
      Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE
      GCC flag, StackGuard, and ProPolice.</p>

      <p>Operation: Use OS-level preventative functionality. Not a complete solution.</p>'
    title: Deletion of Data Structure Sentinel
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/463.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The accidental addition of a data-structure sentinel can cause
      serious programming logic problems.</p><p>Data-structure sentinels are often
      used to mark the structure of data. A common example of this is the null character
      at the end of strings or a special sentinel to mark the end of a linked list.
      It is dangerous to allow this type of control data to be easily accessible.
      Therefore, it is important to protect from the addition or modification of sentinels.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation Architecture and Design: Encapsulate the user
      from interacting with data sentinels. Validate user input to verify that sentinels
      are not present.</p>

      <p>Implementation: Proper error checking can reduce the risk of inadvertently
      introducing sentinel values into data. For example, if a parsing function fails
      or encounters an error, it might return a value that is the same as the sentinel.</p>

      <p>Architecture and Design: Use an abstraction library to abstract away risky
      APIs. This is not a complete solution.</p>

      <p>Operation: Use OS-level preventative functionality. This is not a complete
      solution.</p>'
    title: Addition of Data Structure Sentinel
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/464.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A function can return a pointer to memory that is outside of the
      buffer that the pointer is expected to reference.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Return of Pointer Value Outside of Expected Range
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/466.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>In C and C++, one may often accidentally refer to the wrong memory
      due to the semantics of when math operations are implicitly scaled.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a platform with high-level memory
      abstractions.</p>

      <p>Implementation: Always use array indexing instead of direct pointer manipulation.</p>

      <p>Architecture and Design: Use technologies for preventing buffer overflows.</p>'
    title: Incorrect Pointer Scaling
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/468.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product subtracts one pointer from another in order to determine
      size, but this calculation can be incorrect if the pointers do not exist in
      the same memory chunk.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Save an index variable. This is the recommended
      solution. Rather than subtract pointers from one another, use an index variable
      of the same size as the pointers in question. Use this variable to walk from
      one pointer to the other and calculate the difference. Always validate this
      number.</p>'
    title: Use of Pointer Subtraction to Determine Size
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/469.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses external input with reflection to select which
      classes or code to use, but it does not sufficiently prevent the input from
      selecting improper classes or code.</p><p>If the product uses external inputs
      to determine which class to instantiate or which method to invoke, then an attacker
      could supply values to select unexpected classes or methods. If this occurs,
      then the attacker could create control flow paths that were not intended by
      the developer. These paths could bypass authentication or access control checks,
      or otherwise cause the product to behave in an unexpected manner. This situation
      becomes a doomsday scenario if the attacker can upload files into a location
      that appears on the product's classpath (CWE-427) or add new entries to the
      product's classpath (CWE-426). Under either of these conditions, the attacker
      can use reflection to introduce new, malicious behavior into the product.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Refactor your code to avoid using reflection.</p>

      <p>Architecture and Design: Do not use user-controlled inputs to select and
      load classes or code.</p>

      <p>Implementation: Apply strict input validation by using allowlists or indirect
      selection to ensure that the user is only selecting allowable classes or code.</p>'
    title: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/470.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The web application does not sufficiently verify inputs that are
      assumed to be immutable but are actually externally controllable, such as hidden
      form fields.</p><p>If a web product does not properly protect assumed-immutable
      values from modification in hidden form fields, parameters, cookies, or URLs,
      this can lead to modification of critical data. Web applications often mistakenly
      make the assumption that data passed to the client in hidden fields or cookies
      is not susceptible to tampering. Improper validation of data that are user-controllable
      can lead to the application processing incorrect, and often malicious, input.
      For example, custom cookies commonly store session data or persistent data across
      sessions. This kind of session data is normally involved in security related
      decisions on the server side, such as user authentication and access control.
      Thus, the cookies might contain sensitive data such as user credentials and
      privileges. This is a dangerous practice, as it can often lead to improper reliance
      on the value of the client-provided cookie by the server side application.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>

      <p>Implementation: Inputs should be decoded and canonicalized to the application''s
      current internal representation before being validated (CWE-180). Make sure
      that the application does not decode the same input twice (CWE-174). Such errors
      could be used to bypass allowlist validation schemes by introducing dangerous
      inputs after they have been checked.</p>'
    title: External Control of Assumed-Immutable Web Parameter
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/472.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The code uses a function that has inconsistent implementations
      across operating systems and versions.</p><p>The use of inconsistent implementations
      can cause changes in behavior when the code is ported or built under a different
      environment than the programmer expects, which can lead to security problems
      in some cases. The implementation of many functions varies by platform, and
      at times, even by different versions of the same platform. Implementation differences
      can include: Slight differences in the way parameters are interpreted leading
      to inconsistent results. Some implementations of the function carry significant
      security risks. The function might not be defined on all platforms. The function
      might change which return codes it can provide, or change the meaning of its
      return codes.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Requirements: Do not accept inconsistent
      behavior from the API specifications when the deviant behavior increase the
      risk level.</p>'
    title: Use of Function with Inconsistent Implementations
    vulnType: API / Function Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/474.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The behavior of this function is undefined unless its control
      parameter is set to a specific value.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Undefined Behavior for Input to API
    vulnType: API / Function Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/475.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A NULL pointer dereference occurs when the application dereferences
      a pointer that it expects to be valid, but is NULL, typically causing a crash
      or exit.</p><p>NULL pointer dereference issues can occur through a number of
      flaws, including race conditions, and simple programming omissions.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: If all pointers that could have been modified
      are sanity-checked previous to use, nearly all NULL pointer dereferences can
      be prevented.</p>

      <p>Implementation: Check the results of all functions that return a value and
      verify that the value is non-null before acting upon it.</p>

      <p>Architecture and Design: Identify all variables and data stores that receive
      information from external sources, and apply input validation to make sure that
      they are only initialized to expected values.</p>

      <p>Implementation: Explicitly initialize all your variables and other data stores,
      either during declaration or just before the first usage.</p>'
    title: NULL Pointer Dereference
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/476.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The code uses deprecated or obsolete functions, which suggests
      that the code has not been actively reviewed or maintained.</p><p>As programming
      languages evolve, functions occasionally become obsolete due to: Advances in
      the language Improved understanding of how operations should be performed effectively
      and securely Changes in the conventions that govern certain operations Functions
      that are removed are usually replaced by newer counterparts that perform the
      same task in some different and hopefully improved way.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Refer to the documentation for the obsolete function
      in order to determine why it is deprecated or obsolete and to learn about alternative
      ways to achieve the same functionality.</p>'
    title: Use of Obsolete Function
    vulnType: API / Function Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/477.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code does not have a default case in an expression with multiple
      conditions, such as a switch statement.</p><p>If a multiple-condition expression
      (such as a switch in C) omits the default case but does not consider or handle
      all possible values that could occur, then this might lead to complex logical
      errors and resultant weaknesses. Because of this, further decisions are made
      based on poor information, and cascading failure results. This cascading failure
      may result in any number of security issues, and constitutes a significant failure
      in the system.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that there are no cases unaccounted for
      when adjusting program flow or values based on the value of a given variable.
      In the case of switch style statements, the very simple act of creating a default
      case can, if done correctly, mitigate this situation. Often however, the default
      case is used simply to represent an assumed option, as opposed to working as
      a check for invalid input. This is poor practice and in some cases is as bad
      as omitting a default case entirely.</p>'
    title: Missing Default Case in Multiple Condition Expression
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/478.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product accidentally uses the wrong operator, which changes
      the logic in security-relevant ways.</p><p>These types of errors are generally
      the result of a typo by the programmer.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Incorrect Operator
    vulnType: Expression Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/480.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code does not explicitly delimit a block that is intended
      to contain 2 or more statements, creating a logic error.</p><p>In some languages,
      braces (or other delimiters) are optional for blocks. When the delimiter is
      omitted, it is possible to insert a logic error in which a statement is thought
      to be in a block but is not. In some cases, the logic error can have security
      implications.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Always use explicit block delimitation and use
      static-analysis technologies to enforce this practice.</p>'
    title: Incorrect Block Delimitation
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/483.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product omits a break statement within a switch or similar
      construct, causing code associated with multiple conditions to execute. This
      can cause problems when the programmer only intended to execute code associated
      with one condition.</p><p>This can lead to critical code executing in situations
      where it should not.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Omitting a break statement so that one may fall
      through is often indistinguishable from an error, and therefore should be avoided.
      If you need to use fall-through capabilities, make sure that you have clearly
      documented this within the switch statement, and ensure that you have examined
      all the logical possibilities.</p>

      <p>Implementation: The functionality of omitting a break statement could be
      clarified with an if statement. This method is much safer.</p>'
    title: Omitted Break Statement in Switch
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/484.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Java packages are not inherently closed; therefore, relying on
      them for code security is not a good practice.</p><p>The purpose of package
      scope is to prevent accidental access by other parts of a program. This is an
      ease-of-software-development feature but not a security feature.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Data should be private
      static and final whenever possible. This will assure that your code is protected
      by instantiating early, preventing access and tampering.</p>'
    title: Reliance on Package-level Scope
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/487.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not sufficiently enforce boundaries between the
      states of different sessions, causing data to be provided to, or used by, the
      wrong session.</p><p>Data can bleed from one session to another through member
      variables of singleton objects, such as Servlets, and objects from a shared
      pool. In the case of Servlets, developers sometimes do not understand that,
      unless a Servlet implements the SingleThreadModel interface, the Servlet is
      a singleton; there is only one instance of the Servlet, and that single instance
      is used and re-used to handle multiple requests that are processed simultaneously
      by different threads. A common result is that developers use Servlet member
      fields in such a way that one user may inadvertently see another user's data.
      In other words, storing user data in Servlet member fields introduces a data
      access race condition.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Protect the application''s sessions
      from information leakage. Make sure that a session''s data is not used or visible
      by other sessions.</p>

      <p>Architecture and Design: In a multithreading environment, storing user data
      in Servlet member fields introduces a data access race condition. Do not use
      member fields to store information in the Servlet.</p>'
    title: Exposure of Data Element to Wrong Session
    vulnType: User Session Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/488.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product is deployed to unauthorized actors with debugging
      code still enabled or active, which can create unintended entry points or expose
      sensitive information.</p><p>A common development practice is to add back door
      code specifically designed for debugging or testing purposes that is not intended
      to be shipped or deployed with the product. These back door entry points create
      security risks because they are not considered during design or testing and
      fall outside of the expected operating conditions of the product.</p>
    locale: en-US
    observation: null
    remediation: '<p>Build and Compilation Distribution: Remove debug code before
      deploying the application.</p>'
    title: Active Debug Code
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/489.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product downloads source code or an executable from a remote
      location and executes the code without sufficiently verifying the origin and
      integrity of the code.</p><p>An attacker can execute malicious code by compromising
      the host server, performing DNS spoofing, or modifying the code in transit.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Perform proper forward and reverse DNS lookups
      to detect DNS spoofing.</p>

      <p>Architecture and Design Operation: Encrypt the code with a reliable encryption
      scheme before transmitting. This will only be a partial solution, since it will
      not detect DNS spoofing and it will not prevent your code from being modified
      on the hosting site.</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. Speficially, it may be helpful to use tools or frameworks to
      perform integrity checking on the transmitted code. When providing the code
      that is to be downloaded, such as for automatic updates of the software, then
      use cryptographic signatures for the code and modify the download clients to
      verify the signatures. Ensure that the implementation does not contain CWE-295,
      CWE-320, CWE-347, and related weaknesses. Use code signing technologies such
      as Authenticode. See references [REF-454] [REF-455] [REF-456].</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>'
    title: Download of Code Without Integrity Check
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/494.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly prevent sensitive system-level information
      from being accessed by unauthorized actors who do not have the same level of
      access to the underlying system as the product does.</p><p>Network-based products,
      such as web applications, often run on top of an operating system or similar
      environment. When the product communicates with outside parties, details about
      the underlying system are expected to remain hidden, such as path names for
      data files, other OS users, installed packages, the application environment,
      etc. This system information may be provided by the product itself, or buried
      within diagnostic or debugging messages. Debugging information helps an adversary
      learn about the system and form an attack plan. An information exposure occurs
      when system data or debugging information leaves the program through an output
      stream or logging function that makes it accessible to unauthorized parties.
      Using other weaknesses, an attacker could cause errors to occur; the response
      to these errors can reveal detailed system information, along with other impacts.
      An attacker can use messages that reveal technologies, operating systems, and
      product versions to tune the attack against known vulnerabilities in these technologies.
      A product may use diagnostic methods that provide significant implementation
      details such as stack traces as part of its error handling mechanism.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: Production applications
      should never use methods that generate internal details such as stack traces
      and error messages unless that information is directly committed to a log that
      is not viewable by the end user. All error message text should be HTML entity
      encoded before being written to the log file to protect against potential cross-site
      scripting attacks against the viewer of the logs</p>'
    title: Exposure of Sensitive System Information to an Unauthorized Control Sphere
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/497.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product mixes trusted and untrusted data in the same data
      structure or structured message.</p><p>A trust boundary can be thought of as
      line drawn through a program. On one side of the line, data is untrusted. On
      the other side of the line, data is assumed to be trustworthy. The purpose of
      validation logic is to allow data to safely cross the trust boundary - to move
      from untrusted to trusted. A trust boundary violation occurs when a program
      blurs the line between what is trusted and what is untrusted. By combining trusted
      and untrusted data in the same data structure, it becomes easier for programmers
      to mistakenly trust unvalidated data.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Trust Boundary Violation
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/501.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product deserializes untrusted data without sufficiently verifying
      that the resulting data will be valid.</p><p>It is often convenient to serialize
      objects for communication or to save them for later use. However, deserialized
      data or code can often be modified without using the provided accessor functions
      if it does not use cryptography to protect itself. Furthermore, any cryptography
      would still be client-side security -- which is a dangerous security assumption.
      Data that is untrusted can not be trusted to be well-formed. When developers
      place no restrictions on gadget chains, or series of instances and method invocations
      that can self-execute during the deserialization process (i.e., before the object
      is returned to the caller), it is sometimes possible for attackers to leverage
      them to perform unauthorized actions, like generating a shell.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation: If available, use the
      signing/sealing features of the programming language to assure that deserialized
      data has not been tainted. For example, a hash-based message authentication
      code (HMAC) could be used to ensure that data has not been modified.</p>

      <p>Implementation: When deserializing data, populate a new object rather than
      just deserializing. The result is that the data flows through safe input validation
      and that the functions are safe.</p>

      <p>Implementation: Explicitly define a final object() to prevent deserialization.</p>

      <p>Architecture and Design Implementation: Make fields transient to protect
      them from deserialization. An attempt to serialize and then deserialize a class
      containing transient fields will result in NULLs where the transient data should
      be. This is an excellent way to prevent time, environment-based, or sensitive
      variables from being carried over and used improperly.</p>

      <p>Implementation: Avoid having unnecessary types or gadgets available that
      can be leveraged for malicious ends. This limits the potential for unintended
      or unauthorized types and gadgets to be leveraged by the attacker. Add only
      acceptable classes to an allowlist. Note</p>'
    title: Deserialization of Untrusted Data
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/502.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A covert storage channel transfers information through the setting
      of bits by one program and the reading of those bits by another. What distinguishes
      this case from that of ordinary operation is that the bits are used to convey
      encoded information.</p><p>Covert storage channels occur when out-of-band data
      is stored in messages for the purpose of memory reuse. Covert channels are frequently
      classified as either storage or timing channels. Examples would include using
      a file intended to hold only audit information to convey user passwords--using
      the name of a file or perhaps status bits associated with it that can be read
      by all users to signal the contents of the file. Steganography, concealing information
      in such a manner that no one but the intended recipient knows of the existence
      of the message, is a good example of a covert storage channel.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Ensure that all reserved fields are set to zero
      before messages are sent and that no unnecessary information is included.</p>'
    title: Covert Storage Channel
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/515.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not require that users should have strong passwords,
      which makes it easier for attackers to compromise user accounts.</p><p>Authentication
      mechanisms often rely on a memorized secret (also known as a password) to provide
      an assertion of identity for a user of a system. It is therefore important that
      this password be of sufficient complexity and impractical for an adversary to
      guess. The specific requirements around how complex a password needs to be depends
      on the type of system being protected. Selecting the correct password requirements
      and enforcing them through implementation are critical to the overall success
      of the authentication mechanism.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: A product''s design should require adherance
      to an appropriate password policy. Specific password requirements depend strongly
      on contextual factors, but it is recommended to contain the following attributes</p>

      <p>Architecture and Design: Consider a second authentication factor beyond the
      password, which prevents the password from being a single point of failure.
      See CWE-308 for further information.</p>

      <p>Implementation: Consider implementing a password complexity meter to inform
      users when a chosen password meets the required attributes.</p>'
    title: Weak Password Requirements
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/521.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>Login pages do not use adequate measures to protect the user name
      and password while they are in transit from the client to the server.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Operation System Configuration: Enforce SSL use for the login
      page or any page used to transmit user credentials or other sensitive information.
      Even if the entire site does not use SSL, it MUST use SSL for login. Additionally,
      to help prevent phishing attacks, make sure that SSL serves the login page.
      SSL allows the user to verify the identity of the server to which they are connecting.
      If the SSL serves login page, the user can be certain they are talking to the
      proper end system. A phishing attack would typically redirect a user to a site
      that does not have a valid trusted server certificate issued from an authorized
      supplier.</p>'
    title: Unprotected Transport of Credentials
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/523.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code uses a cache that contains sensitive information, but
      the cache can be read by an actor outside of the intended control sphere.</p><p>Applications
      may use caches to improve efficiency when communicating with remote entities
      or performing intensive calculations. A cache maintains a pool of objects, threads,
      connections, pages, financial data, passwords, or other resources to minimize
      the time it takes to initialize and access these resources. If the cache is
      accessible to unauthorized actors, attackers can read the cache and obtain this
      sensitive information.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Protect information stored in cache.</p>

      <p>Architecture and Design: Do not store unnecessarily sensitive information
      in the cache.</p>

      <p>Architecture and Design: Consider using encryption in the cache.</p>'
    title: Use of Cache Containing Sensitive Information
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/524.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product places sensitive information into files or directories
      that are accessible to actors who are allowed to have access to the files, but
      not to the sensitive information.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Operation System Configuration: Do not
      expose file and directory information to the user.</p>'
    title: Insertion of Sensitive Information into Externally-Accessible File or Directory
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/538.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not use a standardized method for handling errors
      throughout the code, which might introduce inconsistent error handling and resultant
      weaknesses.</p><p>If the product handles error messages individually, on a one-by-one
      basis, this is likely to result in inconsistent error handling. The causes of
      errors may be lost. Also, detailed information about the causes of an error
      may be unintentionally returned to the user.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: define a strategy for handling errors
      of different severities, such as fatal errors versus basic log events. Use or
      create built-in language features, or an external package, that provides an
      easy-to-use API and define coding standards for the detection and handling of
      errors.</p>'
    title: Missing Standardized Error Handling Mechanism
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/544.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses hard-coded constants instead of symbolic names
      for security-critical values, which increases the likelihood of mistakes during
      code maintenance or security policy change.</p><p>If the developer does not
      find all occurrences of the hard-coded constants, an incorrect policy decision
      may be made if one of the constants is not changed. Making changes to these
      values will require code changes that may be difficult or impossible once the
      system is released to the field. In addition, these hard-coded values may become
      available to attackers if the code is ever disclosed.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Avoid using hard-coded constants. Configuration
      files offer a more flexible solution.</p>'
    title: Use of Hard-coded, Security-relevant Constants
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/547.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not mask passwords during entry, increasing the
      potential for attackers to observe and capture passwords.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation Requirements: Recommendations include requiring
      all password fields in your web application be masked to prevent other users
      from seeing this information.</p>'
    title: Missing Password Field Masking
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/549.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>If a web server does not fully parse requested URLs before it
      examines them for authorization, it may be possible for an attacker to bypass
      authorization protection.</p><p>For instance, the character strings /./ and
      / both mean current directory. If /SomeDirectory is a protected directory and
      an attacker requests /./SomeDirectory, the attacker may be able to gain access
      to the resource if /./ is not converted to / before the authorization check
      is performed.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: URL Inputs should be decoded and canonicalized
      to the application''s current internal representation before being validated
      and processed for authorization. Make sure that your application does not decode
      the same input twice. Such errors could be used to bypass allowlist schemes
      by introducing dangerous inputs after they have been checked.</p>'
    title: 'Incorrect Behavior Order: Authorization Before Parsing and Canonicalization'
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/551.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product makes files or directories accessible to unauthorized
      actors, even though they should not be.</p><p>Web servers, FTP servers, and
      similar servers may store a set of files underneath a root directory that is
      accessible to the server's users. Applications may store sensitive files underneath
      this root without also using access control to limit which users may request
      those files, if any. Alternately, an application might package multiple files
      or directories into an archive file (e.g., ZIP or tar), but the application
      might not exclude sensitive files that are underneath those directories. In
      cloud technologies and containers, this weakness might present itself in the
      form of misconfigured storage accounts that can be read or written by a public
      or anonymous user.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation System Configuration Operation: When storing data
      in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use
      the provider''s controls to disable public access.</p>'
    title: Files or Directories Accessible to External Parties
    vulnType: Authorization Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/552.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains dead code, which can never be executed.</p><p>Dead
      code is code that can never be executed in a running program. The surrounding
      code makes it impossible for a section of code to ever be executed.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Remove dead code before deploying the application.</p>'
    title: Dead Code
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/561.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A function returns the address of a stack variable, which will
      cause unintended program behavior, typically in the form of a crash.</p><p>Because
      local variables are allocated on the stack, when a program returns a pointer
      to a local variable, it is returning a stack address. A subsequent function
      call is likely to re-use this same stack address, thereby overwriting the value
      of the pointer, which no longer corresponds to the same variable since a function's
      stack frame is invalidated when it returns. At best this will cause the value
      of the pointer to change unexpectedly. In many cases it causes the program to
      crash the next time the pointer is dereferenced.</p>
    locale: en-US
    observation: null
    remediation: ''
    title: Return of Stack Variable Address
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/562.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The variable's value is assigned but never used, making it a dead
      store.</p><p>After the assignment, the variable is either assigned another value
      or goes out of scope. It is likely that the variable is simply vestigial, but
      it is also possible that the unused variable points out a bug.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Remove unused variables from the code.</p>'
    title: Assignment to Variable without Use
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/563.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product relies on the existence or values of cookies when
      performing security-critical operations, but it does not properly ensure that
      the setting is valid for the associated user.</p><p>Attackers can easily modify
      cookies, within the browser or by implementing the client-side code outside
      of the browser. Reliance on cookies without detailed validation and integrity
      checking can allow attackers to bypass authentication, conduct injection attacks
      such as SQL injection and cross-site scripting, or otherwise modify inputs in
      unexpected ways.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Avoid using cookie data for a security-related
      decision.</p>

      <p>Implementation: Perform thorough input validation (i.e.</p>

      <p>Architecture and Design: Add integrity checks to detect tampering.</p>

      <p>Architecture and Design: Protect critical cookies from replay attacks, since
      cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted
      cookie that also passes integrity checks. This mitigation applies to cookies
      that should only be valid during a single transaction or session. By enforcing
      timeouts, you may limit the scope of an attack. As part of your integrity check,
      use an unpredictable, server-side value that is not exposed to the client.</p>'
    title: Reliance on Cookies without Validation and Integrity Checking
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/565.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains an expression that will always evaluate to
      false.</p><p></p>
    locale: en-US
    observation: null
    remediation: ''
    title: Expression is Always False
    vulnType: Expression Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/570.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains an expression that will always evaluate to
      true.</p><p></p>
    locale: en-US
    observation: null
    remediation: ''
    title: Expression is Always True
    vulnType: Expression Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/571.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a clone() method that does not call super.clone()
      to obtain the new object.</p><p>All implementations of clone() should obtain
      the new object by calling super.clone(). If a class does not follow this convention,
      a subclass's clone() method will return an object of the wrong type.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Call super.clone() within your clone() method,
      when obtaining a new object.</p>

      <p>Implementation: In some cases, you can eliminate the clone method altogether
      and use copy constructors.</p>'
    title: clone() Method Without super.clone()
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/580.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not maintain equal hashcodes for equal objects.</p><p>Java
      objects are expected to obey a number of invariants related to equality. One
      of these invariants is that equal objects must have equal hashcodes. In other
      words, if a.equals(b) == true then a.hashCode() == b.hashCode().</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Both Equals() and Hashcode() should be defined.</p>'
    title: 'Object Model Violation: Just One of Equals and Hashcode Defined'
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/581.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code has a return statement inside a finally block, which
      will cause any thrown exception in the try block to be discarded.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Do not use a return statement inside the finally
      block. The finally block should have cleanup code.</p>'
    title: Return Inside Finally Block
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/584.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product makes an explicit call to the finalize() method from
      outside the finalizer.</p><p>While the Java Language Specification allows an
      object''s finalize() method to be called from outside the finalizer, doing so
      is usually a bad idea. For example, calling finalize() explicitly means that
      finalize() will be called more than once: the first time will be the explicit
      call and the last time will be the call that is made after the object is garbage
      collected.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Implementation Testing: Do not make explicit calls to finalize().
      Use static analysis tools to spot such instances.</p>'
    title: Explicit Call to Finalize()
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/586.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product sets a pointer to a specific address other than NULL
      or 0.</p><p>Using a fixed address is not portable, because that address will
      probably not be valid in all environments or platforms.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Never set a pointer to a fixed address.</p>'
    title: Assignment of a Fixed Address to a Pointer
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/587.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A web application accepts a user-controlled input that specifies
      a link to an external site, and uses that link in a Redirect. This simplifies
      phishing attacks.</p><p>An http parameter may contain a URL value and could
      cause the web application to redirect the request to the specified URL. By modifying
      the URL value to a malicious site, an attacker may successfully launch a phishing
      scam and steal user credentials. Because the server name in the modified link
      is identical to the original site, phishing attempts have a more trustworthy
      appearance. Whether this issue poses a vulnerability will be subject to the
      intended behavior of the application. For example, a search engine might intentionally
      provide redirects to arbitrary URLs.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright. Use a list of approved URLs
      or domains to be used for redirection.</p>

      <p>Architecture and Design: Use an intermediate disclaimer page that provides
      the user with a clear warning that they are leaving the current site. Implement
      a long timeout before the redirect occurs, or force the user to click on the
      link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer
      page.</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs. For example, ID 1 could map to /login.asp and ID 2 could map to http</p>

      <p>Architecture and Design: Ensure that no externally-supplied requests are
      honored by requiring that all redirect requests include a unique nonce generated
      by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).</p>

      <p>Architecture and Design Implementation: Understand all the potential areas
      where untrusted inputs can enter your software</p>

      <p>Operation: Use an application firewall that can detect attacks against this
      weakness. It can be beneficial in cases in which the code cannot be fixed (because
      it is controlled by a third party), as an emergency prevention measure while
      more comprehensive software assurance measures are applied, or to provide defense
      in depth.</p>'
    title: URL Redirection to Untrusted Site ('Open Redirect')
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/601.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A client/server product performs authentication within client
      code but not in server code, allowing server-side authentication to be bypassed
      via a modified client that omits the authentication check.</p><p>Client-side
      authentication is extremely weak and may be breached easily. Any attacker may
      read the source code and reverse-engineer the authentication mechanism to access
      parts of the application which would otherwise be protected.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Do not rely on client side data. Always
      perform server side authentication.</p>'
    title: Use of Client-Side Authentication
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/603.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>When multiple sockets are allowed to bind to the same port, other
      services on that port may be stolen or spoofed.</p><p>On most systems, a combination
      of setting the SO_REUSEADDR socket option, and a call to bind() allows any process
      to bind to a port to which a previous process has bound with INADDR_ANY. This
      allows a user to bind to the specific address of a server bound to INADDR_ANY
      on an unprivileged port, and steal its UDP packets/TCP connection.</p>
    locale: en-US
    observation: null
    remediation: ''
    title: Multiple Binds to the Same Port
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/605.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly check inputs that are used for loop
      conditions, potentially leading to a denial of service or other consequences
      because of excessive looping.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Do not use user-controlled data for loop conditions.</p>

      <p>Implementation: Perform input validation.</p>'
    title: Unchecked Input for Loop Condition
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/606.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses double-checked locking to access a resource without
      the overhead of explicit synchronization, but the locking is insufficient.</p><p>Double-checked
      locking refers to the situation where a programmer checks to see if a resource
      has been initialized, grabs a lock, checks again to see if the resource has
      been initialized, and then performs the initialization if it has not occurred
      yet. This should not be done, as it is not guaranteed to work in all languages
      and on all architectures. In summary, other threads may not be operating inside
      the synchronous block and are not guaranteed to see the operations execute in
      the same order as they would appear inside the synchronous block.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: While double-checked locking can be achieved
      in some languages, it is inherently flawed in Java before 1.5, and cannot be
      achieved without compromising platform independence. Before Java 1.5, only use
      of the synchronized keyword is known to work. Beginning in Java 1.5, use of
      the volatile keyword allows double-checked locking to work successfully, although
      there is some debate as to whether it achieves sufficient performance gains.
      See references.</p>'
    title: Double-Checked Locking
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/609.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product processes an XML document that can contain XML entities
      with URIs that resolve to documents outside of the intended sphere of control,
      causing the product to embed incorrect documents into its output.</p><p>XML
      documents optionally contain a Document Type Definition (DTD), which, among
      other features, enables the definition of XML entities. It is possible to define
      an entity by providing a substitution string in the form of a URI. The XML parser
      can access the contents of this URI and embed these contents back into the XML
      document for further processing. By submitting an XML file that defines an external
      entity with a file:// URI, an attacker can cause the processing application
      to read the contents of a local file. For example, a URI such as file:///c:/winnt/win.ini
      designates (in Windows) the file C:Winntwin.ini, or file:///etc/passwd designates
      the password file in Unix-based systems. Using URIs with other schemes such
      as http://, the attacker can force the application to make outgoing requests
      to servers that the attacker cannot reach directly, which can be used to bypass
      firewall restrictions or hide the source of attacks such as port scanning. Once
      the content of the URI is read, it is fed back into the application that is
      processing the XML. This application may echo back the data (e.g. in an error
      message), thereby exposing the file contents.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation System Configuration: Many XML parsers and validators
      can be configured to disable external entity expansion.</p>'
    title: Improper Restriction of XML External Entity Reference
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/611.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>According to WASC, Insufficient Session Expiration is when a web
      site permits an attacker to reuse old session credentials or session IDs for
      authorization.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Set sessions/credentials expiration date.</p>'
    title: Insufficient Session Expiration
    vulnType: User Session Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/613.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains an assert() or similar statement that can
      be triggered by an attacker, which leads to an application exit or other behavior
      that is more severe than necessary.</p><p>While assertion is good for catching
      logic errors and reducing the chances of reaching more serious vulnerability
      conditions, it can still lead to a denial of service. For example, if a server
      handles multiple simultaneous connections, and an assert() occurs in one single
      connection that causes all other connections to be dropped, this is a reachable
      assertion that leads to a denial of service.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Make sensitive open/close operation non reachable
      by directly user-controlled data (e.g. open/close resources)</p>

      <p>Implementation: Perform input validation on user data.</p>'
    title: Reachable Assertion
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/617.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>An ActiveX control is intended for use in a web browser, but it
      exposes dangerous methods that perform actions that are outside of the browser's
      security model (e.g. the zone or domain).</p><p>ActiveX controls can exercise
      far greater control over the operating system than typical Java or javascript.
      Exposed methods can be subject to various vulnerabilities, depending on the
      implemented behaviors of those methods, and whether input validation is performed
      on the provided arguments. If there is no integrity checking or origin validation,
      this method could be invoked by attackers.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: If you must expose a method, make sure to perform
      input validation on all arguments, and protect against all possible vulnerabilities.</p>

      <p>Architecture and Design: Use code signing, although this does not protect
      against any weaknesses that are already in the control.</p>

      <p>Architecture and Design System Configuration: Where possible, avoid marking
      the control as safe for scripting.</p>'
    title: Exposed Unsafe ActiveX Method
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/618.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>If a database cursor is not closed properly, then it could become
      accessible to other users while retaining the same privileges that were originally
      assigned, leaving the cursor dangling.</p><p>For example, an improper dangling
      cursor could arise from unhandled exceptions. The impact of the issue depends
      on the cursor's role, but SQL injection attacks are commonly possible.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Close cursors immediately after access to them
      is complete. Ensure that you close cursors if exceptions occur.</p>'
    title: Dangling Database Cursor ('Cursor Injection')
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/619.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>When setting a new password for a user, the product does not require
      knowledge of the original password, or using another form of authentication.</p><p>This
      could be used by an attacker to change passwords for another user, thus gaining
      the privileges associated with that user.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: When prompting for a password change,
      force the user to provide the original password in addition to the new password.</p>

      <p>Architecture and Design: Do not use forgotten password functionality. But
      if you must, ensure that you are only providing information to the actual user,
      e.g. by using an email address or challenge question that the legitimate user
      already provided in the past; do not allow the current user to change this identity
      information until the correct password has been provided.</p>'
    title: Unverified Password Change
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/620.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a regular expression that either (1) contains
      an executable component with user-controlled inputs, or (2) allows a user to
      enable execution by inserting pattern modifiers.</p><p>Case (2) is possible
      in the PHP preg_replace() function, and possibly in other languages when a user-controlled
      input is inserted into a string that is later parsed as a regular expression.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: The regular expression feature in some languages
      allows inputs to be quoted or escaped before insertion, such as Q and E in Perl.</p>'
    title: Executable Regular Expression Error
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/624.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product uses a regular expression that does not sufficiently
      restrict the set of allowed values.</p><p>This effectively causes the regexp
      to accept substrings that match the pattern, which produces a partial comparison
      to the target. In some cases, this can lead to other weaknesses. Common errors
      include: not identifying the beginning and end of the target string using wildcards
      instead of acceptable character ranges others</p>'
    locale: en-US
    observation: null
    remediation: '<p>Implementation: When applicable, ensure that the regular expression
      marks beginning and ending string patterns, such as /^string$/ for Perl.</p>'
    title: Permissive Regular Expression
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/625.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product calls a function, procedure, or routine with arguments
      that are not correctly specified, leading to always-incorrect behavior and resultant
      weaknesses.</p><p>There are multiple ways in which this weakness can be introduced,
      including: the wrong variable or reference; an incorrect number of arguments;
      incorrect order of arguments; wrong type of arguments; or wrong value.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Build and Compilation: Once found, these issues are easy to fix.
      Use code inspection tools and relevant compiler features to identify potential
      violations. Pay special attention to code that is not likely to be exercised
      heavily during QA.</p>

      <p>Architecture and Design: Make sure your API''s are stable before you use
      them in production code.</p>'
    title: Function Call with Incorrectly Specified Arguments
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/628.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The system's authorization functionality does not prevent one
      user from gaining access to another user's data or record by modifying the key
      value identifying the data.</p><p>Retrieval of a user record occurs in the system
      based on some key value that is under user control. The key would typically
      identify a user-related record stored in the system and would be used to lookup
      that record for presentation to the user. It is likely that an attacker would
      have to be an authenticated user in the system. However, the authorization process
      would not properly check the data access operation to ensure that the authenticated
      user performing the operation has sufficient entitlements to perform the requested
      data access, hence bypassing any other authorization checks present in the system.
      For example, attackers can look at places where user specific data is retrieved
      (e.g. search screens) and determine whether the key for the item being looked
      up is controllable externally. The key may be a hidden field in the HTML form
      field, might be passed as a URL parameter or as an unencrypted cookie variable,
      then in each of these cases it will be possible to tamper with the key value.
      One manifestation of this weakness is when a system uses sequential or otherwise
      easily-guessable session IDs that would allow one user to easily switch to another
      user's session and read/modify their data.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: For each and every data access, ensure
      that the user has sufficient privilege to access the record that is being requested.</p>

      <p>Architecture and Design Implementation: Make sure that the key that is used
      in the lookup of a specific user''s record is not controllable externally by
      the user or that any tampering can be detected.</p>

      <p>Architecture and Design: Use encryption in order to make it more difficult
      to guess other legitimate values of the key or associate a digital signature
      with the key so that the server can verify that there has been no tampering.</p>'
    title: Authorization Bypass Through User-Controlled Key
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/639.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a mechanism for users to recover or change
      their passwords without knowing the original password, but the mechanism is
      weak.</p><p>It is common for an application to have a mechanism that provides
      a means for a user to gain access to their account in the event they forget
      their password. Very often the password recovery mechanism is weak, which has
      the effect of making it more likely that it would be possible for a person other
      than the legitimate system user to gain access to that user's account. Weak
      password recovery schemes completely undermine a strong password authentication
      scheme. This weakness may be that the security question is too easy to guess
      or find an answer to (e.g. because the question is too common, or the answers
      can be found using social media). Or there might be an implementation weakness
      in the password recovery mechanism code that may for instance trick the system
      into e-mailing the new password to an e-mail account other than that of the
      user. There might be no throttling done on the rate of password resets so that
      a legitimate user can be denied service by an attacker if an attacker tries
      to recover their password in a rapid succession. The system may send the original
      password to the user rather than generating a new temporary password. In summary,
      password recovery functionality, if not carefully designed and implemented can
      often become the system's weakest link that can be misused in a way that would
      allow an attacker to gain unauthorized access to the system.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Make sure that all input supplied by
      the user to the password recovery mechanism is thoroughly filtered and validated.</p>

      <p>Architecture and Design: Do not use standard weak security questions and
      use several security questions.</p>

      <p>Architecture and Design: Make sure that there is throttling on the number
      of incorrect answers to a security question. Disable the password recovery functionality
      after a certain (small) number of incorrect guesses.</p>

      <p>Architecture and Design: Require that the user properly answers the security
      question prior to resetting their password and sending the new password to the
      e-mail address of record.</p>

      <p>Architecture and Design: Never allow the user to control what e-mail address
      the new password will be sent to in the password recovery mechanism.</p>

      <p>Architecture and Design: Assign a new temporary password rather than revealing
      the original password.</p>'
    title: Weak Password Recovery Mechanism for Forgotten Password
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/640.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product constructs the name of a file or other resource using
      input from an upstream component, but it does not restrict or incorrectly restricts
      the resulting name.</p><p>This may produce resultant weaknesses. For instance,
      if the names of these resources contain scripting characters, it is possible
      that a script may get executed in the client's browser if the application ever
      displays the name of the resource on a dynamically generated web page. Alternately,
      if the resources are consumed by some application parser, a specially crafted
      name can exploit some vulnerability internal to the parser, potentially resulting
      in execution of arbitrary code on the server machine. The problems will vary
      based on the context of usage of such malformed resource names and whether vulnerabilities
      are present in or assumptions are made by the targeted technology that would
      make code execution possible.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Do not allow users to control names
      of resources used on the server side.</p>

      <p>Architecture and Design: Perform allowlist input validation at entry points
      and also before consuming the resources. Reject bad file names rather than trying
      to cleanse them.</p>

      <p>Architecture and Design: Make sure that technologies consuming the resources
      are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that
      would allow code execution if the name of the resource is malformed.</p>'
    title: Improper Restriction of Names for Files and Other Resources
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/641.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains an account lockout protection mechanism,
      but the mechanism is too restrictive and can be triggered too easily, which
      allows attackers to deny service to legitimate users by causing their accounts
      to be locked out.</p><p>Account lockout is a security feature often present
      in applications as a countermeasure to the brute force attack on the password
      based authentication mechanism of the system. After a certain number of failed
      login attempts, the users' account may be disabled for a certain period of time
      or until it is unlocked by an administrator. Other security events may also
      possibly trigger account lockout. However, an attacker may use this very security
      feature to deny service to legitimate system users. It is therefore important
      to ensure that the account lockout security mechanism is not overly restrictive.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Implement more intelligent password
      throttling mechanisms such as those which take IP address into account, in addition
      to the login name.</p>

      <p>Architecture and Design: Implement a lockout timeout that grows as the number
      of incorrect login attempts goes up, eventually resulting in a complete lockout.</p>

      <p>Architecture and Design: Consider alternatives to account lockout that would
      still be effective against password brute force attacks, such as presenting
      the user machine with a puzzle to solve (makes it do some computation).</p>'
    title: Overly Restrictive Account Lockout Mechanism
    vulnType: Lockout Mechanism Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/645.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product does not conform to the API requirements for a function
      call that requires extra privileges. This could allow attackers to gain privileges
      by causing the function to be called incorrectly.</p><p>When a product contains
      certain functions that perform operations requiring an elevated level of privilege,
      the caller of a privileged API must be careful to: ensure that assumptions made
      by the APIs are valid, such as validity of arguments account for known weaknesses
      in the design/implementation of the API call the API from a safe context If
      the caller of the API does not follow these requirements, then it may allow
      a malicious user or process to elevate their privilege, hijack the process,
      or steal sensitive data. For instance, it is important to know if privileged
      APIs do not shed their privileges before returning to the caller or if the privileged
      function might make certain assumptions about the data, context or state information
      passed to it by the caller. It is important to always know when and how privileged
      APIs can be called in order to ensure that their elevated level of privilege
      cannot be exploited.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Before calling privileged APIs, always ensure
      that the assumptions made by the privileged code hold true prior to making the
      call.</p>

      <p>Architecture and Design: Know architecture and implementation weaknesses
      of the privileged APIs and make sure to account for these weaknesses before
      calling the privileged APIs to ensure that they can be called safely.</p>

      <p>Implementation: If privileged APIs make certain assumptions about data, context
      or state validity that are passed by the caller, the calling code must ensure
      that these assumptions have been validated prior to making the call.</p>

      <p>Implementation: If privileged APIs do not shed their privilege prior to returning
      to the calling code, then calling code needs to shed these privileges immediately
      and safely right after the call to the privileged APIs. In particular, the calling
      code needs to ensure that a privileged thread of execution will never be returned
      to the user or made available to user-controlled processes.</p>

      <p>Implementation: Only call privileged APIs from safe, consistent and expected
      state.</p>

      <p>Implementation: Ensure that a failure or an error will not leave a system
      in a state where privileges are not properly shed and privilege escalation is
      possible (i.e. fail securely with regards to handling of privileges).</p>'
    title: Incorrect Use of Privileged APIs
    vulnType: Privilege Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/648.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses obfuscation or encryption of inputs that should
      not be mutable by an external actor, but the product does not use integrity
      checks to detect if those inputs have been modified.</p><p>When an application
      relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable
      tokens or parameters, that may have an effect on the user state, system state,
      or some decision made on the server. Without protecting the tokens/parameters
      for integrity, the application is vulnerable to an attack where an adversary
      traverses the space of possible values of the said token/parameter in order
      to attempt to gain an advantage. The goal of the attacker is to find another
      admissible value that will somehow elevate their privileges in the system, disclose
      information or change the behavior of the system in some way beneficial to the
      attacker. If the application does not protect these critical tokens/parameters
      for integrity, it will not be able to determine that these values have been
      tampered with. Measures that are used to protect data for confidentiality should
      not be relied upon to provide the integrity service.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Protect important client controllable
      tokens/parameters for integrity using PKI methods (i.e. digital signatures)
      or other means, and checks for integrity on the server side.</p>

      <p>Architecture and Design: Repeated requests from a particular user that include
      invalid values of tokens/parameters (those that should not be changed manually
      by users) should result in the user account lockout.</p>

      <p>Architecture and Design: Client side tokens/parameters should not be such
      that it would be easy/predictable to guess another valid state.</p>

      <p>Architecture and Design: Obfuscation should not be relied upon. If encryption
      is used, it needs to be properly applied (i.e. proven algorithm and implementation,
      use padding, use random initialization vector, user proper encryption mode).
      Even with proper encryption where the ciphertext does not leak information about
      the plaintext or reveal its structure, compromising integrity is possible (although
      less likely) without the provision of the integrity service.</p>'
    title: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without
      Integrity Checking
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/649.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly compartmentalize or isolate functionality,
      processes, or resources that require different privilege levels, rights, or
      permissions.</p><p>When a weakness occurs in functionality that is accessible
      by lower-privileged users, then without strong boundaries, an attack might extend
      the scope of the damage to higher-privileged users.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Break up privileges between different
      modules, objects, or entities. Minimize the interfaces between modules and require
      strong access control between them.</p>'
    title: Improper Isolation or Compartmentalization
    vulnType: Authorization Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/653.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A protection mechanism relies exclusively, or to a large extent,
      on the evaluation of a single condition or the integrity of a single object
      or entity in order to make a decision about granting access to restricted resources
      or functionality.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use multiple simultaneous checks before
      granting access to critical operations or granting critical privileges. A weaker
      but helpful mitigation is to use several successive checks (multiple layers
      of security).</p>

      <p>Architecture and Design: Use redundant access rules on different choke points
      (e.g., firewalls).</p>'
    title: Reliance on a Single Factor in a Security Decision
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/654.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a protection mechanism whose strength depends
      heavily on its obscurity, such that knowledge of its algorithms or key data
      is sufficient to defeat the mechanism.</p><p>This reliance on security through
      obscurity can produce resultant weaknesses if an attacker is able to reverse
      engineer the inner workings of the mechanism. Note that obscurity can be one
      small part of defense in depth, since it can create more work for an attacker;
      however, it is a significant risk if used as the primary means of protection.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Always consider whether knowledge of
      your code or design is sufficient to break it. Reverse engineering is a highly
      successful discipline, and financially feasible for motivated adversaries. Black-box
      techniques are established for binary analysis of executables that use obfuscation,
      runtime analysis of proprietary protocols, inferring file formats, and others.</p>

      <p>Architecture and Design: When available, use publicly-vetted algorithms and
      procedures, as these are more likely to undergo more extensive security analysis
      and testing. This is especially the case with encryption and authentication.</p>'
    title: Reliance on Security Through Obscurity
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/656.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product calls a non-reentrant function in a concurrent context
      in which a competing code sequence (e.g. thread or signal handler) may have
      an opportunity to call the same function or otherwise influence its state.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Use reentrant functions if available.</p>

      <p>Implementation: Add synchronization to your non-reentrant function.</p>

      <p>Implementation: In Java, use the ReentrantLock Class.</p>'
    title: Use of a Non-reentrant Function in a Concurrent Context
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/663.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product invokes a potentially dangerous function that could
      introduce a vulnerability if it is used incorrectly, but the function can also
      be used safely.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Build and Compilation Implementation: Identify a list of prohibited
      API functions and prohibit developers from using these functions, providing
      safer alternatives. In some cases, automatic code analysis tools or the compiler
      can be instructed to spot use of prohibited functions, such as the banned.h
      include file from Microsoft''s SDL. [REF-554] [REF-7]</p>'
    title: Use of Potentially Dangerous Function
    vulnType: API / Function Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/676.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>When converting from one data type to another, such as long to
      integer, data can be omitted or translated in a way that produces unexpected
      values. If the resulting values are used in a sensitive context, then dangerous
      behaviors may occur.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Avoid making conversion between numeric types.
      Always check for the allowed ranges.</p>'
    title: Incorrect Conversion between Numeric Types
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/681.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses multiple resources that can have the same identifier,
      in a context in which unique identifiers are required.</p><p>If the product
      assumes that each resource has a unique identifier, the product could operate
      on the wrong resource if attackers can cause multiple resources to be associated
      with the same identifier.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Where possible, use unique identifiers.
      If non-unique identifiers are detected, then do not operate any resource with
      a non-unique identifier and report the error appropriately.</p>'
    title: Use of Multiple Resources with Duplicate Identifier
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/694.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses low-level functionality that is explicitly prohibited
      by the framework or specification under which the product is supposed to operate.</p><p>The
      use of low-level functionality can violate the specification in unexpected ways
      that effectively disable built-in protection mechanisms, introduce exploitable
      inconsistencies, or otherwise expose the functionality to attack.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Low-Level Functionality
    vulnType: API / Function Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/695.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The web application sends a redirect to another location, but
      instead of exiting, it executes additional code.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Execution After Redirect (EAR)
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/698.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product assigns an owner to a resource, but the owner is outside
      of the intended control sphere.</p><p>This may allow the resource to be manipulated
      by actors outside of the intended control sphere.</p>
    locale: en-US
    observation: null
    remediation: ''
    title: Incorrect Ownership Assignment
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/708.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The developer builds a security-critical protection mechanism
      into the software, but the compiler optimizes the program such that the mechanism
      is removed or modified.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Compiler Optimization Removal or Modification of Security-critical Code
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/733.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product provides an Applications Programming Interface (API)
      or similar interface for interaction with external actors, but the interface
      includes a dangerous method or function that is not properly restricted.</p><p>This
      weakness can lead to a wide variety of resultant weaknesses, depending on the
      behavior of the exposed method. It can apply to any number of technologies and
      approaches, such as ActiveX controls, Java functions, IOCTLs, and so on. The
      exposure can occur in a few different ways: The function/method was never intended
      to be exposed to outside actors. The function/method was only intended to be
      accessible to a limited set of actors, such as Internet-based access from a
      single web site.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: If you must expose a method, make sure
      to perform input validation on all arguments, limit access to authorized parties,
      and protect against all possible vulnerabilities.</p>

      <p>Architecture and Design Implementation: Identify all exposed functionality.
      Explicitly list all functionality that must be exposed to some user or set of
      users. Identify which functionality may be</p>'
    title: Exposed Dangerous Method or Function
    vulnType: API / Function Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/749.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not return custom error pages to the user, possibly
      exposing sensitive information.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Missing Custom Error Page
    vulnType: Error Conditions, Return Values, Status Codes
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/756.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product attempts to return a memory resource to the system,
      but it calls the wrong release function or calls the appropriate release function
      incorrectly.</p><p>This weakness can take several forms, such as: The memory
      was allocated, explicitly or implicitly, via one memory management method and
      deallocated using a different, non-compatible function (CWE-762). The function
      calls or memory management routines chosen are appropriate, however they are
      used incorrectly, such as in CWE-761.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Only call matching memory management functions.
      Do not mix and match routines. For example, when you allocate a buffer with
      malloc(), dispose of the original pointer with free().</p>

      <p>Implementation: When programming in C++, consider using smart pointers provided
      by the boost library to help correctly and consistently manage memory.</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. For example, glibc in Linux provides protection against free
      of invalid pointers.</p>

      <p>Architecture and Design: Use a language that provides abstractions for memory
      allocation and deallocation.</p>'
    title: Release of Invalid Pointer or Reference
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/763.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product locks a critical resource more times than intended,
      leading to an unexpected state in the system.</p><p>When a product is operating
      in a concurrent environment and repeatedly locks a critical resource, the consequences
      will vary based on the type of lock, the lock's implementation, and the resource
      being protected. In some situations such as with semaphores, the resources are
      pooled and extra locking calls will reduce the size of the total available pool,
      possibly leading to degraded performance or a denial of service. If this can
      be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412).
      In the context of a binary lock, it is likely that any duplicate locking attempts
      will never succeed since the lock is already held and progress may not be possible.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: When locking and unlocking a resource, try to
      be sure that all control paths through the code in which the resource is locked
      one or more times correspond to exactly as many unlocks. If the software acquires
      a lock and then determines it is not able to perform its intended behavior,
      be sure to release the lock(s) before waiting for conditions to improve. Reacquire
      the lock(s) before trying again.</p>'
    title: Multiple Locks of a Critical Resource
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/764.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product unlocks a critical resource more times than intended,
      leading to an unexpected state in the system.</p><p>When the product is operating
      in a concurrent environment and repeatedly unlocks a critical resource, the
      consequences will vary based on the type of lock, the lock's implementation,
      and the resource being protected. In some situations such as with semaphores,
      the resources are pooled and extra calls to unlock will increase the count for
      the number of available resources, likely resulting in a crash or unpredictable
      behavior when the system nears capacity.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: When locking and unlocking a resource, try to
      be sure that all control paths through the code in which the resource is locked
      one or more times correspond to exactly as many unlocks. If the product acquires
      a lock and then determines it is not able to perform its intended behavior,
      be sure to release the lock(s) before waiting for conditions to improve. Reacquire
      the lock(s) before trying again.</p>'
    title: Multiple Unlocks of a Critical Resource
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/765.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product declares a critical variable, field, or member to
      be public when intended security policy requires it to be private.</p><p>This
      issue makes it more difficult to maintain the product, which indirectly affects
      security by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Data should be private, static, and final whenever
      possible. This will assure that your code is protected by instantiating early,
      preventing access, and preventing tampering.</p>'
    title: Critical Data Element Declared Public
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/766.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product defines a public method that reads or modifies a private
      variable.</p><p>If an attacker modifies the variable to contain unexpected values,
      this could violate assumptions from other parts of the code. Additionally, if
      an attacker can read the private variable, it may expose sensitive information
      or make it easier to launch further attacks.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Use class accessor and mutator methods appropriately.
      Perform validation when accepting data from a public method that is intended
      to modify a critical private variable. Also be sure that appropriate access
      controls are being applied when a public method interfaces with critical data.</p>'
    title: Access to Critical Private Variable via Public Method
    vulnType: Permission Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/767.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product allocates a reusable resource or group of resources
      on behalf of an actor without imposing any restrictions on the size or number
      of resources that can be allocated, in violation of the intended security policy
      for that actor.</p><p>Code frequently has to work with limited resources, so
      programmers must be careful to ensure that resources are not consumed too quickly,
      or too easily. Without use of quotas, resource limits, or other protection mechanisms,
      it can be easy for an attacker to consume many resources by rapidly making many
      requests, or causing larger resources to be used than is needed. When too many
      resources are allocated, or if a single resource is too large, then it can prevent
      the code from working correctly, possibly leading to a denial of service.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Limit the amount of resources that are
      accessible to unprivileged users. Set per-user limits for resources. Allow the
      system administrator to define these limits. Be careful to avoid CWE-410.</p>

      <p>Architecture and Design: Design throttling mechanisms into the system architecture.
      The best protection is to limit the amount of resources that an unauthorized
      user can cause to be expended. A strong authentication and access control model
      will help prevent such attacks from occurring in the first place, and it will
      help the administrator to identify who is committing the abuse. The login application
      should be protected against DoS attacks as much as possible. Limiting the database
      access, perhaps by caching result sets, can help minimize the resources expended.
      To further limit the potential for a DoS attack, consider tracking the rate
      of requests received from users and blocking requests that exceed a defined
      rate threshold.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Architecture and Design: Mitigation of resource exhaustion attacks requires
      that the target system either</p>

      <p>Architecture and Design: Ensure that protocols have specific limits of scale
      placed on them.</p>

      <p>Architecture and Design Implementation: If the program must fail, ensure
      that it fails gracefully (fails closed). There may be a temptation to simply
      let the program fail poorly in cases such as low memory conditions, but an attacker
      may be able to assert control before the software has fully exited. Alternately,
      an uncontrolled failure could cause cascading problems with other downstream
      components; for example, the program could send a signal to a downstream process
      so the process immediately knows that a problem has occurred and has a better
      chance of recovery. Ensure that all failures in resource allocation place the
      system into a safe posture.</p>

      <p>Operation Architecture and Design: Use resource-limiting settings provided
      by the operating system or environment. For example, when managing system resources
      in POSIX, setrlimit() can be used to set limits for certain types of resources,
      and getrlimit() can determine how many resources are available. However, these
      functions are not available on all operating systems. When the current levels
      get close to the maximum that is defined for the application (see CWE-770),
      then limit the allocation of further resources to privileged users; alternately,
      begin releasing resources for less-privileged users. While this mitigation may
      protect the system from attack, it will not necessarily stop attackers from
      adversely impacting other users. Ensure that the application performs the appropriate
      error checks and error handling in case resources become unavailable (CWE-703).</p>'
    title: Allocation of Resources Without Limits or Throttling
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/770.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly maintain a reference to a resource
      that has been allocated, which prevents the resource from being reclaimed.</p><p>This
      does not necessarily apply in languages or frameworks that automatically perform
      garbage collection, since the removal of all references may act as a signal
      that the resource is ready to be reclaimed.</p>
    locale: en-US
    observation: null
    remediation: '<p>Operation Architecture and Design: Use resource-limiting settings
      provided by the operating system or environment. For example, when managing
      system resources in POSIX, setrlimit() can be used to set limits for certain
      types of resources, and getrlimit() can determine how many resources are available.
      However, these functions are not available on all operating systems. When the
      current levels get close to the maximum that is defined for the application
      (see CWE-770), then limit the allocation of further resources to privileged
      users; alternately, begin releasing resources for less-privileged users. While
      this mitigation may protect the system from attack, it will not necessarily
      stop attackers from adversely impacting other users. Ensure that the application
      performs the appropriate error checks and error handling in case resources become
      unavailable (CWE-703).</p>'
    title: Missing Reference to Active Allocated Resource
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/771.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not release a resource after its effective lifetime
      has ended, i.e., after the resource is no longer needed.</p><p>When a resource
      is not released after use, it can allow attackers to cause a denial of service
      by causing the allocation of resources without triggering their release. Frequently-affected
      resources include memory, CPU, disk space, power or battery, etc.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: It is good practice to be responsible for freeing
      all resources you allocate and to be consistent with how and where you free
      resources in a function. If you allocate resources that you intend to free upon
      completion of the function, you must be sure to free the resources at all exit
      points for that function including error conditions.</p>

      <p>Operation Architecture and Design: Use resource-limiting settings provided
      by the operating system or environment. For example, when managing system resources
      in POSIX, setrlimit() can be used to set limits for certain types of resources,
      and getrlimit() can determine how many resources are available. However, these
      functions are not available on all operating systems. When the current levels
      get close to the maximum that is defined for the application (see CWE-770),
      then limit the allocation of further resources to privileged users; alternately,
      begin releasing resources for less-privileged users. While this mitigation may
      protect the system from attack, it will not necessarily stop attackers from
      adversely impacting other users. Ensure that the application performs the appropriate
      error checks and error handling in case resources become unavailable (CWE-703).</p>'
    title: Missing Release of Resource after Effective Lifetime
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/772.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses XML documents and allows their structure to be
      defined with a Document Type Definition (DTD), but it does not properly control
      the number of recursive definitions of entities.</p><p>If the DTD contains a
      large number of nested or recursive entities, this can lead to explosive growth
      of data when parsed, causing a denial of service.</p>
    locale: en-US
    observation: null
    remediation: '<p>Operation: If possible, prohibit the use of DTDs or use an XML
      parser that limits the expansion of recursive DTD entities.</p>

      <p>Implementation: Before parsing XML files with associated DTDs, scan for recursive
      entity declarations and do not continue parsing potentially explosive content.</p>'
    title: Improper Restriction of Recursive Entity References in DTDs ('XML Entity
      Expansion')
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/776.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>When a security-critical event occurs, the product either does
      not record the event or omits important details about the event when logging
      it.</p><p>When security-critical events are not logged properly, such as a failed
      login attempt, this can make malicious behavior more difficult to detect and
      may hinder forensic analysis after an attack succeeds. As organizations adopt
      cloud storage resources, these technologies often require configuration changes
      to enable detailed logging information, since detailed logging can incur additional
      costs. This could lead to telemetry gaps in critical audit logs. For example,
      in Azure, the default value for logging is disabled.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a centralized logging mechanism
      that supports multiple levels of detail.</p>

      <p>Implementation: Ensure that all security-related successes and failures can
      be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs,
      Google Cloud Storage, etc.), use the provider''s controls to enable and capture
      detailed logging information.</p>

      <p>Operation: Be sure to set the level of logging appropriately in a production
      environment. Sufficient data should be logged to enable system administrators
      to detect attacks, diagnose errors, and recover from attacks. At the same time,
      logging too much data (CWE-779) can cause the same problems, including unexpected
      costs when using a cloud environment.</p>

      <p>Operation: To enable storage logging using Azure''s Portal, navigate to the
      name of the Storage Account, locate Monitoring (CLASSIC) section, and select
      Diagnostic settings (classic). For each of the various properties (blob, file,
      table, queue), ensure the status is properly set for the desired logging data.
      If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be
      called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays
      arguments.</p>'
    title: Insufficient Logging
    vulnType: Audit / Logging Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/778.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product logs too much information, making log files hard to
      process and possibly hindering recovery efforts or forensic analysis after an
      attack.</p><p>While logging is a good practice in general, and very high levels
      of logging are appropriate for debugging stages of development, too much logging
      in a production environment might hinder a system administrator's ability to
      detect anomalous conditions. This can provide cover for an attacker while attempting
      to penetrate a system, clutter the audit trail for forensic analysis, or make
      it more difficult to debug problems in a production environment.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Suppress large numbers of duplicate
      log messages and replace them with periodic summaries. For example, syslog may
      include an entry that states last message repeated X times when recording repeated
      events.</p>

      <p>Architecture and Design: Support a maximum size for the log file that can
      be controlled by the administrator. If the maximum size is reached, the admin
      should be notified. Also, consider reducing functionality of the product. This
      may result in a denial-of-service to legitimate product users, but it will prevent
      the product from adversely impacting the entire system.</p>

      <p>Implementation: Adjust configurations appropriately when the product is transitioned
      from a debug state to production.</p>'
    title: Logging of Excessive Data
    vulnType: Audit / Logging Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/779.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses an expression in which operator precedence causes
      incorrect logic to be used.</p><p>While often just a bug, operator precedence
      logic errors can have serious consequences if they are used in security-critical
      code, such as making an authentication decision.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Regularly wrap sub-expressions in parentheses,
      especially in security-critical code.</p>'
    title: Operator Precedence Logic Error
    vulnType: Expression Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/783.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product reads or writes to a buffer using an index or pointer
      that references a memory location prior to the beginning of the buffer.</p><p>This
      typically occurs when a pointer or its index is decremented to a position before
      the buffer, when pointer arithmetic results in a position before the beginning
      of the valid memory location, or when a negative index is used.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Access of Memory Location Before Start of Buffer
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/786.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product writes data past the end, or before the beginning,
      of the intended buffer.</p><p>Typically, this can result in corruption of data,
      a crash, or code execution. The product may modify an index or perform pointer
      arithmetic that references a memory location that is outside of the boundaries
      of the buffer. A subsequent write operation then produces undefined or unexpected
      results.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a vetted library or framework that
      does not allow this weakness to occur or provides constructs that make this
      weakness easier to avoid. Examples include the Safe C String Library (SafeStr)
      by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56].
      These libraries provide safer versions of overflow-prone string-handling functions.</p>

      <p>Operation Build and Compilation: Use automatic buffer overflow detection
      mechanisms that are offered by certain compilers or compiler extensions. Examples
      include</p>

      <p>Implementation: Consider adhering to the following rules when allocating
      and managing an application''s memory</p>

      <p>Operation Build and Compilation: Run or compile the software using features
      or extensions that randomly arrange the positions of a program''s executable
      and libraries in memory. Because this makes the addresses unpredictable, it
      can prevent an attacker from reliably jumping to exploitable code. Examples
      include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent
      Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their
      default memory addresses conflict with other modules, in a process known as
      rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly
      generated addresses. ASLR for libraries cannot be used in conjunction with prelink
      since it would require relocating the libraries at run-time, defeating the whole
      purpose of prelinking. For more information on these techniques see D3-SAOR
      (Segment Address Offset Randomization) from D3FEND [REF-1335].</p>

      <p>Operation: Use a CPU and operating system that offers Data Execution Protection
      (using hardware NX or XD bits) or the equivalent techniques that simulate this
      feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure
      that any instruction executed is exclusively at a memory address that is part
      of the code segment. For more information on these techniques see D3-PSEP (Process
      Segment Execution Prevention) from D3FEND [REF-1336].</p>

      <p>Implementation: Replace unbounded copy functions with analogous functions
      that support length arguments, such as strcpy with strncpy. Create these if
      they are not available.</p>'
    title: Out-of-bounds Write
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/787.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product reads or writes to a buffer using an index or pointer
      that references a memory location after the end of the buffer.</p><p>This typically
      occurs when a pointer or its index is incremented to a position after the buffer;
      or when pointer arithmetic results in a position after the buffer.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Access of Memory Location After End of Buffer
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/788.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives data from an upstream component, but does
      not completely filter special elements before sending it to a downstream component.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Incomplete Filtering of Special Elements
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/791.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product contains hard-coded credentials, such as a password
      or cryptographic key, which it uses for its own inbound authentication, outbound
      communication to external components, or encryption of internal data.</p><p>Hard-coded
      credentials typically create a significant hole that allows an attacker to bypass
      the authentication that has been configured by the product administrator. This
      hole might be difficult for the system administrator to detect. Even if detected,
      it can be difficult to fix, so the administrator may be forced into disabling
      the product entirely. There are two main variations: Inbound: the product contains
      an authentication mechanism that checks the input credentials against a hard-coded
      set of credentials. Outbound: the product connects to another system or component,
      and it contains hard-coded credentials for connecting to that component. In
      the Inbound variant, a default administration account is created, and a simple
      password is hard-coded into the product and associated with that account. This
      hard-coded password is the same for each installation of the product, and it
      usually cannot be changed or disabled by system administrators without manually
      modifying the program, or otherwise patching the product. If the password is
      ever discovered or published (a common occurrence on the Internet), then anybody
      with knowledge of this password can access the product. Finally, since all installations
      of the product will have the same password, even across different organizations,
      this enables massive attacks such as worms to take place. The Outbound variant
      applies to front-end systems that authenticate with a back-end service. The
      back-end service may require a fixed password which can be easily discovered.
      The programmer may simply hard-code those back-end credentials into the front-end
      product. Any user of that program may be able to extract the password. Client-side
      systems with hard-coded passwords pose even more of a threat, since the extraction
      of a password from a binary is usually very simple.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: For outbound authentication</p>

      <p>Architecture and Design: For inbound authentication</p>

      <p>Architecture and Design: If the product must contain hard-coded credentials
      or they cannot be removed, perform access control checks and limit which entities
      can access the feature that requires the hard-coded credentials. For example,
      a feature might only be enabled through the system console instead of through
      a network connection.</p>

      <p>Architecture and Design: For inbound authentication using passwords</p>

      <p>Architecture and Design: For front-end to back-end connections</p>'
    title: Use of Hard-coded Credentials
    vulnType: Key Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/798.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product uses a CAPTCHA challenge, but the challenge can be
      guessed or automatically recognized by a non-human actor.</p><p>An automated
      attacker could bypass the intended protection of the CAPTCHA challenge and perform
      actions at a higher frequency than humanly possible, such as launching spam
      attacks. There can be several different causes of a guessable CAPTCHA: An audio
      or visual image that does not have sufficient distortion from the unobfuscated
      source image. A question is generated with a format that can be automatically
      recognized, such as a math question. A question for which the number of possible
      answers is limited, such as birth years or favorite sports teams. A general-knowledge
      or trivia question for which the answer can be accessed using a data base, such
      as country capitals or popular entertainers. Other data associated with the
      CAPTCHA may provide hints about its contents, such as an image whose filename
      contains the word that is used in the CAPTCHA.</p>'
    locale: en-US
    observation: null
    remediation: null
    title: Guessable CAPTCHA
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/804.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a sequential operation to read or write a buffer,
      but it uses an incorrect length value that causes it to access memory that is
      outside of the bounds of the buffer.</p><p>When the length value exceeds the
      size of the destination, a buffer overflow could occur.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a vetted library or framework that
      does not allow this weakness to occur or provides constructs that make this
      weakness easier to avoid. Examples include the Safe C String Library (SafeStr)
      by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56].
      These libraries provide safer versions of overflow-prone string-handling functions.</p>

      <p>Operation Build and Compilation: Use automatic buffer overflow detection
      mechanisms that are offered by certain compilers or compiler extensions. Examples
      include</p>

      <p>Implementation: Consider adhering to the following rules when allocating
      and managing an application''s memory</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Operation Build and Compilation: Run or compile the software using features
      or extensions that randomly arrange the positions of a program''s executable
      and libraries in memory. Because this makes the addresses unpredictable, it
      can prevent an attacker from reliably jumping to exploitable code. Examples
      include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent
      Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their
      default memory addresses conflict with other modules, in a process known as
      rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly
      generated addresses. ASLR for libraries cannot be used in conjunction with prelink
      since it would require relocating the libraries at run-time, defeating the whole
      purpose of prelinking. For more information on these techniques see D3-SAOR
      (Segment Address Offset Randomization) from D3FEND [REF-1335].</p>

      <p>Operation: Use a CPU and operating system that offers Data Execution Protection
      (using hardware NX or XD bits) or the equivalent techniques that simulate this
      feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure
      that any instruction executed is exclusively at a memory address that is part
      of the code segment. For more information on these techniques see D3-PSEP (Process
      Segment Execution Prevention) from D3FEND [REF-1336].</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the product or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>'
    title: Buffer Access with Incorrect Length Value
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/805.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a protection mechanism that relies on the existence
      or values of an input, but the input can be modified by an untrusted actor in
      a way that bypasses the protection mechanism.</p><p>Developers may assume that
      inputs such as cookies, environment variables, and hidden form fields cannot
      be modified. However, an attacker could change these inputs using customized
      clients or other attacks. This change might not be detected. When security decisions
      such as authentication and authorization are made based on the values of these
      inputs, attackers can bypass the security of the software. Without sufficient
      encryption, integrity checking, or other mechanism, any input that originates
      from an outsider cannot be trusted.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Store state information and sensitive
      data on the server side only. Ensure that the system definitively and unambiguously
      keeps track of its own state and user state and has rules defined for legitimate
      state transitions. Do not allow any application user to affect state directly
      in any way other than through legitimate actions leading to state transitions.
      If information must be stored on the client, do not do so without encryption
      and integrity checking, or otherwise having a mechanism on the server side to
      catch tampering. Use a message authentication code (MAC) algorithm, such as
      Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state
      or sensitive data that has to be exposed, which can guarantee the integrity
      of the data - i.e., that the data has not been modified. Ensure that a strong
      hash function is used (CWE-328).</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. With a stateless protocol such as HTTP, use a framework that
      maintains the state for you. Examples include ASP.NET View State [REF-756] and
      the OWASP ESAPI Session Management feature [REF-45]. Be careful of language
      features that provide state support, since these might be provided as a convenience
      to the programmer and may not be considering security.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Operation Implementation: When using PHP, configure the application so that
      it does not use register_globals. During implementation, develop the application
      so that it does not rely on this feature, but be wary of implementing a register_globals
      emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar
      issues.</p>

      <p>Architecture and Design Implementation: Understand all the potential areas
      where untrusted inputs can enter your software</p>'
    title: Reliance on Untrusted Inputs in a Security Decision
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/807.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product utilizes a shared resource in a concurrent manner
      but does not attempt to synchronize access to the resource.</p><p>If access
      to a shared resource is not synchronized, then the resource may not be in a
      state that is expected by the product. This might lead to unexpected or insecure
      behaviors, especially if an attacker can influence the shared resource.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Missing Synchronization
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/820.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product utilizes a shared resource in a concurrent manner,
      but it does not correctly synchronize access to the resource.</p><p>If access
      to a shared resource is not correctly synchronized, then the resource may not
      be in a state that is expected by the product. This might lead to unexpected
      or insecure behaviors, especially if an attacker can influence the shared resource.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Incorrect Synchronization
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/821.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product obtains a value from an untrusted source, converts
      this value to a pointer, and dereferences the resulting pointer.</p><p>An attacker
      can supply a pointer for memory locations that the product is not expecting.
      If the pointer is dereferenced for a write operation, the attack might allow
      modification of critical state variables, cause a crash, or execute code. If
      the dereferencing operation is for a read, then the attack might allow reading
      of sensitive data, cause a crash, or set a variable to an unexpected value (since
      the value will be read from an unexpected memory location). There are several
      variants of this weakness, including but not necessarily limited to: The untrusted
      value is directly invoked as a function call. In OS kernels or drivers where
      there is a boundary between userland and privileged memory spaces, an untrusted
      pointer might enter through an API or system call (see CWE-781 for one such
      example). Inadvertently accepting the value from an untrusted control sphere
      when it did not have to be accepted as input at all. This might occur when the
      code was originally developed to be run by a single user in a non-networked
      environment, and the code is then ported to or otherwise exposed to a networked
      environment.</p>'
    locale: en-US
    observation: null
    remediation: null
    title: Untrusted Pointer Dereference
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/822.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs pointer arithmetic on a valid pointer, but
      it uses an offset that can point outside of the intended range of valid memory
      locations for the resulting pointer.</p><p>While a pointer can contain a reference
      to any arbitrary memory location, a program typically only intends to use the
      pointer to access limited portions of memory, such as contiguous memory used
      to access an individual array. Programs may use offsets in order to access fields
      or sub-elements stored within structured data. The offset might be out-of-range
      if it comes from an untrusted source, is the result of an incorrect calculation,
      or occurs because of another error. If an attacker can control or influence
      the offset so that it points outside of the intended boundaries of the structure,
      then the attacker may be able to read or write to memory locations that are
      used elsewhere in the product. As a result, the attack might change the state
      of the product as accessed through program variables, cause a crash or instable
      behavior, and possibly lead to code execution.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Out-of-range Pointer Offset
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/823.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product accesses or uses a pointer that has not been initialized.</p><p>If
      the pointer contains an uninitialized value, then the value might not point
      to a valid memory location. This could cause the product to read from or write
      to unexpected memory locations, leading to a denial of service. If the uninitialized
      pointer is used as a function call, then arbitrary functions could be invoked.
      If an attacker can influence the portion of uninitialized memory that is contained
      in the pointer, this weakness could be leveraged to execute code or perform
      other attacks. Depending on memory layout, associated memory management behaviors,
      and product operation, the attacker might be able to influence the contents
      of the uninitialized pointer, thus gaining more fine-grained control of the
      memory location to be accessed.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Access of Uninitialized Pointer
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/824.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product dereferences a pointer that contains a location for
      memory that was previously valid, but is no longer valid.</p><p>When a product
      releases memory, but it maintains a pointer to that memory, then the memory
      might be re-allocated at a later time. If the original pointer is accessed to
      read or write data, then this could cause the product to read or modify data
      that is in use by a different function or process. Depending on how the newly-allocated
      memory is used, this could lead to a denial of service, information exposure,
      or code execution.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Choose a language that provides automatic
      memory management.</p>

      <p>Implementation: When freeing pointers, be sure to set them to NULL once they
      are freed. However, the utilization of multiple or complex data structures may
      lower the usefulness of this strategy.</p>'
    title: Expired Pointer Dereference
    vulnType: Pointer Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/825.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product releases a resource that is still intended to be used
      by itself or another actor.</p><p>This weakness focuses on errors in which the
      product should not release a resource, but performs the release anyway. This
      is different than a weakness in which the product releases a resource at the
      appropriate time, but it maintains a reference to the resource, which it later
      accesses. For this weakness, the resource should still be valid upon the subsequent
      access. When a product releases a resource that is still being used, it is possible
      that operations will still be taken on this resource, which may have been repurposed
      in the meantime, leading to issues similar to CWE-825. Consequences may include
      denial of service, information exposure, or code execution.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Premature Release of Resource During Expected Lifetime
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/826.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product imports, requires, or includes executable functionality
      (such as a library) from a source that is outside of the intended control sphere.</p><p>When
      including third-party functionality, such as a web widget, library, or other
      source of functionality, the product must effectively trust that functionality.
      Without sufficient protection mechanisms, the functionality could be malicious
      in nature (either by coming from an untrusted source, being spoofed, or being
      modified in transit from a trusted source). The functionality might also contain
      its own weaknesses, or grant access to additional functionality and state information
      that should be kept private to the base system, such as system state information,
      sensitive application data, or the DOM of a web application. This might lead
      to many different consequences depending on the included functionality, but
      some examples include injection of malware, information exposure by granting
      excessive privileges or permissions to the untrusted functionality, DOM-based
      XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a vetted library or framework that
      does not allow this weakness to occur or provides constructs that make this
      weakness easier to avoid.</p>

      <p>Architecture and Design: When the set of acceptable objects, such as filenames
      or URLs, is limited or known, create a mapping from a set of fixed input values
      (such as numeric IDs) to the actual filenames or URLs, and reject all other
      inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt.
      Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</p>

      <p>Architecture and Design: For any security checks that are performed on the
      client side, ensure that these checks are duplicated on the server side, in
      order to avoid CWE-602. Attackers can bypass the client-side checks by modifying
      values after the checks have been performed, or by changing the client to remove
      the client-side checks entirely. Then, these modified values would be submitted
      to the server.</p>

      <p>Architecture and Design Operation: Run the code in a jail or similar sandbox
      environment that enforces strict boundaries between the process and the operating
      system. This may effectively restrict which files can be accessed in a particular
      directory or which commands can be executed by the software. OS-level examples
      include the Unix chroot jail, AppArmor, and SELinux. In general, managed code
      may provide some protection. For example, java.io.FilePermission in the Java
      SecurityManager allows the software to specify restrictions on file operations.
      This may not be a feasible solution, and it only limits the impact to the operating
      system; the rest of the application may still be subject to compromise. Be careful
      to avoid CWE-243 and other weaknesses related to jails.</p>

      <p>Architecture and Design Operation: Run your code using the lowest privileges
      that are required to accomplish the necessary tasks [REF-76]. If possible, create
      isolated accounts with limited privileges that are only used for a single task.
      That way, a successful attack will not immediately give the attacker access
      to the rest of the software or its environment. For example, database applications
      rarely need to run as the database administrator, especially in day-to-day operations.</p>

      <p>Implementation: Assume all input is malicious. Use an accept known good input
      validation strategy, i.e., use a list of acceptable inputs that strictly conform
      to specifications. Reject any input that does not strictly conform to specifications,
      or transform it into something that does. When performing input validation,
      consider all potentially relevant properties, including length, type of input,
      the full range of acceptable values, missing or extra inputs, syntax, consistency
      across related fields, and conformance to business rules. As an example of business
      rule logic, boat may be syntactically valid because it only contains alphanumeric
      characters, but it is not valid if the input is only expected to contain colors
      such as red or blue. Do not rely exclusively on looking for malicious or malformed
      inputs. This is likely to miss at least one undesirable input, especially if
      the code''s environment changes. This can give attackers enough room to bypass
      the intended validation. However, denylists can be useful for detecting potential
      attacks or determining which inputs are so malformed that they should be rejected
      outright. When validating filenames, use stringent allowlists that limit the
      character set to be used. If feasible, only allow a single . character in the
      filename to avoid weaknesses such as CWE-23, and exclude directory separators
      such as / to avoid CWE-36. Use a list of allowable file extensions, which will
      help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that
      removes potentially dangerous characters. This is equivalent to a denylist,
      which may be incomplete (CWE-184). For example, filtering / is insufficient
      protection if the filesystem also supports the use of as a directory separator.
      Another possible error could occur when the filtering is applied in a way that
      still produces dangerous data (CWE-182). For example, if ../ sequences are removed
      from the .../...// string in a sequential fashion, two instances of ../ would
      be removed from the original string, but the remaining characters would still
      form the ../ string.</p>

      <p>Architecture and Design Operation: Store library, include, and utility files
      outside of the web document root, if possible. Otherwise, store them in a separate
      directory and use the web server''s access control capabilities to prevent attackers
      from directly requesting them. One common practice is to define a fixed constant
      in each calling program, then check for the existence of the constant in the
      library/include file; if the constant does not exist, then the file was directly
      requested, and it can exit immediately. This significantly reduces the chance
      of an attacker being able to bypass any protection mechanisms that are in the
      base program but not in the include files. It will also reduce the attack surface.</p>

      <p>Architecture and Design Implementation: Understand all the potential areas
      where untrusted inputs can enter your software</p>

      <p>Operation: Use an application firewall that can detect attacks against this
      weakness. It can be beneficial in cases in which the code cannot be fixed (because
      it is controlled by a third party), as an emergency prevention measure while
      more comprehensive software assurance measures are applied, or to provide defense
      in depth.</p>'
    title: Inclusion of Functionality from Untrusted Control Sphere
    vulnType: Data Integrity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/829.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product attempts to unlock a resource that is not locked.</p><p>Depending
      on the locking functionality, an unlock of a non-locked resource might cause
      memory corruption or other modification to the resource (or its associated metadata
      that is used for tracking locks).</p>
    locale: en-US
    observation: null
    remediation: null
    title: Unlock of a Resource that is not Locked
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/832.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains multiple threads or executable segments that
      are waiting for each other to release a necessary lock, resulting in deadlock.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Deadlock
    vulnType: Resource Locking Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/833.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains an iteration or loop with an exit condition
      that cannot be reached, i.e., an infinite loop.</p><p>If the loop can be influenced
      by an attacker, this weakness could allow attackers to consume excessive resources
      such as CPU or memory.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Loop with Unreachable Exit Condition ('Infinite Loop')
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/835.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product records password hashes in a data store, receives
      a hash of a password from a client, and compares the supplied hash to the hash
      obtained from the data store.</p><p>Some authentication mechanisms rely on the
      client to generate the hash for a password, possibly to reduce load on the server
      or avoid sending the password across the network. However, when the client is
      used to generate the hash, an attacker can bypass the authentication by obtaining
      a copy of the hash, e.g. by using SQL injection to compromise a database of
      authentication credentials, or by exploiting an information exposure. The attacker
      could then use a modified client to replay the stolen hash without having knowledge
      of the original password. As a result, the server-side comparison against a
      client-side hash does not provide any more security than the use of passwords
      without hashing.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Password Hash Instead of Password for Authentication
    vulnType: Authentication Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/836.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product requires that an actor should only be able to perform
      an action once, or to have only one unique action, but the product does not
      enforce or improperly enforces this restriction.</p><p>In various applications,
      a user is only expected to perform a certain action once, such as voting, requesting
      a refund, or making a purchase. When this restriction is not enforced, sometimes
      this can have security implications. For example, in a voting application, an
      attacker could attempt to stuff the ballot box by voting multiple times. If
      these votes are counted separately, then the attacker could directly affect
      who wins the vote. This could have significant business impact depending on
      the purpose of the product.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Enforcement of a Single, Unique Action
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/837.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses or specifies an encoding when generating output
      to a downstream component, but the specified encoding is not the same as the
      encoding that is expected by the downstream component.</p><p>This weakness can
      cause the downstream component to use a decoding method that produces different
      data than what the product intended to send. When the wrong encoding is used
      - even if closely related - the downstream component could decode the data incorrectly.
      This can have security consequences when the provided boundaries between control
      and data are inadvertently broken, because the resulting data could introduce
      control characters or special elements that were not sent by the product. The
      resulting data could then be used to bypass protection mechanisms such as input
      validation, and enable injection attacks. While using output encoding is essential
      for ensuring that communications between components are accurate, the use of
      the wrong encoding - even if closely related - could cause the downstream component
      to misinterpret the output. For example, HTML entity encoding is used for elements
      in the HTML body of a web page. However, a programmer might use entity encoding
      when generating output for that is used within an attribute of an HTML tag,
      which could contain functional Javascript that is not affected by the HTML encoding.
      While web applications have received the most attention for this problem, this
      weakness could potentially apply to any type of product that uses a communications
      stream that could support multiple encodings.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Use context-aware encoding. That is, understand
      which encoding is being used by the downstream component, and ensure that this
      encoding is used. If an encoding can be specified, do so, instead of assuming
      that the default encoding is the same as the default being assumed by the downstream
      component.</p>

      <p>Architecture and Design: Where possible, use communications protocols or
      data formats that provide strict boundaries between control and data. If this
      is not feasible, ensure that the protocols or formats allow the communicating
      components to explicitly state which encoding/decoding method is being used.
      Some template frameworks provide built-in support.</p>

      <p>Architecture and Design: Use a vetted library or framework that does not
      allow this weakness to occur or provides constructs that make this weakness
      easier to avoid. For example, consider using the ESAPI Encoding control [REF-45]
      or a similar tool, library, or framework. These will help the programmer encode
      outputs in a manner less prone to error. Note that some template mechanisms
      provide built-in support for the appropriate encoding.</p>'
    title: Inappropriate Encoding for Output Context
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/838.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product checks a value to ensure that it is less than or equal
      to a maximum, but it does not also verify that the value is greater than or
      equal to the minimum.</p><p>Some products use signed integers or floats even
      when their values are only expected to be positive or 0. An input validation
      check might assume that the value is positive, and only check for the maximum
      value. If the value is negative, but the code assumes that the value is positive,
      this can produce an error. The error may have security consequences if the negative
      value is used for memory allocation, array access, buffer access, etc. Ultimately,
      the error could lead to a buffer overflow or other type of memory corruption.
      The use of a negative number in a positive-only context could have security
      implications for other types of resources. For example, a shopping cart might
      check that the user is not requesting more than 10 items, but a request for
      -3 items could cause the application to calculate a negative price and credit
      the attacker's account.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: If the number to be used is always expected to
      be positive, change the variable type from signed to unsigned or size_t.</p>

      <p>Implementation: If the number to be used could have a negative value based
      on the specification (thus requiring a signed value), but the number should
      only be positive to preserve code correctness, then include a check to ensure
      that the value is positive.</p>'
    title: Numeric Range Comparison Without Minimum Check
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/839.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product supports a session in which more than one behavior
      must be performed by an actor, but it does not properly ensure that the actor
      performs the behaviors in the required sequence.</p><p>By performing actions
      in an unexpected order, or by omitting steps, an attacker could manipulate the
      business logic of the product or cause it to enter an invalid state. In some
      cases, this can also expose resultant weaknesses. For example, a file-sharing
      protocol might require that an actor perform separate steps to provide a username,
      then a password, before being able to transfer files. If the file-sharing server
      accepts a password command followed by a transfer command, without any username
      being provided, the product might still perform the transfer. Note that this
      is different than CWE-696, which focuses on when the product performs actions
      in the wrong sequence; this entry is closely related, but it is focused on ensuring
      that the actor performs actions in the correct sequence. Workflow-related behaviors
      include: Steps are performed in the expected order. Required steps are not omitted.
      Steps are not interrupted. Steps are performed in a timely fashion.</p>'
    locale: en-US
    observation: null
    remediation: null
    title: Improper Enforcement of Behavioral Workflow
    vulnType: Business Logic Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/841.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product or the administrator places a user into an incorrect
      group.</p><p>If the incorrect group has more access or privileges than the intended
      group, the user might be able to bypass intended security policy to access unexpected
      resources or perform unexpected actions. The access-control system might not
      be able to detect malicious usage of this group membership.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Placement of User into Incorrect Group
    vulnType: Authorization Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/842.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product allocates or initializes a resource such as a pointer,
      object, or variable using one type, but it later accesses that resource using
      a type that is incompatible with the original type.</p><p>When the product accesses
      the resource using an incompatible type, this could trigger logical errors because
      the resource does not have expected properties. In languages without memory
      safety, such as C and C++, type confusion can lead to out-of-bounds memory access.
      While this weakness is frequently associated with unions when parsing data with
      many different embedded object types in C, it can be present in any application
      that can interpret the same variable or memory location in multiple ways. This
      weakness is not unique to C and C++. For example, errors in PHP applications
      can be triggered by providing array parameters when scalars are expected, or
      vice versa. Languages such as Perl, which perform automatic conversion of a
      variable of one type when it is accessed as if it were another type, can also
      contain these issues.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Access of Resource Using Incompatible Type ('Type Confusion')
    vulnType: Type Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/843.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses or accesses a resource that has not been initialized.</p><p>When
      a resource has not been properly initialized, the product may behave unexpectedly.
      This may lead to a crash or invalid memory access, but the consequences vary
      depending on the type of resource and how it is used within the product.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Explicitly initialize the resource before use.
      If this is performed through an API function or standard procedure, follow all
      required steps.</p>

      <p>Implementation: Pay close attention to complex conditionals that affect initialization,
      since some branches might not perform the initialization.</p>

      <p>Implementation: Avoid race conditions (CWE-362) during initialization routines.</p>

      <p>Build and Compilation: Run or compile the product with settings that generate
      warnings about uninitialized variables or data.</p>'
    title: Use of Uninitialized Resource
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/908.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not initialize a critical resource.</p><p>Many
      resources require initialization before they can be properly used. If a resource
      is not initialized, it could contain unpredictable or expired data, or it could
      be initialized to defaults that are invalid. This can have security implications
      when the resource is expected to have certain properties or values.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Explicitly initialize the resource before use.
      If this is performed through an API function or standard procedure, follow all
      specified steps.</p>

      <p>Implementation: Pay close attention to complex conditionals that affect initialization,
      since some branches might not perform the initialization.</p>

      <p>Implementation: Avoid race conditions (CWE-362) during initialization routines.</p>

      <p>Build and Compilation: Run or compile your product with settings that generate
      warnings about uninitialized variables or data.</p>'
    title: Missing Initialization of Resource
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/909.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses or accesses a file descriptor after it has been
      closed.</p><p>After a file descriptor for a particular file or device has been
      released, it can be reused. The code might not write to the original file, since
      the reused file descriptor might reference a different file or device.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Expired File Descriptor
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/910.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a reference count to manage a resource, but it
      does not update or incorrectly updates the reference count.</p><p>Reference
      counts can be used when tracking how many objects contain a reference to a particular
      resource, such as in memory management or garbage collection. When the reference
      count reaches zero, the resource can be de-allocated or reused because there
      are no more objects that use it. If the reference count accidentally reaches
      zero, then the resource might be released too soon, even though it is still
      in use. If all objects no longer use the resource, but the reference count is
      not zero, then the resource might not ever be released.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Update of Reference Count
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/911.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not properly restrict reading from or writing
      to dynamically-identified variables.</p><p>Many languages offer powerful features
      that allow the programmer to access arbitrary variables that are specified by
      an input string. While these features can offer significant flexibility and
      reduce development time, they can be extremely dangerous if attackers can modify
      unintended variables that have security implications.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: For any externally-influenced input, check the
      input against an allowlist of internal program variables that are allowed to
      be modified.</p>

      <p>Implementation Architecture and Design: Refactor the code so that internal
      program variables do not need to be dynamically identified.</p>'
    title: Improper Control of Dynamically-Identified Variables
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/914.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives input from an upstream component that specifies
      multiple attributes, properties, or fields that are to be initialized or updated
      in an object, but it does not properly control which attributes can be modified.</p><p>If
      the object contains attributes that were only intended for internal use, then
      their unexpected modification could lead to a vulnerability. This weakness is
      sometimes known by the language-specific mechanisms that make it possible, such
      as mass assignment, autobinding, or object injection.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: If available, use features of the language or
      framework that allow specification of allowlists of attributes or fields that
      are allowed to be modified. If possible, prefer allowlists over denylists. For
      applications written with Ruby on Rails, use the attr_accessible (allowlist)
      or attr_protected (denylist) macros in each class that may be used in mass assignment.</p>

      <p>Architecture and Design Implementation: If available, use the signing/sealing
      features of the programming language to assure that deserialized data has not
      been tainted. For example, a hash-based message authentication code (HMAC) could
      be used to ensure that data has not been modified.</p>

      <p>Implementation: For any externally-influenced input, check the input against
      an allowlist of internal object attributes or fields that are allowed to be
      modified.</p>

      <p>Implementation Architecture and Design: Refactor the code so that object
      attributes or fields do not need to be dynamically identified, and only expose
      getter/setter functionality for the intended attributes.</p>'
    title: Improperly Controlled Modification of Dynamically-Determined Object Attributes
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/915.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product generates a hash for a password, but it uses a scheme
      that does not provide a sufficient level of computational effort that would
      make password cracking attacks infeasible or expensive.</p><p>Many password
      storage mechanisms compute a hash and store the hash, instead of storing the
      original password in plaintext. In this design, authentication involves accepting
      an incoming password, computing its hash, and comparing it to the stored hash.
      Many hash algorithms are designed to execute quickly with minimal overhead,
      even cryptographic hashes. However, this efficiency is a problem for password
      storage, because it can reduce an attacker''s workload for brute-force password
      cracking. If an attacker can obtain the hashes through some other method (such
      as SQL injection on a database that stores hashes), then the attacker can store
      the hashes offline and use various techniques to crack the passwords by computing
      hashes efficiently. Without a built-in workload, modern attacks can compute
      large numbers of hashes, or even exhaust the entire space of all possible passwords,
      within a very short amount of time, using massively-parallel computing (such
      as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an
      efficient hash algorithm helps the attacker. There are several properties of
      a hash scheme that are relevant to its strength against an offline, massively-parallel
      attack: The amount of CPU time required to compute the hash (stretching) The
      amount of memory required to compute the hash (memory-hard operations) Including
      a random value, along with the password, as input to the hash computation (salting)
      Given a hash, there is no known way of determining an input (e.g., a password)
      that produces this hash value, other than by guessing possible inputs (one-way
      hashing) Relative to the number of all possible hashes that can be generated
      by the scheme, there is a low likelihood of producing the same hash for multiple
      different inputs (collision resistance) Note that the security requirements
      for the product may vary depending on the environment and the value of the passwords.
      Different schemes might not provide all of these properties, yet may still provide
      sufficient security for the environment. Conversely, a solution might be very
      strong in preserving one property, which still being very weak for an attack
      against another property, or it might not be able to significantly reduce the
      efficiency of a massively-parallel attack.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use an adaptive hash function that can
      be configured to change the amount of computational effort needed to compute
      the hash, such as the number of iterations (stretching) or the amount of memory
      required. Some hash functions perform salting automatically. These functions
      can significantly increase the overhead for a brute force attack compared to
      intentionally-fast functions such as MD5. For example, rainbow table attacks
      can become infeasible due to the high computing overhead. Finally, since computing
      power gets faster and cheaper over time, the technique can be reconfigured to
      increase the workload without forcing an entire replacement of the algorithm
      in use. Some hash functions that have one or more of these desired properties
      include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there
      is active debate about which of these is the most effective, they are all stronger
      than using salts with hash functions with very little computing overhead. Note
      that using these functions can have an impact on performance, so they require
      special consideration to avoid denial-of-service attacks. However, their configurability
      provides finer control over how much CPU and memory is used, so it could be
      adjusted to suit the environment''s needs.</p>

      <p>Implementation Architecture and Design: When using industry-approved techniques,
      use them correctly. Don''t cut corners by skipping resource-intensive steps
      (CWE-325). These steps are often essential for preventing common attacks.</p>'
    title: Use of Password Hash With Insufficient Computational Effort
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/916.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product constructs all or part of an expression language (EL)
      statement in a framework such as a Java Server Page (JSP) using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended EL statement before
      it is executed.</p><p>Frameworks such as Java Server Page (JSP) allow a developer
      to insert executable expressions within otherwise-static content. When the developer
      is not aware of the executable nature of these expressions and/or does not disable
      them, then if an attacker can inject expressions, this could lead to code execution
      or other unexpected behaviors.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Avoid adding user-controlled data into
      an expression interpreter when possible.</p>

      <p>Implementation: If user-controlled data must be added to an expression interpreter,
      one or more of the following should be performed</p>

      <p>System Configuration Operation: The framework or tooling might allow the
      developer to disable or deactivate the processing of EL expressions, such as
      setting the isELIgnored attribute for a JSP page to true.</p>'
    title: Improper Neutralization of Special Elements used in an Expression Language
      Statement ('Expression Language Injection')
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/917.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The web server receives a URL or similar request from an upstream
      component and retrieves the contents of this URL, but it does not sufficiently
      ensure that the request is being sent to the expected destination.</p><p>By
      providing URLs to unexpected hosts or ports, attackers can make it appear that
      the server is sending the request, possibly bypassing access controls such as
      firewalls that prevent the attackers from accessing the URLs directly. The server
      can be used as a proxy to conduct port scanning of hosts in internal networks,
      use other URLs such as that can access documents on the system (using file://),
      or use other protocols such as gopher:// or tftp://, which may provide greater
      control over the contents of requests.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Server-Side Request Forgery (SSRF)
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/918.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product operates in an environment in which power is a limited
      resource that cannot be automatically replenished, but the product does not
      properly restrict the amount of power that its operation consumes.</p><p>In
      environments such as embedded or mobile devices, power can be a limited resource
      such as a battery, which cannot be automatically replenished by the product
      itself, and the device might not always be directly attached to a reliable power
      source. If the product uses too much power too quickly, then this could cause
      the device (and subsequently, the product) to stop functioning until power is
      restored, or increase the financial burden on the device owner because of increased
      power costs. Normal operation of an application will consume power. However,
      in some cases, an attacker could cause the application to consume more power
      than intended, using components such as: Display CPU Disk I/O GPS Sound Microphone
      USB interface</p>'
    locale: en-US
    observation: null
    remediation: null
    title: Improper Restriction of Power Consumption
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/920.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product stores sensitive information in a file system or device
      that does not have built-in access control.</p><p>While many modern file systems
      or devices utilize some form of access control in order to restrict access to
      data, not all storage mechanisms have this capability. For example, memory cards,
      floppy disks, CDs, and USB devices are typically made accessible to any user
      within the system. This can become a problem when sensitive data is stored in
      these mechanisms in a multi-user environment, because anybody on the system
      can read or write this data. On Android devices, external storage is typically
      globally readable and writable by other applications on the device. External
      storage may also be easily accessible through the mobile device's USB connection
      or physically accessible through the device's memory card port.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Storage of Sensitive Data in a Mechanism without Access Control
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/921.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product establishes a communication channel with an endpoint
      and receives a message from that endpoint, but it does not sufficiently ensure
      that the message was not modified during transmission.</p><p>Attackers might
      be able to modify the message and spoof the endpoint by interfering with the
      data as it crosses the network or by redirecting the connection to a system
      under their control.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Improper Enforcement of Message Integrity During Transmission in a Communication
      Channel
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/924.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a handler for a custom URL scheme, but it does
      not properly restrict which actors can invoke the handler using the scheme.</p><p>Mobile
      platforms and other architectures allow the use of custom URL schemes to facilitate
      communication between applications. In the case of iOS, this is the only method
      to do inter-application communication. The implementation is at the developer's
      discretion which may open security flaws in the application. An example could
      be potentially dangerous functionality such as modifying files through a custom
      URL scheme.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Utilize a user prompt pop-up to authorize
      potentially harmful actions such as those modifying data or dealing with sensitive
      information. When designing functionality of actions in the URL scheme, consider
      whether the action should be accessible to all mobile applications, or if an
      allowlist of applications to interface with is appropriate.</p>'
    title: Improper Authorization in Handler for Custom URL Scheme
    vulnType: Authorization Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/939.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product establishes a communication channel to handle an incoming
      request that has been initiated by an actor, but it does not properly verify
      that the request is coming from the expected origin.</p><p>When an attacker
      can successfully establish a communication channel from an untrusted origin,
      the attacker may be able to gain privileges and access unexpected functionality.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use a mechanism that can validate the
      identity of the source, such as a certificate, and validate the integrity of
      data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle
      (AITM) attack. When designing functionality of actions in the URL scheme, consider
      whether the action should be accessible to all mobile applications, or if an
      allowlist of applications to interface with is appropriate.</p>'
    title: Improper Verification of Source of a Communication Channel
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/940.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product creates a communication channel to initiate an outgoing
      request to an actor, but it does not correctly specify the intended destination
      for that actor.</p><p>Attackers at the destination may be able to spoof trusted
      servers to steal data or cause a denial of service. There are at least two distinct
      weaknesses that can cause the product to communicate with an unintended destination:
      If the product allows an attacker to control which destination is specified,
      then the attacker can cause it to connect to an untrusted or malicious destination.
      For example, because UDP is a connectionless protocol, UDP packets can be spoofed
      by specifying a false source address in the packet; when the server receives
      the packet and sends a reply, it will specify a destination by using the source
      of the incoming packet - i.e., the false source. The server can then be tricked
      into sending traffic to the wrong host, which is effective for hiding the real
      source of an attack and for conducting a distributed denial of service (DDoS).
      As another example, server-side request forgery (SSRF) and XML External Entity
      (XXE) can be used to trick a server into making outgoing requests to hosts that
      cannot be directly accessed by the attacker due to firewall restrictions. If
      the product incorrectly specifies the destination, then an attacker who can
      control this destination might be able to spoof trusted servers. While the most
      common occurrence is likely due to misconfiguration by an administrator, this
      can be resultant from other weaknesses. For example, the product might incorrectly
      parse an e-mail or IP address and send sensitive data to an unintended destination.
      As another example, an Android application may use a sticky broadcast to communicate
      with a receiver for a particular application, but since sticky broadcasts can
      be processed by *any* receiver, this can allow a malicious application to access
      restricted data that was only intended for a different application.</p>'
    locale: en-US
    observation: null
    remediation: null
    title: Incorrectly Specified Destination in a Communication Channel
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/941.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: "<p>The product displays information or identifiers to a user, but\
      \ the display mechanism does not make it easy for the user to distinguish between\
      \ visually similar or identical glyphs (homoglyphs), which may cause the user\
      \ to misinterpret a glyph and perform an unintended, insecure action.</p><p>Some\
      \ glyphs, pictures, or icons can be semantically distinct to a program, while\
      \ appearing very similar or identical to a human user. These are referred to\
      \ as homoglyphs. For example, the lowercase l (ell) and uppercase I (eye) have\
      \ different character codes, but these characters can be displayed in exactly\
      \ the same way to a user, depending on the font. This can also occur between\
      \ different character sets. For example, the Latin capital letter A and the\
      \ Greek capital letter \u0391 (Alpha) are treated as distinct by programs, but\
      \ may be displayed in exactly the same way to a user. Accent marks may also\
      \ cause letters to appear very similar, such as the Latin capital letter grave\
      \ mark \xC0 and its equivalent \xC1 with the acute accent. Adversaries can exploit\
      \ this visual similarity for attacks such as phishing, e.g. by providing a link\
      \ to an attacker-controlled hostname that looks like a hostname that the victim\
      \ trusts. In a different use of homoglyphs, an adversary may create a back door\
      \ username that is visually similar to the username of a regular user, which\
      \ then makes it more difficult for a system administrator to detect the malicious\
      \ username while reviewing logs.</p>"
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Use a browser that displays Punycode for IDNs
      in the URL and status bars, or which color code various scripts in URLs. Due
      to the prominence of homoglyph attacks, several browsers now help safeguard
      against this attack via the use of Punycode. For example, Mozilla Firefox and
      Google Chrome will display IDNs as Punycode if top-level domains do not restrict
      which characters can be used in domain names or if labels mix scripts for different
      languages.</p>

      <p>Implementation: Use an email client that has strict filters and prevents
      messages that mix character sets to end up in a user''s inbox. Certain email
      clients such as Google''s GMail prevent the use of non-Latin characters in email
      addresses or in links contained within emails. This helps prevent homoglyph
      attacks by flagging these emails and redirecting them to a user''s spam folder.</p>'
    title: Insufficient Visual Distinction of Homoglyphs Presented to User
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1007.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The web application does not restrict or incorrectly restricts
      frame objects or UI layers that belong to another application or domain, which
      can lead to user confusion about which interface the user is interacting with.</p><p>A
      web application is expected to place restrictions on whether it is allowed to
      be rendered within frames, iframes, objects, embed or applet elements. Without
      the restrictions, users can be tricked into interacting with the application
      when they were not intending to.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: The use of X-Frame-Options allows developers
      of web content to restrict the usage of their application within the form of
      overlays, frames, or iFrames. The developer can indicate from which domains
      can frame the content. The concept of X-Frame-Options is well documented, but
      implementation of this protection mechanism is in development to cover gaps.
      There is a need for allowing frames from multiple domains.</p>

      <p>Implementation: A developer can use a frame-breaker script in each page that
      should not be framed. This is very helpful for legacy browsers that do not support
      X-Frame-Options security feature previously mentioned. It is also important
      to note that this tactic has been circumvented or bypassed. Improper usage of
      frames can persist in the web application through nested frames. The frame-breaking
      script does not intuitively account for multiple nested frames that can be presented
      to the user.</p>

      <p>Implementation: This defense-in-depth technique can be used to prevent the
      improper usage of frames in web applications. It prioritizes the valid sources
      of data to be loaded into the application through the usage of declarative policies.
      Based on which implementation of Content Security Policy is in use, the developer
      should use the frame-ancestors directive or the frame-src directive to mitigate
      this weakness. Both directives allow for the placement of restrictions when
      it comes to allowing embedded content.</p>'
    title: Improper Restriction of Rendered UI Layers or Frames
    vulnType: User Interface Security Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1021.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs a comparison between two entities, but the
      entities are of different, incompatible types that cannot be guaranteed to provide
      correct results when they are directly compared.</p><p>In languages that are
      strictly typed but support casting/conversion, such as C or C++, the programmer
      might assume that casting one entity to the same type as another entity will
      ensure that the comparison will be performed correctly, but this cannot be guaranteed.
      In languages that are not strictly typed, such as PHP or JavaScript, there may
      be implicit casting/conversion to a type that the programmer is unaware of,
      causing unexpected results; for example, the string 123 might be converted to
      a number type. See examples.</p>
    locale: en-US
    observation: null
    remediation: ''
    title: Comparison of Incompatible Types
    vulnType: Data Processing Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1024.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code performs a comparison between two entities, but the comparison
      examines the wrong factors or characteristics of the entities, which can lead
      to incorrect results and resultant weaknesses.</p><p>This can lead to incorrect
      results and resultant weaknesses. For example, the code might inadvertently
      compare references to objects, instead of the relevant contents of those objects,
      causing two equal objects to be considered unequal.</p>
    locale: en-US
    observation: null
    remediation: ''
    title: Comparison Using Wrong Factors
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1025.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The developer builds a security-critical protection mechanism
      into the software, but the processor optimizes the execution of the program
      such that the mechanism is removed or modified.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Processor Optimization Removal or Modification of Security-critical Code
    vulnType: Behavioral Problems
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1037.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product has multiple functions, methods, procedures, macros,
      etc. that contain the same code.</p><p>This issue makes it more difficult to
      maintain the product, which indirectly affects security by making it more difficult
      or time-consuming to find and/or fix vulnerabilities. For example, if there
      are two copies of the same code, the programmer might fix a weakness in one
      copy while forgetting to fix the same weakness in another copy.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Merge common functionality into a single function
      and then call that function from across the entire code base.</p>'
    title: Use of Redundant Code
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1041.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a data element that has an excessively large
      number of sub-elements with non-primitive data types such as structures or aggregated
      objects.</p><p>This issue can make the product perform more slowly. If the relevant
      code is reachable by an attacker, then this performance problem might introduce
      a vulnerability. While the interpretation of excessively large may vary for
      each product or developer, CISQ recommends a default of 5 sub-elements.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Data Element Aggregating an Excessively Large Number of Non-Primitive Elements
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1043.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's architecture contains too many - or too few - horizontal
      layers.</p><p>This issue makes it more difficult to maintain the product, which
      indirectly affects security by making it more difficult or time-consuming to
      find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.
      While the interpretation of expected range may vary for each product or developer,
      CISQ recommends a default minimum of 4 layers and maximum of 8 layers.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Architecture with Number of Horizontal Layers Outside of Expected Range
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1044.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A parent class has a virtual destructor method, but the parent
      has a child class that does not have a virtual destructor.</p><p>This issue
      can prevent the product from running reliably, since the child might not perform
      essential destruction operations. If the relevant code is reachable by an attacker,
      then this reliability problem might introduce a vulnerability, such as a memory
      leak (CWE-401).</p>
    locale: en-US
    observation: null
    remediation: null
    title: Parent Class with a Virtual Destructor and a Child Class without a Virtual
      Destructor
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1045.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product creates an immutable text string using string concatenation
      operations.</p><p>When building a string via a looping feature (e.g., a FOR
      or WHILE loop), the use of += to append to the existing string will result in
      the creation of a new object with each iteration. This programming pattern can
      be inefficient in comparison with use of text buffer data elements. This issue
      can make the product perform more slowly. If the relevant code is reachable
      by an attacker, then this could be influenced to create performance problem.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Creation of Immutable Text Using String Concatenation
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1046.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains modules in which one module has references
      that cycle back to itself, i.e., there are circular dependencies.</p><p>As an
      example, with Java, this weakness might indicate cycles between packages. This
      issue makes it more difficult to maintain the product due to insufficient modularity,
      which indirectly affects security by making it more difficult or time-consuming
      to find and/or fix vulnerabilities. It also might make it easier to introduce
      vulnerabilities. This issue can prevent the product from running reliably. If
      the relevant code is reachable by an attacker, then this reliability problem
      might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Modules with Circular Dependencies
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1047.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains callable control elements that contain an excessively
      large number of references to other application objects external to the context
      of the callable, i.e. a Fan-Out value that is excessively large.</p><p>While
      the interpretation of excessively large Fan-Out value may vary for each product
      or developer, CISQ recommends a default of 5 referenced objects. This issue
      makes it more difficult to maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invokable Control Element with Large Number of Outward Calls
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1048.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs a data query with a large number of joins
      and sub-queries on a large data table.</p><p>This issue can make the product
      perform more slowly. If the relevant code is reachable by an attacker, then
      this performance problem might introduce a vulnerability. While the interpretation
      of large data table and large number of joins or sub-queries may vary for each
      product or developer, CISQ recommends a default of 1 million rows for a large
      data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Data Query Operations in a Large Data Table
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1049.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product has a loop body or loop condition that contains a
      control element that directly or indirectly consumes platform resources, e.g.
      messaging, sessions, locks, or file descriptors.</p><p>This issue can make the
      product perform more slowly. If an attacker can influence the number of iterations
      in the loop, then this performance problem might allow a denial of service by
      consuming more platform resources than intended.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Platform Resource Consumption within a Loop
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1050.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product initializes data using hard-coded values that act
      as network resource identifiers.</p><p>This issue can prevent the product from
      running reliably, e.g. if it runs in an environment does not use the hard-coded
      network resource identifiers. If the relevant code is reachable by an attacker,
      then this reliability problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Initialization with Hard-Coded Network Resource Configuration Data
    vulnType: Initialization and Cleanup Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1051.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product initializes a data element using a hard-coded literal
      that is not a simple integer or static constant element.</p><p>This issue makes
      it more difficult to modify or maintain the product, which indirectly affects
      security by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Use of Hard-Coded Literals in Initialization
    vulnType: Initialization and Cleanup Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1052.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not have documentation that represents how it
      is designed.</p><p>This issue can make it more difficult to understand and maintain
      the product. It can make it more difficult and time-consuming to detect and/or
      fix vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Missing Documentation for Design
    vulnType: Documentation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1053.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code at one architectural layer invokes code that resides
      at a deeper layer than the adjacent layer, i.e., the invocation skips at least
      one layer, and the invoked code is not part of a vertical utility layer that
      can be referenced from any horizontal layer.</p><p>This issue makes it more
      difficult to understand and maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer
    vulnType: Encapsulation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1054.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a class with inheritance from more than one
      concrete class.</p><p>This issue makes it more difficult to maintain the product,
      which indirectly affects security by making it more difficult or time-consuming
      to find and/or fix vulnerabilities. It also might make it easier to introduce
      vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Multiple Inheritance from Concrete Classes
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1055.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A named-callable or method control element has a signature that
      supports a variable (variadic) number of parameters or arguments.</p><p>This
      issue can prevent the product from running reliably. If the relevant code is
      reachable by an attacker, then this reliability problem might introduce a vulnerability.
      With variadic arguments, it can be difficult or inefficient for manual analysis
      to be certain of which function/method is being invoked.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invokable Control Element with Variadic Parameters
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1056.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a dedicated, central data manager component as
      required by design, but it contains code that performs data-access operations
      that do not use this data manager.</p><p>This issue can make the product perform
      more slowly than intended, since the intended central data manager may have
      been explicitly optimized for performance or other quality characteristics.
      If the relevant code is reachable by an attacker, then this performance problem
      might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Data Access Operations Outside of Expected Data Manager Component
    vulnType: Encapsulation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1057.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains a function or method that operates in a multi-threaded
      environment but owns an unsafe non-final static storable or member data element.</p><p>This
      issue can prevent the product from running reliably. If the relevant code is
      reachable by an attacker, then this reliability problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invokable Control Element in Multi-Thread Context with non-Final Static
      Storable or Member Element
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1058.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs too many data queries without using efficient
      data processing functionality such as stored procedures.</p><p>This issue can
      make the product perform more slowly due to computational expense. If the relevant
      code is reachable by an attacker, then this performance problem might introduce
      a vulnerability. While the interpretation of too many data queries may vary
      for each product or developer, CISQ recommends a default maximum of 5 data queries
      for an inefficient function/procedure.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Number of Inefficient Server-Side Data Accesses
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1060.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code has a parent class that contains references to a child
      class, its methods, or its members.</p><p>This issue can prevent the product
      from running reliably. If the relevant code is reachable by an attacker, then
      this reliability problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Parent Class with References to Child Class
    vulnType: Encapsulation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1062.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A static code block creates an instance of a class.</p><p>This
      pattern identifies situations where a storable data element or member data element
      is initialized with a value in a block of code which is declared as static.
      This issue can make the product perform more slowly by performing initialization
      before it is needed. If the relevant code is reachable by an attacker, then
      this performance problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Creation of Class Instance within a Static Code Block
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1063.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a function, subroutine, or method whose signature
      has an unnecessarily large number of parameters/arguments.</p><p>This issue
      makes it more difficult to understand and/or maintain the product, which indirectly
      affects security by making it more difficult or time-consuming to find and/or
      fix vulnerabilities. It also might make it easier to introduce vulnerabilities.
      While the interpretation of large number of parameters. may vary for each product
      or developer, CISQ recommends a default maximum of 7 parameters/arguments.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invokable Control Element with Signature Containing an Excessive Number
      of Parameters
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1064.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses deployed components from application servers,
      but it also uses low-level functions/methods for management of resources, instead
      of the API provided by the application server.</p><p>This issue can prevent
      the product from running reliably. If the relevant code is reachable by an attacker,
      then this reliability problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Runtime Resource Management Control Element in a Component Built to Run
      on Application Servers
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1065.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a serializable data element that does not
      have an associated serialization method.</p><p>This issue can prevent the product
      from running reliably, e.g. by triggering an exception. If the relevant code
      is reachable by an attacker, then this reliability problem might introduce a
      vulnerability. As examples, the serializable nature of a data element comes
      from a serializable SerializableAttribute attribute in .NET and the inheritance
      from the java.io.Serializable interface in Java.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Missing Serialization Control Element
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1066.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a data query against an SQL table or view
      that is configured in a way that does not utilize an index and may cause sequential
      searches to be performed.</p><p>This issue can make the product perform more
      slowly. If the relevant code is reachable by an attacker, then this performance
      problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Execution of Sequential Searches of Data Resource
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1067.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The implementation of the product is not consistent with the design
      as described within the relevant documentation.</p><p>This issue makes it more
      difficult to maintain the product due to inconsistencies, which indirectly affects
      security by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Inconsistency Between Implementation and Documented Design
    vulnType: Documentation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1068.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a serializable, storable data element such
      as a field or member, but the data element contains member elements that are
      not serializable.</p><p>This issue can prevent the product from running reliably.
      If the relevant code is reachable by an attacker, then this reliability problem
      might introduce a vulnerability. As examples, the serializable nature of a data
      element comes from a serializable SerializableAttribute attribute in .NET and
      the inheritance from the java.io.Serializable interface in Java.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Serializable Data Element Containing non-Serializable Item Elements
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1070.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code contains a block that does not contain any code,
      i.e., the block is empty.</p><p>Empty code blocks can occur in the bodies of
      conditionals, function or method definitions, exception handlers, etc. While
      an empty code block might be intentional, it might also indicate incomplete
      implementation, accidental code deletion, unexpected macro expansion, etc. For
      some programming languages and constructs, an empty block might be allowed by
      the syntax, but the lack of any behavior within the block might violate a convention
      or API in such a way that it is an error.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Empty Code Block
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1071.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product accesses a data resource through a database without
      using a connection pooling capability.</p><p>This issue can make the product
      perform more slowly, as connection pools allow connections to be reused without
      the overhead and time consumption of opening and closing a new connection. If
      the relevant code is reachable by an attacker, then this performance problem
      might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Data Resource Access without Use of Connection Pooling
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1072.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains a client with a function or method that contains
      a large number of data accesses/queries that are sent through a data manager,
      i.e., does not use efficient database capabilities.</p><p>This issue can make
      the product perform more slowly. If the relevant code is reachable by an attacker,
      then this performance problem might introduce a vulnerability. While the interpretation
      of large number of data accesses/queries may vary for each product or developer,
      CISQ recommends a default maximum of 2 data accesses per function/method.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Non-SQL Invokable Control Element with Excessive Number of Data Resource
      Accesses
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1073.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A class has an inheritance level that is too high, i.e., it has
      a large number of parent classes.</p><p>This issue makes it more difficult to
      understand and maintain the product, which indirectly affects security by making
      it more difficult or time-consuming to find and/or fix vulnerabilities. It also
      might make it easier to introduce vulnerabilities. While the interpretation
      of large number of parent classes may vary for each product or developer, CISQ
      recommends a default maximum of 7 parent classes.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Class with Excessively Deep Inheritance
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1074.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product performs unconditional control transfer (such as a
      goto) in code outside of a branching structure such as a switch block.</p><p>This
      issue makes it more difficult to maintain the product, which indirectly affects
      security by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Unconditional Control Flow Transfer outside of Switch Block
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1075.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A parent class contains one or more child classes, but the parent
      class does not have a virtual destructor method.</p><p>This issue can prevent
      the product from running reliably due to undefined or unexpected behaviors.
      If the relevant code is reachable by an attacker, then this reliability problem
      might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Parent Class without Virtual Destructor Method
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1079.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A source code file has too many lines of code.</p><p>This issue
      makes it more difficult to understand and/or maintain the product, which indirectly
      affects security by making it more difficult or time-consuming to find and/or
      fix vulnerabilities. It also might make it easier to introduce vulnerabilities.
      While the interpretation of too many lines of code may vary for each product
      or developer, CISQ recommends a default threshold value of 1000.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Source Code File with Excessive Number of Lines of Code
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1080.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains a class instance that calls the method or function
      to delete or destroy itself.</p><p>For example, in C++, delete this will cause
      the object to delete itself. This issue can prevent the product from running
      reliably. If the relevant code is reachable by an attacker, then this reliability
      problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Class Instance Self Destruction Control Element
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1082.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product is intended to manage data access through a particular
      data manager component such as a relational or non-SQL database, but it contains
      code that performs data access operations without using that component.</p><p>When
      the product has a data access component, the design may be intended to handle
      all data access operations through that component. If a data access operation
      is performed outside of that component, then this may indicate a violation of
      the intended design. This issue can prevent the product from running reliably.
      If the relevant code is reachable by an attacker, then this reliability problem
      might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Data Access from Outside Expected Data Manager Component
    vulnType: Encapsulation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1083.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A function or method contains too many operations that utilize
      a data manager or file resource.</p><p>This issue makes it more difficult to
      maintain the product, which indirectly affects security by making it more difficult
      or time-consuming to find and/or fix vulnerabilities. It also might make it
      easier to introduce vulnerabilities. While the interpretation of too many operations
      may vary for each product or developer, CISQ recommends a default maximum of
      7 operations for the same data manager or file.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invokable Control Element with Excessive File or Data Access Operations
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1084.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A function, method, procedure, etc. contains an excessive amount
      of code that has been commented out within its body.</p><p>This issue makes
      it more difficult to maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities. While the interpretation
      of excessive volume may vary for each product or developer, CISQ recommends
      a default threshold of 2% of commented code.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Invokable Control Element with Excessive Volume of Commented-out Code
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1085.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A class contains an unnecessarily large number of children.</p><p>This
      issue makes it more difficult to understand and maintain the software, which
      indirectly affects security by making it more difficult or time-consuming to
      find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.
      While the interpretation of large number of children may vary for each product
      or developer, CISQ recommends a default maximum of 10 child classes.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Class with Excessive Number of Child Classes
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1086.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A class contains a virtual method, but the method does not have
      an associated virtual destructor.</p><p>This issue can prevent the product from
      running reliably, e.g. due to undefined behavior. If the relevant code is reachable
      by an attacker, then this reliability problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Class with Virtual Method without a Virtual Destructor
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1087.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a large data table that contains an excessively
      large number of indices.</p><p>This issue can make the product perform more
      slowly. If the relevant code is reachable by an attacker, then this performance
      problem might introduce a vulnerability. While the interpretation of large data
      table and excessively large number of indices may vary for each product or developer,
      CISQ recommends a default threshold of 1000000 rows for a large table and a
      default threshold of 3 indices.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Large Data Table with Excessive Number of Indices
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1089.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>A method for a class performs an operation that directly accesses
      a member element from another class.</p><p>This issue suggests poor encapsulation
      and makes it more difficult to understand and maintain the product, which indirectly
      affects security by making it more difficult or time-consuming to find and/or
      fix vulnerabilities. It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Method Containing Access of a Member Element from Another Class
    vulnType: Encapsulation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1090.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses the same control element across multiple architectural
      layers.</p><p>This issue makes it more difficult to understand and maintain
      the product, which indirectly affects security by making it more difficult or
      time-consuming to find and/or fix vulnerabilities. It also might make it easier
      to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Same Invokable Control Element in Multiple Architectural Layers
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1092.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product contains an index range scan for a large data table,
      but the scan can cover a large number of rows.</p><p>This issue can make the
      product perform more slowly. If the relevant code is reachable by an attacker,
      then this performance problem might introduce a vulnerability. While the interpretation
      of large data table and excessive index range may vary for each product or developer,
      CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for
      the index range.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Index Range Scan for a Data Resource
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1094.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a loop with a control flow condition based on
      a value that is updated within the body of the loop.</p><p>This issue makes
      it more difficult to understand and/or maintain the product, which indirectly
      affects security by making it more difficult or time-consuming to find and/or
      fix vulnerabilities. It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Loop Condition Value Update within the Loop
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1095.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a storable data element that does not have all
      of the associated functions or methods that are necessary to support comparison.</p><p>For
      example, with Java, a class that is made persistent requires both hashCode()
      and equals() methods to be defined. This issue can prevent the product from
      running reliably, due to incorrect or unexpected comparison results. If the
      relevant code is reachable by an attacker, then this reliability problem might
      introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Persistent Storable Data Element without Associated Comparison Control
      Element
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1097.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains a data element with a pointer that does not
      have an associated copy or constructor method.</p><p>This issue can prevent
      the product from running reliably. If the relevant code is reachable by an attacker,
      then this reliability problem might introduce a vulnerability.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Data Element containing Pointer Item without Proper Copy Control Element
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1098.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's code, documentation, or other artifacts do not consistently
      use the same naming conventions for variables, callables, groups of related
      callables, I/O capabilities, data types, file names, or similar types of elements.</p><p>This
      issue makes it more difficult to understand and/or maintain the product due
      to inconsistencies, which indirectly affects security by making it more difficult
      or time-consuming to find and/or fix vulnerabilities. It also might make it
      easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Inconsistent Naming Conventions for Identifiers
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1099.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product or code does not isolate system-dependent functionality
      into separate standalone modules.</p><p>This issue makes it more difficult to
      maintain and/or port the product, which indirectly affects security by making
      it more difficult or time-consuming to find and/or fix vulnerabilities. It also
      might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Insufficient Isolation of System-Dependent Functions
    vulnType: Encapsulation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1100.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses automatically-generated code that cannot be executed
      without a specific runtime support component.</p><p>This issue makes it more
      difficult to maintain the product, which indirectly affects security by making
      it more difficult or time-consuming to find and/or fix vulnerabilities. It also
      might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Reliance on Runtime Component in Generated Code
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1101.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code uses a data representation that relies on low-level data
      representation or constructs that may vary across different processors, physical
      machines, OSes, or other physical components.</p><p>This issue makes it more
      difficult to maintain and/or port the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Reliance on Machine-Dependent Data Representation
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1102.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product relies on third-party components that do not provide
      equivalent functionality across all desirable platforms.</p><p>This issue makes
      it more difficult to maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Platform-Dependent Third Party Components
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1103.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product relies on third-party components that are not actively
      supported or maintained by the original developer or a trusted proxy for the
      original developer.</p><p>Reliance on components that are no longer maintained
      can make it difficult or impossible to fix significant bugs, vulnerabilities,
      or quality issues. In effect, unmaintained code can become obsolete. This issue
      makes it more difficult to maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Unmaintained Third Party Components
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1104.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product or code uses machine-dependent functionality, but
      it does not sufficiently encapsulate or isolate this functionality from the
      rest of the code.</p><p>This issue makes it more difficult to port or maintain
      the product, which indirectly affects security by making it more difficult or
      time-consuming to find and/or fix vulnerabilities. It also might make it easier
      to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Insufficient Encapsulation of Machine-Dependent Functionality
    vulnType: Encapsulation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1105.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code uses literal constants that may need to change
      or evolve over time, instead of using symbolic constants.</p><p>This issue makes
      it more difficult to maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Insufficient Use of Symbolic Constants
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1106.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code uses symbolic constants, but it does not sufficiently
      place the definitions of these constants into a more centralized or isolated
      location.</p><p>This issue makes it more difficult to maintain the product,
      which indirectly affects security by making it more difficult or time-consuming
      to find and/or fix vulnerabilities. It also might make it easier to introduce
      vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Insufficient Isolation of Symbolic Constant Definitions
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1107.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code is structured in a way that relies too much on using
      or setting global variables throughout various points in the code, instead of
      preserving the associated information in a narrower, more local context.</p><p>This
      issue makes it more difficult to maintain the product, which indirectly affects
      security by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Reliance on Global Variables
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1108.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains a callable, block, or other code element in
      which the same variable is used to control more than one unique task or store
      more than one instance of data.</p><p>Use of the same variable for multiple
      purposes can make it more difficult for a person to read or understand the code,
      potentially hiding other quality issues. This issue makes it more difficult
      to maintain the product, which indirectly affects security by making it more
      difficult or time-consuming to find and/or fix vulnerabilities. It also might
      make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Use of Same Variable for Multiple Purposes
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1109.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's design documentation does not adequately describe
      control flow, data flow, system initialization, relationships between tasks,
      components, rationales, or other important aspects of the design.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Incomplete Design Documentation
    vulnType: Documentation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1110.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product's documentation does not adequately define inputs,
      outputs, or system/software interfaces.</p><p></p>
    locale: en-US
    observation: null
    remediation: null
    title: Incomplete I/O Documentation
    vulnType: Documentation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1111.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The document does not fully define all mechanisms that are used
      to control or influence how product-specific programs are executed.</p><p>This
      includes environmental variables, configuration files, registry keys, command-line
      switches or options, or system settings.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Incomplete Documentation of Program Execution
    vulnType: Documentation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1112.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code uses comment styles or formats that are inconsistent
      or do not follow expected standards for the product.</p><p>This issue makes
      it more difficult to maintain the product due to insufficient legibility, which
      indirectly affects security by making it more difficult or time-consuming to
      find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Inappropriate Comment Style
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1113.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code contains whitespace that is inconsistent across
      the code or does not follow expected standards for the product.</p><p>This issue
      makes it more difficult to understand and maintain the product, which indirectly
      affects security by making it more difficult or time-consuming to find and/or
      fix vulnerabilities. It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Inappropriate Whitespace Style
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1114.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code contains elements such as source files that do
      not consistently provide a prologue or header that has been standardized for
      the project.</p><p>The lack of a prologue can make it more difficult to accurately
      and quickly understand the associated code. Standard prologues or headers may
      contain information such as module name, version number, author, date, purpose,
      function, assumptions, limitations, accuracy considerations, etc. This issue
      makes it more difficult to maintain the product due to insufficient analyzability,
      which indirectly affects security by making it more difficult or time-consuming
      to find and/or fix vulnerabilities. It also might make it easier to introduce
      vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Source Code Element without Standard Prologue
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1115.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code contains comments that do not accurately describe
      or explain aspects of the portion of the code with which the comment is associated.</p><p>When
      a comment does not accurately reflect the associated code elements, this can
      introduce confusion to a reviewer (due to inconsistencies) or make it more difficult
      and less efficient to validate that the code is implementing the intended behavior
      correctly. This issue makes it more difficult to maintain the product, which
      indirectly affects security by making it more difficult or time-consuming to
      find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Verify that each comment accurately reflects
      what is intended to happen during execution of the code.</p>'
    title: Inaccurate Comments
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1116.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains a function or method whose signature and/or
      associated inline documentation does not sufficiently describe the callable's
      inputs, outputs, side effects, assumptions, or return codes.</p><p>This issue
      makes it more difficult to maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Callable with Insufficient Behavioral Summary
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1117.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The documentation does not sufficiently describe the techniques
      that are used for error handling, exception processing, or similar mechanisms.</p><p>Documentation
      may need to cover error handling techniques at multiple layers, such as module,
      executable, compilable code unit, or callable.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Insufficient Documentation of Error Handling Techniques
    vulnType: Documentation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1118.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code uses too many unconditional branches (such as goto).</p><p>This
      issue makes it more difficult to understand and/or maintain the product, which
      indirectly affects security by making it more difficult or time-consuming to
      find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Use of Unconditional Branching
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1119.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains McCabe cyclomatic complexity that exceeds a
      desirable maximum.</p><p>This issue makes it more difficult to understand and/or
      maintain the product, which indirectly affects security by making it more difficult
      or time-consuming to find and/or fix vulnerabilities. It also might make it
      easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive McCabe Cyclomatic Complexity
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1121.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code is structured in a way that a Halstead complexity measure
      exceeds a desirable maximum.</p><p>A variety of Halstead complexity measures
      exist, such as program vocabulary size or volume. This issue makes it more difficult
      to understand and/or maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Halstead Complexity
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1122.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses too much self-modifying code.</p><p>This issue
      makes it more difficult to understand or maintain the product, which indirectly
      affects security by making it more difficult or time-consuming to find and/or
      fix vulnerabilities. It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Use of Self-Modifying Code
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1123.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code contains a callable or other code grouping in which the
      nesting / branching is too deep.</p><p>This issue makes it more difficult to
      maintain the product, which indirectly affects security by making it more difficult
      or time-consuming to find and/or fix vulnerabilities. It also might make it
      easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessively Deep Nesting
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1124.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product has an attack surface whose quantitative measurement
      exceeds a desirable maximum.</p><p>Originating from software security, an attack
      surface measure typically reflects the number of input points and output points
      that can be utilized by an untrusted party, i.e. a potential attacker. A larger
      attack surface provides more places to attack, and more opportunities for developers
      to introduce weaknesses. In some cases, this measure may reflect other aspects
      of quality besides security; e.g., a product with many inputs and outputs may
      require a large number of tests in order to improve code coverage.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Excessive Attack Surface
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1125.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The source code declares a variable in one scope, but the variable
      is only used within a narrower scope.</p><p>This issue makes it more difficult
      to understand and/or maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Declaration of Variable with Unnecessarily Wide Scope
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1126.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code is compiled without sufficient warnings enabled, which
      may prevent the detection of subtle bugs or quality issues.</p><p>This issue
      makes it more difficult to maintain the product, which indirectly affects security
      by making it more difficult or time-consuming to find and/or fix vulnerabilities.
      It also might make it easier to introduce vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Compilation with Insufficient Warnings or Errors
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1127.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product does not use, or incorrectly uses, an input validation
      framework that is provided by the source language or an independent library.</p><p>Many
      modern coding languages provide developers with input validation frameworks
      to make the task of input validation easier and less error-prone. These frameworks
      will automatically check all input against specified criteria and direct execution
      to error handlers when invalid input is received. The improper use (i.e., an
      incorrect implementation or missing altogether) of these frameworks is not directly
      exploitable, but can lead to an exploitable condition if proper input validation
      is not performed later in the product. Not using provided input validation frameworks
      can also hurt the maintainability of code as future developers may not recognize
      the downstream input validation being used in the place of the validation framework.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Properly use provided input validation frameworks.</p>'
    title: Improper Use of Validation Framework
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1173.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product initializes or sets a resource with a default that
      is intended to be changed by the administrator, but the default is not secure.</p><p>Developers
      often choose default values that leave the product as open and easy to use as
      possible out-of-the-box, under the assumption that the administrator can (or
      should) change the default value. However, this ease-of-use comes at a cost
      when the default is insecure and the administrator does not change it.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Insecure Default Initialization of Resource
    vulnType: Initialization and Cleanup Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1188.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a cryptographic primitive that uses an Initialization
      Vector (IV), but the product does not generate IVs that are sufficiently unpredictable
      or unique according to the expected cryptographic requirements for that primitive.</p><p>By
      design, some cryptographic primitives (such as block ciphers) require that IVs
      must have certain properties for the uniqueness and/or unpredictability of an
      IV. Primitives may vary in how important these properties are. If these properties
      are not maintained, e.g. by a bug in the code, then the cryptography may be
      weakened or broken by attacking the IVs themselves.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Different cipher modes have different requirements
      for their IVs. When choosing and implementing a mode, it is important to understand
      those requirements in order to keep security guarantees intact. Generally, it
      is safest to generate a random IV, since it will be both unpredictable and have
      a very low chance of being non-unique. IVs do not have to be kept secret, so
      if generating duplicate IVs is a concern, a list of already-used IVs can be
      kept and checked against. NIST offers recommendations on generation of IVs for
      modes of which they have approved. These include options for when random IVs
      are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].</p>'
    title: Generation of Weak Initialization Vector (IV)
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1204.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product implements access controls via a policy or other feature
      with the intention to disable or restrict accesses (reads and/or writes) to
      assets in a system from untrusted agents. However, implemented access controls
      lack required granularity, which renders the control policy too broad because
      it allows accesses from unauthorized agents to the security-sensitive assets.</p><p>Integrated
      circuits and hardware engines can expose accesses to assets (device configuration,
      keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader).
      This access is typically access-controlled. Upon a power reset, the hardware
      or system usually starts with default values in registers, and the trusted firmware
      (Boot firmware) configures the necessary access-control protection. A common
      weakness that can exist in such protection schemes is that access controls or
      policies are not granular enough. This condition allows agents beyond trusted
      agents to access assets and could lead to a loss of functionality or the ability
      to set up the device securely. This further results in security risks from leaked,
      sensitive, key material to modification of device configuration.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design Implementation Testing: Access-control-policy
      protections must be reviewed for design inconsistency and common weaknesses.
      Access-control-policy definition and programming flow must be tested in pre-silicon,
      post-silicon testing.</p>'
    title: Insufficient Granularity of Access Control
    vulnType: Authorization Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1220.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product prevents direct access to a resource containing sensitive
      information, but it does not sufficiently limit access to metadata that is derived
      from the original, sensitive information.</p><p>Developers might correctly prevent
      unauthorized access to a database or other resource containing sensitive information,
      but they might not consider that portions of the original information might
      also be recorded in metadata, search indices, statistical reports, or other
      resources. If these resources are not also restricted, then attackers might
      be able to extract some or all of the original information, or otherwise infer
      some details. For example, an attacker could specify search terms that are known
      to be unique to a particular person, or view metadata such as activity or creation
      dates in order to identify usage patterns.</p>
    locale: en-US
    observation: null
    remediation: null
    title: Exposure of Sensitive Information Through Metadata
    vulnType: Information Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1230.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The code uses boxed primitives, which may introduce inefficiencies
      into performance-critical operations.</p><p>Languages such as Java and C# support
      automatic conversion through their respective compilers from primitive types
      into objects of the corresponding wrapper classes, and vice versa. For example,
      a compiler might convert an int to Integer (called autoboxing) or an Integer
      to int (called unboxing). This eliminates forcing the programmer to perform
      these conversions manually, which makes the code cleaner. However, this feature
      comes at a cost of performance and can lead to resource exhaustion and impact
      availability when used with generic collections. Therefore, they should not
      be used for scientific computing or other performance critical operations. They
      are only suited to support impedance mismatch between reference types and primitives.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Use of boxed primitives should be limited to
      certain situations such as when calling methods with typed parameters. Examine
      the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead
      of HashMap to avoid performance overhead.</p>'
    title: Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations
    vulnType: Bad Coding Practices
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1235.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product saves user-provided information into a Comma-Separated
      Value (CSV) file, but it does not neutralize or incorrectly neutralizes special
      elements that could be interpreted as a command when the file is opened by a
      spreadsheet product.</p><p>User-provided data is often saved to traditional
      databases. This data can be exported to a CSV file, which allows users to read
      the data using spreadsheet software such as Excel, Numbers, or Calc. This software
      interprets entries beginning with '=' as formulas, which are then executed by
      the spreadsheet software. The software's formula language often allows methods
      to access hyperlinks or the local command line, and frequently allows enough
      characters to invoke an entire script. Attackers can populate data fields which,
      when saved to a CSV file, may attempt information exfiltration or other malicious
      activity when automatically executed by the spreadsheet software.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: When generating CSV output, ensure that formula-sensitive
      metacharacters are effectively escaped or removed from all data before storage
      in the resultant CSV. Risky characters include ''='' (equal), ''+'' (plus),
      ''-'' (minus), and ''@'' (at).</p>

      <p>Implementation: If a field starts with a formula character, prepend it with
      a '' (single apostrophe), which prevents Excel from executing the formula.</p>

      <p>Architecture and Design: Certain implementations of spreadsheet software
      might disallow formulas from executing if the file is untrusted, or if the file
      is not authored by the current user.</p>'
    title: Improper Neutralization of Formula Elements in a CSV File
    vulnType: Data Neutralization Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1236.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>To fulfill the need for a cryptographic primitive, the product
      implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant
      cryptographic implementation.</p><p>Cryptographic protocols and systems depend
      on cryptographic primitives (and associated algorithms) as their basic building
      blocks. Some common examples of primitives are digital signatures, one-way hash
      functions, ciphers, and public key cryptography; however, the notion of primitive
      can vary depending on point of view. See Terminology Notes for further explanation
      of some concepts. Cryptographic primitives are defined to accomplish one very
      specific task in a precisely defined and mathematically reliable fashion. For
      example, suppose that for a specific cryptographic primitive (such as an encryption
      routine), the consensus is that the primitive can only be broken after trying
      out N different inputs (where the larger the value of N, the stronger the cryptography).
      For an encryption scheme like AES-256, one would expect N to be so large as
      to be infeasible to execute in a reasonable amount of time. If a vulnerability
      is ever found that shows that one can break a cryptographic primitive in significantly
      less than the expected number of attempts, then that primitive is considered
      weakened (or sometimes in extreme cases, colloquially it is broken). As a result,
      anything using this cryptographic primitive would now be considered insecure
      or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive
      has the potential to render the whole system vulnerable, due to its reliance
      on the primitive. A historical example can be found in TLS when using DES. One
      would colloquially call DES the cryptographic primitive for transport encryption
      in this version of TLS. In the past, DES was considered strong, because no weaknesses
      were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56
      keys was considered impractical for most actors. Unfortunately, attacking a
      system with 56-bit keys is now practical via brute force, which makes defeating
      DES encryption practical. It is now practical for an adversary to read any information
      sent under this version of TLS and use this information to attack the system.
      As a result, it can be claimed that this use of TLS is weak, and that any system
      depending on TLS with DES could potentially render the entire system vulnerable
      to attack. Cryptographic primitives and associated algorithms are only considered
      safe after extensive research and review from experienced cryptographers from
      academia, industry, and government entities looking for any possible flaws.
      Furthermore, cryptographic primitives and associated algorithms are frequently
      reevaluated for safety when new mathematical and attack techniques are discovered.
      As a result and over time, even well-known cryptographic primitives can lose
      their compliance status with the discovery of novel attacks that might either
      defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic
      primitives are implemented, it is almost certain that the implementation will
      be vulnerable to attacks that are well understood by cryptographers, resulting
      in the exposure of sensitive information and other consequences. This weakness
      is even more difficult to manage for hardware-implemented deployment of cryptographic
      algorithms. First, because hardware is not patchable as easily as software,
      any flaw discovered after release and production typically cannot be fixed without
      a recall of the product. Secondly, the hardware product is often expected to
      work for years, during which time computation power available to the attacker
      only increases. Therefore, for hardware implementations of cryptographic primitives,
      it is absolutely essential that only strong, proven cryptographic primitives
      are used.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Ensure that the architecture/design
      uses the strongest-available primitives and algorithms from trusted parties.
      For example, US government systems require FIPS 140-3 certification, which supersedes
      FIPS 140-2 [REF-1192] [REF-1226].</p>

      <p>Architecture and Design: Do not develop custom or private cryptographic algorithms.
      They will likely be exposed to attacks that are well-understood by cryptographers.
      As with all cryptographic mechanisms, the source code should be available for
      analysis. If the algorithm may be compromised when attackers find out how it
      works, then it is especially weak.</p>

      <p>Architecture and Design: Try not to use cryptographic algorithms in novel
      ways or with new modes of operation even when you know it is secure. For example,
      using SHA-2 chaining to create a 1-time pad for encryption might sound like
      a good idea, but one should not do this.</p>

      <p>Architecture and Design: Ensure that the design can replace one cryptographic
      primitive or algorithm with another in the next generation (cryptographic agility).
      Where possible, use wrappers to make the interfaces uniform. This will make
      it easier to upgrade to stronger algorithms. This is especially important for
      hardware, which can be more difficult to upgrade quickly than software; design
      the hardware at a replaceable block level.</p>

      <p>Architecture and Design: Do not use outdated or non-compliant cryptography
      algorithms. Some older algorithms, once thought to require a billion years of
      computing time, can now be broken in days or hours. This includes MD4, MD5,
      SHA1, DES, and other algorithms that were once regarded as strong [REF-267].</p>

      <p>Architecture and Design Implementation: Do not use a linear-feedback shift
      register (LFSR) or other legacy methods as a substitute for an accepted and
      standard Random Number Generator.</p>

      <p>Architecture and Design Implementation: Do not use a checksum as a substitute
      for a cryptographically generated hash.</p>

      <p>Architecture and Design: Use a vetted cryptographic library or framework.
      Industry-standard implementations will save development time and are more likely
      to avoid errors that can occur during implementation of cryptographic algorithms.
      However, the library/framework could be used incorrectly during implementation.</p>

      <p>Architecture and Design Implementation: When using industry-approved techniques,
      use them correctly. Don''t cut corners by skipping resource-intensive steps
      (CWE-325). These steps are often essential for the prevention of common attacks.</p>

      <p>Architecture and Design Implementation: Do not store keys in areas accessible
      to untrusted agents. Carefully manage and protect the cryptographic keys (see
      CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography
      algorithm is irrelevant.</p>'
    title: Use of a Cryptographic Primitive with a Risky Implementation
    vulnType: Cryptographic Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1240.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The device uses an algorithm that is predictable and generates
      a pseudo-random number.</p><p></p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: A true random number generator should
      be specified for cryptographic algorithms.</p>

      <p>Implementation: A true random number generator should be implemented for
      cryptographic algorithms.</p>'
    title: Use of Predictable Algorithm in Random Number Generator
    vulnType: Random Number Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1241.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>During execution of non-reentrant code, the product performs a
      call that unintentionally produces a nested invocation of the non-reentrant
      code.</p><p>In a complex product, a single function call may lead to many different
      possible code paths, some of which may involve deeply nested calls. It may be
      difficult to foresee all possible code paths that could emanate from a given
      function call. In some systems, an external actor can manipulate inputs to the
      system and thereby achieve a wide range of possible control flows. This is frequently
      a concern in products that execute scripts from untrusted sources. Examples
      of such products are web browsers and PDF readers. A weakness is present when
      one of the possible code paths resulting from a function call alters program
      state that the original caller assumes to be unchanged during the call.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: When architecting a system that will
      execute untrusted code in response to events, consider executing the untrusted
      event handlers asynchronously (asynchronous message passing) as opposed to executing
      them synchronously at the time each event fires. The untrusted code should execute
      at the start of the next iteration of the thread''s message loop. In this way,
      calls into non-reentrant code are strictly serialized, so that each operation
      completes fully before the next operation begins. Special attention must be
      paid to all places where type coercion may result in script execution. Performing
      all needed coercions at the very beginning of an operation can help reduce the
      chance of operations executing at unexpected junctures.</p>

      <p>Implementation: Make sure the code (e.g., function or class) in question
      is reentrant by not leveraging non-local data, not modifying its own code, and
      not calling other non-reentrant code.</p>'
    title: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls
    vulnType: State Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1265.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives input that is expected to specify a quantity
      (such as size or length), but it does not validate or incorrectly validates
      that the quantity has the required properties.</p><p>Specified quantities include
      size, length, frequency, price, rate, number of operations, time, and others.
      Code may rely on specified quantities to allocate resources, perform calculations,
      control iteration, etc. When the quantity is not properly validated, then attackers
      can specify malicious quantities to cause excessive resource allocation, trigger
      unexpected failures, enable buffer overflows, etc.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: Improper Validation of Specified Quantity in Input
    vulnType: Memory Buffer Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1284.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives input that is expected to specify an index,
      position, or offset into an indexable resource such as a buffer or file, but
      it does not validate or incorrectly validates that the specified index/position/offset
      has the required properties.</p><p>Often, indexable resources such as memory
      buffers or files can be accessed using a specific position, index, or offset,
      such as an index for an array or a position for a file. When untrusted input
      is not properly validated before it is used as an index, attackers could access
      (or attempt to access) unauthorized portions of these resources. This could
      be used to cause buffer overflows, excessive resource allocation, or trigger
      unexpected failures.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: Improper Validation of Specified Index, Position, or Offset in Input
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1285.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives input that is expected to be well-formed
      - i.e., to comply with a certain syntax - but it does not validate or incorrectly
      validates that the input complies with the syntax.</p><p>Often, complex inputs
      are expected to follow a particular syntax, which is either assumed by the input
      itself, or declared within metadata such as headers. The syntax could be for
      data exchange formats, markup languages, or even programming languages. When
      untrusted input is not properly validated for the expected syntax, attackers
      could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities
      that might not be directly exploitable if the input had conformed to the syntax.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: Improper Validation of Syntactic Correctness of Input
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1286.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives input that is expected to be of a certain
      type, but it does not validate or incorrectly validates that the input is actually
      of the expected type.</p><p>When input does not comply with the expected type,
      attackers could trigger unexpected errors, cause incorrect actions to take place,
      or exploit latent vulnerabilities that would not be possible if the input conformed
      with the expected type. This weakness can appear in type-unsafe programming
      languages, or in programming languages that support casting or conversion of
      an input to another type.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: Improper Validation of Specified Type of Input
    vulnType: Type Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1287.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives a complex input with multiple elements or
      fields that must be consistent with each other, but it does not validate or
      incorrectly validates that the input is actually consistent.</p><p>Some input
      data can be structured with multiple elements or fields that must be consistent
      with each other, e.g. a number-of-items field that is followed by the expected
      number of elements. When such complex inputs are inconsistent, attackers could
      trigger unexpected errors, cause incorrect actions to take place, or exploit
      latent vulnerabilities.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: Improper Validation of Consistency within Input
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1288.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product receives an input value that is used as a resource
      identifier or other type of reference, but it does not validate or incorrectly
      validates that the input is equivalent to a potentially-unsafe value.</p><p>Attackers
      can sometimes bypass input validation schemes by finding inputs that appear
      to be safe, but will be dangerous when processed at a lower layer or by a downstream
      component. For example, a simple XSS protection mechanism might try to validate
      that an input has no <script> tags using case-sensitive matching, but since
      HTML is case-insensitive when processed by web browsers, an attacker could inject
      <ScrIpT> and trigger XSS.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Assume all input is malicious. Use an accept
      known good input validation strategy, i.e., use a list of acceptable inputs
      that strictly conform to specifications. Reject any input that does not strictly
      conform to specifications, or transform it into something that does. When performing
      input validation, consider all potentially relevant properties, including length,
      type of input, the full range of acceptable values, missing or extra inputs,
      syntax, consistency across related fields, and conformance to business rules.
      As an example of business rule logic, boat may be syntactically valid because
      it only contains alphanumeric characters, but it is not valid if the input is
      only expected to contain colors such as red or blue. Do not rely exclusively
      on looking for malicious or malformed inputs. This is likely to miss at least
      one undesirable input, especially if the code''s environment changes. This can
      give attackers enough room to bypass the intended validation. However, denylists
      can be useful for detecting potential attacks or determining which inputs are
      so malformed that they should be rejected outright.</p>'
    title: Improper Validation of Unsafe Equivalence in Input
    vulnType: Data Validation Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1289.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses a non-blocking model that relies on a single
      threaded process for features such as scalability, but it contains code that
      can block when it is invoked.</p><p>When an attacker can directly invoke the
      blocking code, or the blocking code can be affected by environmental conditions
      that can be influenced by an attacker, then this can lead to a denial of service
      by causing unexpected hang or freeze of the code. Examples of blocking code
      might be an expensive computation or calling blocking library calls, such as
      those that perform exclusive file operations or require a successful network
      operation. Due to limitations in multi-thread models, single-threaded models
      are used to overcome the resource constraints that are caused by using many
      threads. In such a model, all code should generally be non-blocking. If blocking
      code is called, then the event loop will effectively be stopped, which can be
      undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and
      Node.js, or other custom event loop code.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Generally speaking, blocking calls should be
      replaced with non-blocking alternatives that can be used asynchronously. Expensive
      computations should be passed off to worker threads, although the correct approach
      depends on the framework being used.</p>

      <p>Implementation: For expensive computations, consider breaking them up into
      multiple smaller computations. Refer to the documentation of the framework being
      used for guidance.</p>'
    title: Use of Blocking Code in Single-threaded, Non-blocking Context
    vulnType: Concurrency Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1322.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product assigns the address 0.0.0.0 for a database server,
      a cloud service/instance, or any computing resource that communicates remotely.</p><p>When
      a server binds to the address 0.0.0.0, it allows connections from every IP address
      on the local machine, effectively exposing the server to every possible network.
      This might be much broader access than intended by the developer or administrator,
      who might only be expecting the server to be reachable from a single interface/network.</p>
    locale: en-US
    observation: null
    remediation: '<p>System Configuration: Assign IP addresses that are not 0.0.0.0.</p>

      <p>System Configuration: Unwanted connections to the configured server may be
      denied through a firewall or other packet filtering measures.</p>'
    title: Binding to an Unrestricted IP Address
    vulnType: Communication Channel Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1327.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: '<p>The product uses a regular expression with an inefficient, possibly
      exponential worst-case computational complexity that consumes excessive CPU
      cycles.</p><p>Some regular expression engines have a feature called backtracking.
      If the token cannot match, the engine backtracks to a position that may result
      in a different token that can match. Backtracking becomes a weakness if all
      of these conditions are met: The number of possible backtracking attempts are
      exponential relative to the length of the input. The input can fail to match
      the regular expression. The input can be long enough. Attackers can create crafted
      inputs that intentionally cause the regular expression to use excessive backtracking
      in a way that causes the CPU consumption to spike.</p>'
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Use regular expressions that do not
      support backtracking, e.g. by removing nested quantifiers.</p>

      <p>System Configuration: Set backtracking limits in the configuration of the
      regular expression implementation, such as PHP''s pcre.backtrack_limit. Also
      consider limits on execution time for the process.</p>

      <p>Implementation: Do not use regular expressions with untrusted input. If regular
      expressions must be used, avoid using backtracking in the expression.</p>

      <p>Implementation: Limit the length of the input that the regular expression
      will process.</p>'
    title: Inefficient Regular Expression Complexity
    vulnType: Complexity Issues
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1333.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>An integer value is specified to be shifted by a negative amount
      or an amount greater than or equal to the number of bits contained in the value
      causing an unexpected or indeterminate result.</p><p>Specifying a value to be
      shifted by a negative amount is undefined in various languages. Various computer
      architectures implement this action in different ways. The compilers and interpreters
      when generating code to accomplish a shift generally do not do a check for this
      issue. Specifying an over-shift, a shift greater than or equal to the number
      of bits contained in a value to be shifted, produces a result which varies by
      architecture and compiler. In some languages, this action is specifically listed
      as producing an undefined result.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Implicitly or explicitly add checks and mitigation
      for negative or over-shift values.</p>'
    title: Incorrect Bitwise Shift of Integer
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1335.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: "<p>The product processes a real number with an implementation in\
      \ which the number's representation does not preserve required accuracy and\
      \ precision in its fractional part, causing an incorrect result.</p><p>When\
      \ a security decision or calculation requires highly precise, accurate numbers\
      \ such as financial calculations or prices, then small variations in the number\
      \ could be exploited by an attacker. There are multiple ways to store the fractional\
      \ part of a real number in a computer. In all of these cases, there is a limit\
      \ to the accuracy of recording a fraction. If the fraction can be represented\
      \ in a fixed number of digits (binary or decimal), there might not be enough\
      \ digits assigned to represent the number. In other cases the number cannot\
      \ be represented in a fixed number of digits due to repeating in decimal or\
      \ binary notation (e.g. 0.333333...) or due to a transcendental number such\
      \ as \u03A0 or \u221A2. Rounding of numbers can lead to situations where the\
      \ computer results do not adequately match the result of sufficiently accurate\
      \ math.</p>"
    locale: en-US
    observation: null
    remediation: '<p>Implementation Patching and Maintenance: The developer or maintainer
      can move to a more accurate representation of real numbers. In extreme cases,
      the programmer can move to representations such as ratios of BigInts which can
      represent real numbers to extremely fine precision. The programmer can also
      use the concept of an Unum real. The memory and CPU tradeoffs of this change
      must be examined. Since floating point reals are used in many products and many
      locations, they are implemented in hardware and most format changes will cause
      the calculations to be moved into software resulting in slower products.</p>'
    title: Insufficient Precision or Accuracy of a Real Number
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1339.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product attempts to close or release a resource or handle
      more than once, without any successful open between the close operations.</p><p>Code
      typically requires opening handles or references to resources such as memory,
      files, devices, socket connections, services, etc. When the code is finished
      with using the resource, it is typically expected to close or release the resource,
      which indicates to the environment (such as the OS) that the resource can be
      re-assigned or reused by unrelated processes or actors - or in some cases, within
      the same process. API functions or other abstractions are often used to perform
      this release, such as free() or delete() within C/C++, or file-handle close()
      operations that are used in many languages. Unfortunately, the implementation
      or design of such APIs might expect the developer to be responsible for ensuring
      that such APIs are only called once per release of the resource. If the developer
      attempts to release the same resource/handle more than once, then the API's
      expectations are not met, resulting in undefined and/or insecure behavior. This
      could lead to consequences such as memory corruption, data corruption, execution
      path corruption, or other consequences. Note that while the implementation for
      most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic
      reference, then if this identifier is reused, checking the identifier for resource
      closure may result in a false state of openness and closing of the wrong resource.
      For this reason, reuse of identifiers is discouraged.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: Change the code''s logic so that the resource
      is only closed once. This might require simplifying or refactoring. This fix
      can be simple to do in small code blocks, but more difficult when multiple closes
      are buried within complex conditionals.</p>

      <p>Implementation: It can be effective to implement a flag that is (1) set when
      the resource is opened, (2) cleared when it is closed, and (3) checked before
      closing. This approach can be useful when there are disparate cases in which
      closes must be performed. However, flag-tracking can increase code complexity
      and requires diligent compliance by the programmer.</p>

      <p>Implementation: When closing a resource, set the resource''s associated variable
      to NULL or equivalent value for the given language. Some APIs will ignore this
      null value without causing errors. For other APIs, this can lead to application
      crashes or exceptions, which may still be preferable to corrupting an unintended
      resource such as memory or data.</p>'
    title: Multiple Releases of Same Resource or Handle
    vulnType: Resource Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1341.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product parses numeric input assuming base 10 (decimal) values,
      but it does not account for inputs that use a different base number (radix).</p><p>Frequently,
      a numeric input that begins with 0 is treated as octal, or 0x causes it to be
      treated as hexadecimal, e.g. by the inet_addr() function. For example, 023 (octal)
      is 35 decimal, or 0x31 is 49 decimal. Other bases may be used as well. If the
      developer assumes decimal-only inputs, the code could produce incorrect numbers
      when the inputs are parsed using a different base. This can result in unexpected
      and/or dangerous behavior. For example, a 0127.0.0.1 IP address is parsed as
      octal due to the leading 0, whose numeric value would be the same as 87.0.0.1
      (decimal), where the developer likely expected to use 127.0.0.1. The consequences
      vary depending on the surrounding code in which this weakness occurs, but they
      can include bypassing network-based access control using unexpected IP addresses
      or netmasks, or causing apparently-symbolic identifiers to be processed as if
      they are numbers. In web applications, this can enable bypassing of SSRF restrictions.</p>
    locale: en-US
    observation: null
    remediation: '<p>Implementation: If only decimal-based values are expected in
      the application, conditional checks should be created in a way that prevent
      octal or hexadecimal strings from being checked. This can be achieved by converting
      any numerical string to an explicit base-10 integer prior to the conditional
      check, to prevent octal or hex values from ever being checked against the condition.</p>

      <p>Implementation: If various numerical bases do need to be supported, check
      for leading values indicating the non-decimal base you wish to support (such
      as 0x for hex) and convert the numeric strings to integers of the respective
      base. Reject any other alternative-base string that is not intentionally supported
      by the application.</p>

      <p>Implementation: If regular expressions are used to validate IP addresses,
      ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses
      from being matched.</p>'
    title: Incorrect Parsing of Numbers with Different Radices
    vulnType: Numeric Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1389.html
  remediationComplexity: 2
- cvssScore: 0
  cvssSeverity: Low
  cvssv3: null
  details:
  - description: <p>The product uses default credentials (such as passwords or cryptographic
      keys) for potentially critical functionality.</p><p>It is common practice for
      products to be designed to use default keys, passwords, or other mechanisms
      for authentication. The rationale is to simplify the manufacturing process or
      the system administrator's task of installation and deployment into an enterprise.
      However, if admins do not change the defaults, it is easier for attackers to
      bypass authentication quickly across multiple organizations.</p>
    locale: en-US
    observation: null
    remediation: '<p>Architecture and Design: Force the administrator to change the
      credential upon installation.</p>

      <p>Installation Operation: The product administrator could change the defaults
      upon installation or during operation.</p>'
    title: Use of Default Credentials
    vulnType: Credentials Management Errors
  priority: 2
  references:
  - https://cwe.mitre.org/data/definitions/1392.html
  remediationComplexity: 2
